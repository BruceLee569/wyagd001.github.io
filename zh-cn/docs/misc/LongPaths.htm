<!DOCTYPE HTML>
<html lang="en">
<head>
<title>长路径 | AutoHotkey</title>
<meta name="description" content="Arrays are either data structures consisting of a collection of values, each identified by one key, or a collection of sequentially numbered variables." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>

 <body>
<h1>长路径 <span class="ver">[v1.1.31+]</span></h1>

 <p>一般来说, 程序受到两种路径长度限制的影响:</p>
<ol>
  <li>操作系统提供的函数通常将路径限制为 259 个字符, 也有一些例外.</li>
  <li>处理程序内路径的代码可能依赖于第一个限制来简化代码, 从而有效地设置了另一个 259 个字符的限制.</li>
</ol>
<p>这些限制通常被称为 "MAX_PATH 限制", after the constant <code>MAX_PATH</code>, which has the value 260. This allows for the drive letter, colon and slash (<code>C:\</code>), a single file or directory name at maximum length (255 characters), and a null terminator.</p>
<p>AutoHotkey <span class="ver">[v1.1.31+]</span> (不包括 ANSI 版本) 在大多数情况下删除了第二种类型, 这使得脚本可以围绕第一种类型工作. 有两种方法可以做到这一点:</p>
<ul>
  <li>Long paths can be enabled for AutoHotkey and all other long-path-aware programs on Windows 10. 有关详细信息, 请参阅 <a href="https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file#enable-long-paths-in-windows-10-version-1607-and-later">Microsoft 文档</a>. 简而言之, 这使大多数命令和函数能够透明地处理长路径, 但需要 Windows 10 1607 版本或更高版本.</li>
  <li>在很多情况下, 在路径前面加上前缀 <code>\\?\</code> 使其超过通常的限制. 但是, 有一些系统函数不支持(或者通常不支持长路径). 有关详细信息, 请参阅<a href="#limitations">已知限制</a>.</li>
</ul>

 <h2 id="prefix">长路径前缀</h2>
<p>如果底层系统函数支持 <code>\\?\</code> 前缀 -- 例如, in <code>\\?\C:\My Folder</code> -- 将限制增加到 32,767 个字符. 但是, 它通过跳过<a href="https://blogs.msdn.microsoft.com/jeremykuhne/2016/04/21/path-normalization/">路径规范化</a>来实现这一点. 路径的某些元素通常会被规范化删除或更改, 但它们会成为文件实际路径的一部分. 必须小心, 因为这允许创建"正常"程序无法访问的路径.</p>
<p>特别是, 规范化:</p>
<ul>
  <li>Resolves relative paths such as <code>dir\file.ext</code>, <code>\file.ext</code> and <code>C:file.ext</code> (note the absence of a slash).</li>
  <li>Resolves relative components such as <code>\..</code> and <code>\.</code>.</li>
  <li>Canonicalizes component/directory separators, replacing <code>/</code> with <code>\</code> and eliminating redundant separators.</li>
  <li>Trims certain characters, such as a single period at the end of a component (<code>dir.\file</code>) or trailing spaces and periods (<code>dir\filename . .</code>).</li>
</ul>
<p>A path can be normalized explicitly by passing it to <a href="https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-getfullpathnamew">GetFullPathName</a> via the function defined below, before applying the prefix. For example:</p>
<pre>MsgBox % "\\?\" NormalizePath("..\file.ext")</pre>
<pre filename="foo.ahk">NormalizePath(path) {
    cc := DllCall("GetFullPathName", "str", path, "uint", 0, "ptr", 0, "ptr", 0, "uint")
    VarSetCapacity(buf, cc*2)
    DllCall("GetFullPathName", "str", path, "uint", cc, "str", buf, "ptr", 0)
    return buf
}</pre>
<p>A path with the <code>\\?\</code> prefix can also be normalized by this function. However, in that case the working directory is never used, and the root is <code>\\?\</code> (for example, <code>\\?\C:\..</code> resolves to <code>\\?\</code> whereas <code>C:\..</code> resolves to <code>C:\</code>).</p>

 <h2 id="limitations">已知限制</h2>
<p>AutoHotkey 的 ANSI 版本不支持长路径.</p>
<p>Even when the path itself is not limited to 259 characters, each component (file or directory name) cannot exceed the hard limit imposed by the file system (usually 255 characters).</p>
<p>由于底层系统函数的限制, 下面这些不支持长路径:</p>
<ul>
  <li>DllCall (for <em>DllFile</em> and <em>Function</em>)</li>
  <li>FileCopyDir</li>
  <li>FileCreateShortcut</li>
  <li>FileGetShortcut</li>
  <li>FileMoveDir, unless the R option is used</li>
  <li>FileRecycle</li>
  <li>FileRemoveDir, unless <em>Recurse</em> is false</li>
  <li>SoundPlay (for this, the limit is 127 characters)</li>
  <li>Drive Label and DriveGet (except Type)</li>
  <li>Built-in variables which return special folder paths (for which long paths might be impossible anyway): A_AppData, A_Desktop, A_MyDocuments, ProgramFiles, A_ProgramFiles, A_Programs, A_StartMenu, A_Startup and Common variants, A_Temp and A_WinDir</li>
</ul>
<p>SetWorkingDir and A_WorkingDir support long paths only when Windows 10 long path awareness is enabled, since the <code>\\?\</code> prefix cannot be used. If the working directory exceeds MAX_PATH, it becomes impossible to launch programs with Run. 这些限制是由操作系统强加的.</p>
<p>It does not appear to be possible to run an executable with a full path which exceeds MAX_PATH. That being the case, it would not be possible to fully test any changes aimed at supporting longer executable paths. Therefore, MAX_PATH limits have been left in place for the following:</p>
<ul>
  <li>ahk_exe</li>
  <li>The default script's path, which is based on the current executable's path.</li>
  <li>Retrieval of the AutoHotkey installation directory, which is used by A_AhkPath in compiled scripts and may be used to launch Window Spy or the help file.</li>
  <li>WinGet ProcessPath.</li>
  <li>WinGet ProcessName (this theoretically isn't a problem since it is applied only to the name portion, and NTFS only supports names up to 255 chars).</li>
</ul>
<p>Long #Include paths shown in error messages may be truncated arbitrarily.</p>

 </body>
</html>