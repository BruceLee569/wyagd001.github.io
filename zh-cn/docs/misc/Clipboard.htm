<!DOCTYPE HTML>
<html>
<head>
<title>Clipboard / ClipboardAll | AutoHotkey</title>
<meta name="description" content="Clipboard and ClipboardAll are built-in variables which reflect the current contents of the Windows clipboard. ClipboardAll contains everything on the clipboard, such as pictures and formatting." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>

<body>
<h1>Clipboard 和 <a href="#ClipboardAll">ClipboardAll</a></h1>

<p><em>Clipboard</em> 是内置<a href="../Variables.htm">变量</a>, 它包含当前 Windows 剪贴板中可以用文本形式表示的内容. 与之相比, <em><a href="#ClipboardAll">ClipboardAll</a></em> 包含了剪贴板中的所有内容, 例如图片和其他特定格式的东西.</p>
<p id="CopiedFiles"><em>Clipboard</em> 中的每行文本通常都是以回车和换行符(CR+LF) 结尾, 它们在脚本中表示为 <code>`r`n</code>. 文件(例如从资源管理器窗口中使用 <kbd>Control</kbd>+<kbd>C</kbd> 复制的文件) 被视为文本: 每当在脚本中引用 <em>Clipboard</em> 时, 它们会被自动转换为它们的文件名(完整路径). 要逐个提取这些文件, 请参照此例:</p>
<pre><a href="../commands/LoopParse.htm">Loop, parse</a>, clipboard, `n, `r
{
    MsgBox, 4, , File number %A_Index% is %A_LoopField%.`n`nContinue?
    IfMsgBox, No, break
}</pre>
<p>要按字母顺序排列文件名, 请使用 <a href="../commands/Sort.htm">Sort</a> 命令. 要把剪贴板中的文件名写入到文件中, 请使用 <code><a href="../commands/FileAppend.htm">FileAppend</a>, %clipboard%`r`n, C:\My File.txt</code>. 要改变脚本尝试打开剪贴板的持续时间, 例如另一个程序在使用剪贴板的时候, 请使用 <a href="../commands/_ClipboardTimeout.htm">#ClipboardTimeout</a>.</p>
<strong>基本示例:</strong>
<pre>clipboard := "my text"   <em>; 在剪贴板中存入新内容.</em>
clipboard := ""   <em>; 清空剪贴板.</em>
clipboard := clipboard    <em>; 把任何复制的文件, HTML 或其他格式的文本转换为纯文本.</em>
clipboard := clipboard " Text to append."   <em>; 追加一些文本到剪贴板.</em>
StringReplace, clipboard, clipboard, ABC, DEF, All   <em>; 把剪贴板中所有 ABC 替换为 DEF (同时把剪贴板的内容转换为纯文本).</em></pre>

<p><strong>使用 ClipWait 提高脚本的可靠性:</strong></p>
<pre>clipboard := ""  <em>; 让剪贴板初始为空, 这样可以使用 ClipWait 检测文本什么时候被复制到剪贴板中.</em>
Send ^c
<a href="../commands/ClipWait.htm">ClipWait</a>  <em>; 等待剪贴板中出现文本.</em>
MsgBox Control-C copied the following contents to the clipboard:`n`n%clipboard%</pre>
<h2 id="ClipboardAll">ClipboardAll<span class="headnote">(保存并恢复剪贴板中的所有内容)</span></h2>
<p><em>ClipboardAll</em> 包含了剪贴板中的所有内容(例如图片和格式). 它常用来保存剪贴板的内容, 以便脚本可以在某个操作中临时使用剪贴板. 当这个操作结束后, 脚本可以恢复剪贴板为原来的内容, 如下所示:</p>
<pre>ClipSaved := ClipboardAll   <em>; 把剪贴板的所有内容保存到您选择的变量中.
; ... 这里临时使用剪贴板, 例如使用 <a href="../commands/Transform.htm#Unicode">Transform Unicode</a> 粘贴 Unicode 文本 ...</em>
Clipboard := ClipSaved   <em>; 恢复剪贴板为原来的内容. 注意这里使用 <i>Clipboard</i>(不是 <i>ClipboardAll</i>).</em>
ClipSaved := ""   <em>; 在原来的剪贴板含大量内容时释放内存.</em></pre>
<p><em>ClipboardAll</em> 中的内容可以保存到文件中(在这种模式中, FileAppend 总是覆盖任何现有的文件):</p>
<pre><a href="../commands/FileAppend.htm">FileAppend</a>, %ClipboardAll%, C:\Company Logo.clip <em>; 文件扩展名无关紧要.</em></pre>
<p>要在之后加载这个文件的内容回剪贴板(或变量中), 请参照此例:</p>
<pre><a href="../commands/FileRead.htm">FileRead</a>, Clipboard, <strong>*c</strong> C:\Company Logo.clip <em>; 注意 *c 必须在文件名的前面.</em></pre>

<h3 id="limitations">限制</h3>
<p>一些直接使用 <em>ClipboardAll</em> 的限制:</p>
<ul>
  <li>除上面描述的方式外的其他方式使用 <em>ClipboardAll</em> 时, 都会得到空值.</li>
  <li><em>ClipboardAll</em> 不支持在<a href="../Variables.htm#comma">逗号分隔的表达式中</a>; 即它必须在单独的一行进行赋值, 如 <code>ClipSaved := ClipboardAll</code>.</li>
</ul>
<p>包含二进制剪贴板数据的变量可以按如下方式使用:</p>
<ul>
  <li>通过赋值给 <em>Clipboard</em> 将数据放回剪贴板, 如上所示.</li>
  <li>用 <a href="../commands/FileAppend.htm">FileAppend</a> 将剪贴板数据写入文件, 如上所示.</li>
  <li>将其复制到另一个变量(或 <a href="../Functions.htm#ByRef">ByRef</a> 参数) 如此例所示: <code>ClipSaved2 := ClipSaved</code>.</li>
  <li><a href="../Functions.htm#ByRef">通过引用</a>或在 <span class="ver">[v1.0.46+]</span> 中通过值, 将其传递给<a href="../Functions.htm">用户定义的函数</a>.</li>
  <li>通过将其传递给 <a href="../commands/StringLen.htm">StrLen() / StringLen</a>  来确定数据的大小, 如<a href="#len">下</a>所示.</li>
  <li>通过使用传统 IF 比较这两个变量, 如<a href="#compare">下</a>所示.</li>
  <li>使用其<a href="../Variables.htm#amp">地址</a>或将变量本身传递给 <a href="../commands/NumGet.htm">NumGet</a> 来检查数据.</li>
</ul>
<p>其他限制:</p>
<ul>
  <li>When binary clipboard data is assigned to a variable, the variable is marked with a hidden attribute. This attribute can only be set by <a href="../commands/FileRead.htm">FileRead</a> with the <code>*c</code> option, or by direct assignment from <em>ClipboardAll</em> (as shown above) or another variable which has the attribute.</li>
  <li>When used in ways other than those described above, binary clipboard data is usually interpreted as text and truncated at the first null character, which is typically at the beginning of the data. For instance, this occurs when one attempts to return the data from a function or assign it to a property or array element.</li>
  <li>The clipboard attribute is removed when the variable is freed or assigned any other value, even by indirect means such as <a href="../commands/StringReplace.htm">StringReplace</a>.</li>
  <li>Variables without the clipboard attribute are treated as text when assigned to <em>Clipboard</em> or passed to FileAppend, even if the data is in the appropriate binary format.</li>
</ul>

<h3>注意</h3>
<p>如果 <em>ClipboardAll</em> 不能获取剪贴板中一个或多个数据对象(格式), 则会忽略它们但仍保存剩余的所有对象.</p>
<p><a href="../commands/ClipWait.htm">ClipWait</a> 可以用来检测剪贴板何时包含数据(可以包含非文本数据).</p>
<p id="len"><a href="../commands/StringLen.htm">StrLen() / StringLen</a> may be used to discover the total size of a variable to which <em>ClipboardAll</em> has been assigned. However, to get the size in bytes on Unicode versions of AutoHotkey, the length must be multiplied by 2. <a href="../Variables.htm#IsUnicode">A_IsUnicode</a> can be used to support ANSI and Unicode versions, as in this example: <code>size := StrLen(ClipSaved) * (A_IsUnicode ? 2 : 1)</code>.</p>
<p id="compare">Variables to which <em>ClipboardAll</em> has been assigned can be compared to each other (but not directly to <em>ClipboardAll</em>) by means of <a href="../commands/IfEqual.htm">IfEqual, IfNotEqual</a>, <code>If Var1 = %Var2%</code>, or <code>If Var1 != %Var2%</code>. In the following example, the length of each variable is checked first. If that is not enough to make the determination, the contents are compared to break the tie:</p>
<pre>if ClipSaved1 != %ClipSaved2%   <em>; This <u>must</u> be an old-style IF statement, not an expression.</em>
    MsgBox The two saved clipboards are different.</pre>
<p>保存 <em>ClipboardAll</em> 到变量时, 这个变量的大小不受 <a href="../commands/_MaxMem.htm">#MaxMem</a> 设置的内存限制.</p>
<p>A saved clipboard file internally consists of a four-byte format type, followed by a four-byte (for 32-bit) or eight-byte (for 64-bit) data-block size, followed by the data-block for that format. If the clipboard contained more than one format (which is almost always the case), these three items are repeated until all the formats are included. The file ends with a four-byte format type of 0.</p>
<p>已知限制: 当剪贴板中含有 Microsoft Excel 单元格数据时获取 <em>ClipboardAll</em> 可能会导致 Excel 弹出 "找不到打印机" 的对话框.</p>
<p>使用 AutoHotkey 编写的剪贴板实用工具:</p>
<ul>
  <li>Deluxe Clipboard: 提供不限数量的私有的命名的剪贴板, 可以用来复制, 剪切, 追加或剪切追加选中的文本. <a href="https://www.autohotkey.com/forum/topic2665.html">www.autohotkey.com/forum/topic2665.html</a></li>
  <li>ClipStep: 仅使用键盘上 <kbd>Ctrl</kbd>-<kbd>X</kbd>-<kbd>C</kbd>-<kbd>V</kbd> 控制多个剪贴板. <a href="https://www.autohotkey.com/forum/topic4836.html">www.autohotkey.com/forum/topic4836.html</a></li>
</ul>

<h2 id="OnClipboardChange">OnClipboardChange</h2>
<p>脚本可以使用 <a href="../commands/OnClipboardChange.htm">OnClipboardChange</a> 监视系统剪贴板的改变.</p>

</body>
</html>