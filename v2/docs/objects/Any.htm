<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Any - Methods &amp; Properties | AutoHotkey v2</title>
<meta name="description" content="Any represents the root of the AutoHotkey type hierarchy." />
<meta name="ahk:equiv-v1" content="AutoHotkey.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

 <h1>Any</h1>

 <p>Theoretically, at the root of AutoHotkey's type hierarchy lies the "Any" type. All other types are a sub-type of Any, except <a href="../commands/ComObject.htm">ComObject</a> (which is excluded from further consideration on this page). Currently the Any type exists only as a <a href="../Objects.htm#delegation">prototype object</a> which sits at the end of every value's chain of base objects. For further details, see <a href="../Objects.htm#primitive">Primitive Values</a>.</p>
<p>The Any prototype object defines methods and properties that are applicable to all values and objects unless overridden. The prototype object itself is natively an <a href="Object.htm">Object</a>, but has no <code>base</code> and therefore does not identify as an instance of Object.</p>

 <p><strong>Methods:</strong></p>
<ul>
  <li><a href="#GetMethod">GetMethod</a></li>
  <li><a href="#HasBase">HasBase</a></li>
  <li><a href="#HasMethod">HasMethod</a></li>
  <li><a href="#HasProp">HasProp</a></li>
</ul>
<p><strong>Properties:</strong></p>
<ul>
	<li><a href="#Base">Base</a></li>
</ul>
<p><strong>Functions:</strong></p>
<ul>
	<li><a href="#GetBase">ObjGetBase</a></li>
</ul>

 <h2>Methods</h2>

 <div class="methodShort" id="GetMethod"><h2>GetMethod</h2>
<p>Retrieves the implementation function of a method.</p>
<pre class="Syntax">Value.<span class="func">GetMethod</span>(Name)</pre>
<p>This method is exactly equivalent to <code>GetMethod(Value, Name)</code>, unless overridden.</p>
</div>

 <div class="methodShort" id="HasBase"><h2>HasBase</h2>
<p>Returns true if <em>BaseObj</em> is in <em>Value</em>'s chain of base objects, otherwise false.</p>
<pre class="Syntax">Value.<span class="func">HasBase</span>(BaseObj)</pre>
<p>This method is exactly equivalent to <code>HasBase(Value, BaseObj)</code>, unless overridden.</p>
</div>

 <div class="methodShort" id="HasMethod"><h2>HasMethod</h2>
<p>Returns true if the value has a method by this name, otherwise false.</p>
<pre class="Syntax">Value.<span class="func">HasMethod</span>(Name)</pre>
<p>This method is exactly equivalent to <code>HasMethod(Value, Name)</code>, unless overridden.</p>
</div>

 <div class="methodShort" id="HasProp"><h2>HasProp</h2>
<p>Returns true if the value has a property by this name, otherwise false.</p>
<pre class="Syntax">Value.<span class="func">HasProp</span>(Name)</pre>
<p>This method is exactly equivalent to <code>HasProp(Value, Name)</code>, unless overridden.</p>
</div>

 <h2>Properties</h2>

 <div class="methodShort" id="Base"><h2>Base</h2>
<p>Retrieves the value's <a href="../Objects.htm#delegation">base object</a>.</p>
<pre class="Syntax">BaseObj := Value.Base</pre>
<p>For <a href="../Objects.htm#primitive">primitive values</a>, the return value is the pre-defined prototype object corresponding to <code>Type(Value)</code>.</p>
<p>See also: <a href="#GetBase">ObjGetBase</a>, <a href="Object.htm#SetBase">ObjSetBase</a>, <a href="Object.htm#Base">Obj.Base</a></p>
</div>

 <h2>Functions</h2>

 <div class="methodShort" id="GetBase"><h2>ObjGetBase</h2>
<p>Returns the value's <a href="../Objects.htm#delegation">base object</a>.</p>
<pre class="Syntax">BaseObj := <span class="func">ObjGetBase</span>(Value)</pre>
<p>No <a href="../Objects.htm#Meta_Functions">meta-functions</a> or <a href="../Objects.htm#Custom_Classes_property">property functions</a> are called. Overriding the <a href="#Base">Base</a> property does not affect the behaviour of this function.</p>
<p>If there is no base, the return value is an empty string. Only COM objects and the Any prototype itself have no base.</p>
<p>See also: <a href="#Base">Base</a>, <a href="Object.htm#SetBase">ObjSetBase</a>, <a href="Object.htm#Base">Obj.Base</a></p>
</div>

 </body>
</html>