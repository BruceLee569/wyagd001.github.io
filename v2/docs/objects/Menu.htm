<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Menu/MenuBar Object - 方法 &amp; 属性 | AutoHotkey v2</title>
<meta name="description" content="The Menu/MenuBar object provides an interface for menus or menu bars to perform actions, such as adding menu items, or to retrieve or set values, such as the default menu item." />
<meta name="ahk:equiv-v1" content="commands/Menu.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css">
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>Menu/MenuBar 对象</h1>
<p>用于修改和显示菜单或菜单栏.</p>
<p>菜单对象用于定义, 修改和显示弹出菜单. <a href="Menu.htm#New">Menu.New</a>, <a href="MenuFromHandle.htm">MenuFromHandle</a> 和 <a href="../Variables.htm#TrayMenu">A_TrayMenu</a> 返回此类对象.</p>
<p>MenuBar 对象用于定义和修改与 <a href="Gui.htm#MenuBar">Gui.MenuBar</a> 一起使用的菜单栏. 它们是使用 <a href="Menu.htm#New">MenuBar.New</a> 创建的. 如果给定菜单栏句柄, 则 <a href="../commands/MenuFromHandle.htm">MenuFromHandle</a> 返回此类型的对象.</p>
<p><code>Menu</code> 和 <code>MenuBar</code> 是预定义的类. MenuBar 扩展于 Menu, 而 Menu 扩展于 Object.</p>

<p><strong>静态方法:</strong></p>
<ul>
  <li><a href="#New">New</a>: 创建新的 Menu 或 MenuBar 对象.</li>
</ul>
<p><strong>属性:</strong></p>
<ul>
  <li><a href="#ClickCount">ClickCount</a>: 检索或设置激活托盘菜单的默认项所需的单击次数.</li>
  <li><a href="#Default">Default</a>: 检索或设置默认菜单项.</li>
  <li><a href="#Handle">Handle</a>: 检索菜单的 Win32 句柄.</li>
</ul>
<p><strong>方法:</strong></p>
<ul>
  <li><a href="#Add">Add</a>: 添加或修改菜单项.</li>
  <li><a href="#Check">Check</a>: 在菜单项旁边添加一个可见的选中标记.</li>
  <li><a href="#Delete">Delete</a>: 删除一个或所有菜单项.</li>
  <li><a href="#Disable">Disable</a>: 将菜单项更改为灰色, 表示用户无法选择它.</li>
  <li><a href="#Enable">Enable</a>: 允许用户再次选择以前禁用的菜单项(灰色).</li>
  <li><a href="#Insert">Insert</a>: 在指定的项之前插入一个新项.</li>
  <li><a href="#Rename">Rename</a>: 重命名菜单项.</li>
  <li><a href="#SetColor">SetColor</a>: 改变菜单的背景颜色.</li>
  <li><a href="#SetIcon">SetIcon</a>: 设置显示在菜单项旁边的图标.</li>
  <li><a href="#Show">Show</a>: 显示菜单.</li>
  <li><a href="#ToggleCheck">ToggleCheck</a>: 切换菜单项旁边的复选标记.</li>
  <li><a href="#ToggleEnable">ToggleEnable</a>: 启用或禁用菜单项.</li>
  <li><a href="#Uncheck">Uncheck</a>: 移除菜单项上的复选标记(如果有的话).</li>
  <li><a href="#AddStandard">AddStandard</a>: 添加标准<a href="../Program.htm#tray-icon">托盘菜单项</a>.</li>
</ul>
<p><strong>常规:</strong></p>
<ul>
  <li><a href="#MenuItemName">MenuItemName</a></li>
  <li><a href="#Win32_Menus">Win32 菜单</a></li>
  <li><a href="#Remarks">备注</a></li>
  <li><a href="#Related">相关</a></li>
  <li><a href="#Examples">示例</a></li>
</ul>

<p class="note"><strong>注意:</strong> 名称 <code>MyMenu</code> 用于 Menu 类的实例, 但也可以使用任何其他有效的变量名称. 名称 <code>Menu</code> 不应该被使用, 除非引用类本身. 同样, <code>MyMenuBar</code> 和 <code>MenuBar</code> 也是如此.</p>

<div class="methodShort" id="New">
<h2>New</h2>
<p>创建新的 Menu 或 MenuBar 对象.</p>
<pre class="Syntax">
MyMenu := <span class="func">Menu.New</span>()
MyMenuBar := <span class="func">MenuBar.New</span>()
</pre>
</div>

<div class="methodShort" id="Add">
<h2>Add</h2>
<p>添加或修改菜单项.</p>
<pre class="Syntax">MyMenu.<span class="func">Add</span>(<span class="optional">MenuItemName, Callback-or-Submenu, Options</span>)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>要显示在菜单项上的文字, 或者要修改的现有项的位置&amp;. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
  <dt>Callback-or-Submenu</dt><dd><p>函数名或对<a href="Functor.htm">函数对象</a>的引用, 当选择菜单项时, 作为新<a href="../misc/Threads.htm">线程</a>调用, 或对 <strong>Menu</strong> 对象的引用, 作为子菜单使用.</p>
  <p id="CallbackParams">该函数可以选择性地定义参数, 如下所示:</p>
<pre class="Syntax"><i>FunctionName</i>(ItemName, ItemPos, Menu)</pre>
    <p>创建新项目时需要此参数, 但在更新现有项目的 <em>Options</em> 时, 此参数是可选的.</p></dd>
  <dt>Options</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
  <p>如果没有省略, <em>Options</em> 必须是由下列一个或多个选项组成的以空格或制表符分隔的列表:</p>
<table class="info">
  <tr><td>P<em>n</em></td>
  <td>用菜单项的<a href="../misc/Threads.htm">线程优先级</a>代替 <em>n</em>, 例如 <code>P1</code>. 如果在添加菜单项时省略该选项, 优先级将为 0, 这是标准的默认值. 如果在更新菜单项时省略该选项, 则该项目的优先级将不会改变. 请使用十进制(不是十六进制) 数字作为优先级.</td></tr>
  <tr><td>+Radio</td>
  <td>如果该项目被选中, 则使用个空心圆代替复选标记.</td></tr>
  <tr><td>+Right</td>
  <td>该项目在菜单栏内右对齐. 这只适用于<a href="../objects/Gui.htm#MenuBar">菜单栏</a>, 不适用于弹出式菜单或子菜单.</td></tr>
  <tr><td>+Break</td>
  <td>该项在弹出式菜单中开始一个新的列.</td></tr>
  <tr><td>+BarBreak</td>
  <td>同上, 但在列之间有一条分界线.</td></tr>
</table>
<p>加号(+) 是可选的, 可以用减号(-) 代替来删除选项, 如 <code>-Radio</code>. 选项不区分大小写.</p>
<p>要改变一个现有项目的选项而不影响它的回调或子菜单, 只需省略 <em>Callback-or-Submenu</em> 参数.</p>
  </dd>
</dl>
<h3 id="Remarks_2">备注</h3>
<p>这是一个多用途的方法, 它可以添加一个菜单项, 用新的子菜单或回调更新一个菜单项, 或者将一个菜单项从普通项转换为子菜单(反之亦然). 如果 <em>MenuItemName</em> 还不存在, 它将被添加到菜单中. 否则, 将用新指定的 <em>Callback-or-Submenu</em> 和/或 <em>Options</em> 更新 <em>MenuItemName</em>.</p>
<p>要添加菜单分隔线, 请省略所有三个参数.</p>
<p><em>Add</em> 总是在菜单底部添加新的菜单项, 但 <a href="#Insert">Insert</a> 可以用来在现有的自定义菜单项之前插入一个项目.</p>
</div>

<div class="methodShort" id="Check">
<h2>Check</h2>
<p>在 <em>MenuItemName</em> 旁边添加一个可见的复选标记(如果还没有).</p>
<pre class="Syntax">MyMenu.<span class="func">Check</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="ClickCount">
<h2>ClickCount</h2>
<p>检索或设置激活托盘菜单的默认项所需的单击次数.</p>
<pre class="Syntax">MyMenu.ClickCount := Count</pre>
<dl>
  <dt>Count</dt><dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>指定 1, 允许单次点击激活托盘菜单的默认菜单项. 指定 2 可返回默认行为(双击).</p></dd>
</dl>
<p>例如: <code>A_TrayMenu.ClickCount := 1</code></p>
</div>

<div class="methodShort" id="Delete">
<h2>Delete</h2>
<p>删除一个或所有自定义菜单项.</p>
<pre class="Syntax">MyMenu.<span class="func">Delete</span>(<span class="optional">MenuItemName</span>)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
</dl>
<p>如果省略 <em>MenuItemName</em>, 则所有项目都会从菜单中删除, 使菜单为空. 空菜单仍然存在, 因此, 任何使用它作为子菜单的其他菜单将保留这些子菜单.</p>
<p>要删除一个分隔线, 请通过它在菜单中的位置来识别它. 例如, 如果分隔符前面有两个项目, 则使用 <code>MyMenu.Delete("3&amp;")</code>.</p>
<p>如果删除了 <em>default</em> 菜单项, 其效果将类似于设置了 <code>Menu.Default := ""</code>.</p>
</div>

<div class="methodShort" id="Default">
<h2>Default</h2>
<p>检索或设置默认菜单项.</p>
<pre class="Syntax">CurrentDefault := MyMenu.Default</pre>
<dl>
  <dt>CurrentDefault</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>The name of the default menu item, or an empty string if there is no default.</p></dd>
</dl>
<pre class="Syntax">MyMenu.Default := MenuItemName</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p>
  <p>If <em>MenuItemName</em> is an empty string, there will be no default.</p></dd>
</dl>
<p>Setting the default item makes that item's font bold (setting a default item in menus other than the tray menu is currently purely cosmetic). When the user double-clicks the tray icon, its default menu item is launched (even if the item is disabled). If there is no default, double-clicking has no effect.</p>
<p>The default item for the tray menu is initially <code>&amp;Open</code>, if present. Adding <code>&amp;Open</code> to the tray menu by calling <a href="#AddStandard">AddStandard</a> or changing <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> also causes it to become the default item if there wasn't one already.</p>
<p>If the default item is deleted, the menu is left without one.</p>
</div>

<div class="methodShort" id="Disable">
<h2>Disable</h2>
<p>将 <em>MenuItemName</em> 更改为灰色, 表示用户无法选择它.</p>
<pre class="Syntax">MyMenu.<span class="func">Disable</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Enable">
<h2>Enable</h2>
<p>允许用户再次选择 <em>MenuItemName</em>, 如果它之前被禁用(灰色).</p>
<pre class="Syntax">MyMenu.<span class="func">Enable</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Insert">
<h2>Insert</h2>
<p>在指定的项之前插入一个新项.</p>
<pre class="Syntax">Menu.<span class="func">Insert</span>(<span class="optional">ItemToInsertBefore, NewItemName, Callback-or-Submenu, Options</span>)</pre>
<dl>
  <dt>ItemToInsertBefore</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>The name of an existing item or a position&amp; between 1 and <a href="#Examples">the current number of custom items</a> plus 1 (following the same rules as <a href="#MenuItemName">MenuItemName</a>). Items can also be appended by omitting <em>ItemToInsertBefore</em>.</p></dd>
  <dt>NewItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>The text to display on the menu item. Unlike <a href="#Add">Add</a>, this cannot be a position.</p></dd>
</dl>
<p>The remaining parameters behave as per the <a href="#Add">Add</a> method, except that <em>Insert</em> creates a new item even if <em>NewItemName</em> matches the name of an existing item.</p>
<p>As <a href="#AddStandard">Standard</a> menu items are not counted (<code>"1&amp;"</code> always refers to the first <em>custom</em> item), an item cannot be inserted immediately before the standard items.</p>
</div>

<div class="methodShort" id="Rename">
<h2>Rename</h2>
<p>重命名 <em>MenuItemName</em> 为 <em>NewName</em>.</p>
<pre class="Syntax">MyMenu.<span class="func">Rename</span>(MenuItemName <span class="optional">, NewName</span>)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
  <dt>NewName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>The new name. If empty or omitted, <em>MenuItemName</em> will be converted into a separator line.</p></dd>
</dl>
<p>The menu item's current callback or submenu is unchanged.</p>
<p>A separator line can be converted to a normal item by specifying the position&amp; of the separator and a non-blank <em>NewName</em>, and then using the <em>Add</em> method to give the item a callback or submenu.</p>
</div>

<div class="methodShort" id="SetColor">
<h2>SetColor</h2>
<p>改变菜单的背景颜色为 <em>ColorValue</em>.</p>
<pre class="Syntax">MyMenu.<span class="func">SetColor</span>(<span class="optional">ColorValue, Submenus := true</span>)</pre>
<dl>
  <dt>ColorValue</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a>或<a href="../Concepts.htm#numbers">整数</a></p>
    <p>One of the 16 primary <a href="../misc/Colors.htm">HTML color names</a>, a hexadecimal RGB color string (the 0x prefix is optional), or a pure numeric RGB color value. Omit <em>ColorValue</em> (or specify an empty string or the word "Default") to restore the menu to its default color. Example values: <code>"Silver"</code>, <code>"FFFFAA"</code>, <code>0xFFFFAA</code>, <code>"Default"</code>.</p></dd>
  <dt>Submenus</dt><dd>
    <p>类型: <a href="../Concepts.htm#boolean">整数(布尔值)</a></p>
    <p>1 (true) if the color should be applied to all of this menu's submenus, otherwise 0 (false). Defaults to 1 (true).</p></dd>
</dl>
</div>

<div class="methodShort" id="SetIcon">
<h2>SetIcon</h2>
<p>设置显示在 <em>MenuItemName</em> 旁边的图标.</p>
<pre class="Syntax">MyMenu.<span class="func">SetIcon</span>(MenuItemName, FileName <span class="optional">, IconNumber, IconWidth</span>)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>     <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
  <dt>FileName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>The path of an icon or image file. For a list of supported formats, 请参阅 <a href="../commands/GuiControls.htm#IconSupport">the Picture control</a>.</p>
  <p>A <a href="../misc/ImageHandles.htm">bitmap or icon handle</a> can be used instead of a filename. 例如, <code>"HICON:" handle</code>.</p>
  <p>Omit <em>FileName</em> or specify an empty string or <code>"*"</code> to remove the item's current icon.</p></dd>
  <dt>IconNumber</dt><dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>To use an icon group other than the first one in the file, specify its number for <em>IconNumber</em> (if omitted, it defaults to 1). If <em>IconNumber</em> is negative, its absolute value is assumed to be the resource ID of an icon within an executable file.</p></dd>
  <dt>IconWidth</dt><dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>The desired width of the icon. If the icon group indicated by <em>IconNumber</em> contains multiple icon sizes, the closest match is used and the icon is scaled to the specified size. See the Examples section for usage examples.</p></dd>
</dl>
<p>Currently it is necessary to specify "actual size" when setting the icon to preserve transparency. 例如:</p>
<pre>MyMenu.SetIcon "My menu item", "Filename.png",, 0</pre>
<p>A <a href="../misc/ImageHandles.htm">bitmap or icon handle</a> can be used instead of a filename. 例如, <code>"HBITMAP:" handle</code>.</p>
</div>

<div class="methodShort" id="Show">
<h2>Show</h2>
<p>显示菜单, 允许用户使用箭头按键, 菜单快捷键(下划线字母), 或鼠标来选择一个项目.</p>
<pre class="Syntax">MyMenu.<span class="func">Show</span>(<span class="optional">X, Y</span>)</pre>
<dl>
  <dt>X, Y</dt><dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>The coordinates at which to display the menu. If both X and Y are omitted, the menu is displayed at the current position of the mouse cursor. If only one of them is omitted, the mouse cursor's position will be used for it. X and Y are relative to the active window's client area by default. To override this default, use <code><a href="../commands/CoordMode.htm">CoordMode</a> "Menu", <i>Mode</i></code> or <code>A_CoordModeMenu := <i>Mode</i></code>.</p></dd>
</dl>
<p>Any popup menu can be shown, including submenus and the tray menu. However, an exception is thrown if <em>Menu</em> is a MenuBar object.</p>
</div>

<div class="methodShort" id="ToggleCheck">
<h2>ToggleCheck</h2>
<p>如果没有复选标记, 则添加; 否则, 就移除.</p>
<pre class="Syntax">MyMenu.<span class="func">ToggleCheck</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>     <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="ToggleEnable">
<h2>ToggleEnable</h2>
<p>如果之前已经启用, 则禁用 <em>MenuItemName</em>; 否则启用.</p>
<pre class="Syntax">MyMenu.<span class="func">ToggleEnable</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>     <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="Uncheck">
<h2>Uncheck</h2>
<p>移除菜单项上的复选标记(如果有的话).</p>
<pre class="Syntax">Menu.<span class="func">Uncheck</span>(MenuItemName)</pre>
<dl>
  <dt>MenuItemName</dt><dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>     <p>菜单项的名称或位置. 请参阅 <a href="#MenuItemName">MenuItemName</a>.</p></dd>
</dl>
</div>

<div class="methodShort" id="AddStandard">
<h2>AddStandard</h2>
<p>添加标准的<a href="../Program.htm#tray-icon">托盘菜单项</a>.</p>
<pre class="Syntax">MyMenu.<span class="func">AddStandard</span>()</pre>
<p>This method can be used with the tray menu or any other menu.</p>
<p>The standard items are inserted after any existing items. Any standard items already in the menu are not duplicated, but any missing items are added. The table below shows the names and positions of the standard items after calling AddStandard on an empty menu:</p>
<style>
.fake-menu {
  background-color: #f2f2f2;
  border: 1px solid #cccccc;
  color: black;
  line-height: 1.4;
}
.fake-menu td {
  padding: 0 .5em;
}
.fake-menu td {
  text-align: right;
}
.fake-menu td:first-child {
  text-align: left;
}
.fake-sep {
  border: 1px solid #d7d7d7;
  border-width: 1px 0 0;
}
</style>
<table class="fake-menu">
  <tr><td>&amp;Open</td><td>1</td><td>0</td></tr>
  <tr><td>&amp;Help</td><td>2</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>3</td><td></td></tr>
  <tr><td>&amp;Window Spy</td><td>4</td><td></td></tr>
  <tr><td>&amp;Reload This Script</td><td>5</td><td></td></tr>
  <tr><td>&amp;Edit This Script</td><td>6</td><td></td></tr>
  <tr><td><div class="fake-sep"></div></td><td>7</td><td></td></tr>
  <tr><td>&amp;Suspend Hotkeys</td><td>8</td><td>1</td></tr>
  <tr><td>&amp;Pause Script</td><td>9</td><td>2</td></tr>
  <tr><td>E&amp;xit</td><td>10</td><td>3</td></tr>
</table>
<p>Compiled scripts include only the last three by default. <code>&amp;Open</code> is included only if <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> is 1 when AddStandard is called (in that case, add 1 to the positions shown in the third column). If the tray menu contains standard items, <code>&amp;Open</code> is inserted or removed whenever <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> is changed. For other menus, <code>&amp;Open</code> has no effect if <a href="../Variables.htm#AllowMainWindow">A_AllowMainWindow</a> is 0.</p>
<p>Each standard item has an internal menu item ID corresponding to the function it performs, but can otherwise be modified or deleted like any other menu item. AddStandard detects existing items by ID, not by name. If the <a href="#Add">Add</a> method is used to change the callback function associated with a standard menu item, it is assigned a new unique ID and is no longer considered to be a standard item.</p>
<p>Adding the <code>&amp;Open</code> item to the tray menu causes it to become the default item if there wasn't one already.</p>
</div>

<div class="methodShort" id="Handle">
<h2>Handle</h2>
<p>Returns a handle to a <a href="#Win32_Menus">Win32 menu</a> (a handle of type <code>HMENU</code>), constructing it if necessary.</p>
<pre class="Syntax">MyMenu.Handle</pre>
<p>The returned handle is valid only until the Win32 menu is destroyed, which typically occurs when the Menu object is freed. Once the menu is destroyed, the operating system may reassign the handle value to any menus subsequently created by the script or any other program.</p>
</div>

<h2 id="MenuItemName">MenuItemName</h2>
<p>The name or position of a menu item. Some common rules apply to this parameter across all sub-commands which use it:</p>
<p>To underline one of the letters in a menu item's name, precede that letter with an ampersand (&amp;). When the menu is displayed, such an item can be selected by pressing the corresponding key on the keyboard. To display a literal ampersand, specify two consecutive ampersands as in this example: <code>"Save &amp;&amp; Exit"</code></p>
<p>When referring to an existing menu item, the name is not case sensitive but any ampersands must be included. 例如: <code>"&amp;Open"</code></p>
<p>The names of menu items can be up to 260 characters long.</p>
<p>To identify an existing item by its position in the menu, write the item's position followed by an ampersand. 例如, <code>"1&amp;"</code> indicates the first item.</p>

<h2 id="Win32_Menus">Win32 Menus</h2>
<p>Windows provides a <a href="https://msdn.microsoft.com/en-us/library/ms646977">set of functions and notifications</a> for creating, modifying and displaying menus with standard appearance and behavior. We refer to a menu created by one of these functions as a <em>Win32 menu</em>.</p>
<p>As items are added to a menu or modified, the name and other properties of each item are stored in the Menu object. A Win32 menu is constructed the first time the menu or its parent menu is attached to a GUI or shown. It is destroyed automatically when the menu object is deleted (which occurs when its reference count reaches zero).</p>
<p><a href="#Handle">Menu.Handle</a> returns a handle to a Win32 menu (a handle of type <code>HMENU</code>), constructing it if necessary.</p>
<p>Any modifications which are made to the menu directly by Win32 functions are not reflected by the script's Menu object, so may be lost if an item is modified by one of the built-in methods.</p>
<p>Each menu item is assigned an ID when it is first added to the menu. Scripts cannot rely on an item receiving a particular ID, but can retrieve the ID of an item by using GetMenuItemID as shown in <a href="#ExDllCall">示例 #5</a>. This ID cannot be used with the Menu object, but can be used with various <a href="https://msdn.microsoft.com/en-us/library/ms646977">Win32 functions</a>.</p>

<h2 id="Remarks">备注</h2>
<p>A menu usually looks like this:</p>
<img src="../static/ctrl_menu.png" alt="Menu" style="border: 1px solid silver;" />
<p>If a menu ever becomes completely empty -- such as by using <code>MyMenu.Delete()</code> -- it cannot be shown. If the tray menu becomes empty, right-clicking and double-clicking the tray icon will have no effect (in such cases it is usually better to use <a href="../commands/_NoTrayIcon.htm">#NoTrayIcon</a>).</p>
<p>If a menu item's callback is already running and the user selects the same menu item again, a new <a href="../misc/Threads.htm">thread</a> will be created to run that same callback, interrupting the previous thread. To instead buffer such events until later, use <a href="../commands/Critical.htm">Critical</a> as the callback's first line (however, this will also buffer/defer other threads such as the press of a hotkey).</p>
<p>Whenever a function is called via a menu item, it starts off fresh with the default values for settings such as <a href="../commands/SendMode.htm">SendMode</a>. These defaults can be changed during <a href="../Scripts.htm#auto">script startup</a>.</p>
<p>When building a menu whose contents are not always the same, one approach is to point all such menu items to the same function and have that function refer to its <a href="#CallbackParams">parameters</a> to determine what action to take. Alternatively, a <a href="Functor.htm">function object</a>, <a href="../Functions.htm#closures">closure</a> or <a href="../Variables.htm#fat-arrow">fat arrow function</a> can be used to bind one or more values or variables to the menu item's callback function.</p>

<h2 id="Related">相关</h2>
	<p><a href="Gui.htm">GUI</a>, <a href="../misc/Threads.htm">线程</a>, <a href="../commands/Thread.htm">Thread</a>, <a href="../commands/Critical.htm">Critical</a>, <a href="../commands/_NoTrayIcon.htm">#NoTrayIcon</a>, <a href="../Functions.htm">函数</a>, <a href="../commands/Return.htm">Return</a>, <a href="../commands/SetTimer.htm">SetTimer</a></p>

<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a>: This is a working script that adds a new menu item to the bottom of the tray icon menu:</p>
<pre>A_TrayMenu.Add()  <em>; Creates a separator line.</em>
A_TrayMenu.Add("Item1", "MenuHandler")  <em>; Creates a new menu item.</em>
return

MenuHandler(ItemName, ItemPos, Menu) {
    MsgBox "You selected " ItemName " (position " ItemPos ")"
}</pre>
</div>

<div class="ex" id="ExPopup">
<p><a href="#ExPopup">#2</a>: This is a working script that creates a popup menu that is displayed when the user presses the <kbd>Win</kbd>+<kbd>Z</kbd> hotkey.</p>
<pre><em>; Create the popup menu by adding some items to it.</em>
global MyMenu := Menu.New()
MyMenu.Add "Item 1", "MenuHandler"
MyMenu.Add "Item 2", "MenuHandler"
MyMenu.Add  <em>; Add a separator line.</em>

<em>; Create another menu destined to become a submenu of the above menu.</em>
Submenu1 := Menu.New()
Submenu1.Add "Item A", "MenuHandler"
Submenu1.Add "Item B", "MenuHandler"

<em>; Create a submenu in the first menu (a right-arrow indicator). When the user selects it, the second menu is displayed.</em>
MyMenu.Add "My Submenu", Submenu1

MyMenu.Add  <em>; Add a separator line below the submenu.</em>
MyMenu.Add "Item 3", "MenuHandler"  <em>; Add another menu item beneath the submenu.</em>

MenuHandler(Item, *) {
    MsgBox "You selected " Item
}

#z::MyMenu.Show  <em>; i.e. press the Win-Z hotkey to show the menu.</em></pre>
</div>

<div class="ex" id="ExTray">
<p><a href="#ExTray">#3</a>: This is a working script that demonstrates some of the various menu object members:</p>
<pre>#SingleInstance
global tray := A_TrayMenu <em>; For convenience.</em>
tray.delete <em>; Delete the standard items.</em>
tray.add <em>; separator</em>
tray.add "TestToggleCheck", "TestToggleCheck"
tray.add "TestToggleEnable", "TestToggleEnable"
tray.add "TestDefault", "TestDefault"
tray.add "TestAddStandard", "TestAddStandard"
tray.add "TestDelete", "TestDelete"
tray.add "TestDeleteAll", "TestDeleteAll"
tray.add "TestRename", "TestRename"
tray.add "Test", "Test"
return

<em>;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</em>

TestToggleCheck(*)
{
    tray.ToggleCheck "TestToggleCheck"
    tray.Enable "TestToggleEnable" <em>; Also enables the next test since it can't undo the disabling of itself.</em>
    tray.add "TestDelete", "TestDelete" <em>; Similar to above.</em>
}

TestToggleEnable(*)
{
    tray.ToggleEnable "TestToggleEnable"
}

TestDefault(*)
{
    if tray.default = "TestDefault"
        tray.default := ""
    else
        tray.default := "TestDefault"
}

TestAddStandard(*)
{
    tray.addStandard
}

TestDelete(*)
{
    tray.delete "TestDelete"
}

TestDeleteAll(*)
{
    tray.delete
    MsgBox "The script may exit now, as the tray menu no longer contains custom items."
}

TestRename(*)
{
    static OldName := "", NewName := ""
    if NewName != "renamed"
    {
        OldName := "TestRename"
        NewName := "renamed"
    }
    else
    {
        OldName := "renamed"
        NewName := "TestRename"
    }
    tray.rename OldName, NewName
}

Test(Item, *)
{
    MsgBox 'You selected "' Item '"'
}</pre>
</div>

<div class="ex" id="ExIcon">
<p><a href="#ExIcon">#4</a>: This is a working script that adds icons to its menu items:</p>
<pre>FileMenu := Menu.New()
FileMenu.Add("Script Icon", "MenuHandler")
FileMenu.Add("Suspend Icon", "MenuHandler")
FileMenu.Add("Pause Icon", "MenuHandler")
FileMenu.SetIcon("Script Icon", A_AhkPath, 2) <em>; 2nd icon group from the file</em>
FileMenu.SetIcon("Suspend Icon", A_AhkPath, -206) <em>; icon with resource ID 206</em>
FileMenu.SetIcon("Pause Icon", A_AhkPath, -207) <em>; icon with resource ID 207</em>
MyMenuBar := MenuBar.New()
MyMenuBar.Add("&amp;File", FileMenu)
MyGui := Gui.New()
MyGui.MenuBar := MyMenuBar
MyGui.Add("Button",, "Exit This Example").OnEvent("Click", (*) =&gt; WinClose())
MyGui.Show

MenuHandler(*) {
    <em>; For this example, the menu items don't do anything.</em>
}</pre>
</div>

<div class="ex" id="ExDllCall">
<p><a href="#ExDllCall">#5</a>: Retrieving item count and ID.</p>
<pre>
MyMenu := Menu.New()
MyMenu.Add "Item 1", "no"
MyMenu.Add "Item 2", "no"
MyMenu.Add "Item B", "no"

<em>; Retrieve the number of items in a menu.</em>
item_count := DllCall("GetMenuItemCount", "ptr", MyMenu.Handle)

<em>; Retrieve the ID of the last item.</em>
last_id := DllCall("GetMenuItemID", "ptr", MyMenu.Handle, "int", item_count-1)

MsgBox "MyMenu has " item_count " items, and its last item has ID " last_id

no(*) {
    <em>; Do nothing.</em>
}
</pre>
</div>

</body>
</html>