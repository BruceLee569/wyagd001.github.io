<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Object - 方法 &amp; 属性 | AutoHotkey v2</title>
<meta name="description" content="Object is the basic class from which other AutoHotkey object classes derive." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>Object</h1>

<p><strong>Object(对象)</strong> 是派生其他 AutoHotkey 对象类的基本类. 每个 Object 实例包含以下内容:</p>
<ul>
  <li>自己的属性: 属于这个特定对象的一组属性.</li>
  <li>自己的方法: 属于这个特定对象的一组方法.</li>
  <li>基对象, 从其继承属性和方法.</li>
</ul>
<p>属性分为值属性和动态属性. 值属性只包含一个值. 动态属性不包含值, 而是在访问时调用 <em>getter</em> 或 <em>setter</em> 函数. 派生对象可以覆盖 <em>getter</em> 或 <em>setter</em>(最简单的方法是在类中定义它们).</p>
<p>下面的文档使用 <code>Obj</code> 作为 Object 的任何实例的占位符.</p>
<p>所有 Object 的实例都基于 <code>Object.Prototype</code>, 而其又基于 <a href="Any.htm">Any 原型</a>. 除了从 Any 继承的方法和属性外, Object 还具有以下预定义的方法和属性:</p>
<p><strong>方法:</strong></p>
<ul>
	<li><a href="#Clone">Clone</a></li>
  <li><a href="#DefineMethod">DefineMethod</a></li>
  <li><a href="#DefineProp">DefineProp</a></li>
  <li><a href="#DeleteMethod">DeleteMethod</a></li>
  <li><a href="#DeleteProp">DeleteProp</a></li>
  <li><a href="#GetOwnPropDesc">GetOwnPropDesc</a></li>
  <li><a href="#HasOwnMethod">HasOwnMethod</a></li>
  <li><a href="#HasOwnProp">HasOwnProp</a></li>
  <li><a href="#OwnMethods">OwnMethods</a></li>
  <li><a href="#OwnProps">OwnProps</a></li>
</ul>
<p><strong>属性:</strong></p>
<ul>
	<li><a href="#Base">Base</a></li>
</ul>
<p><strong>函数:</strong></p>
<ul>
	<li><a href="#SetBase">ObjSetBase</a>: 设置对象的<a href="../Objects.htm#delegation">基对象</a>.</li>
  <li><a href="#GetCapacity">ObjGetCapacity</a>, <a href="#SetCapacity">ObjSetCapacity</a>: 检索或设置对象所包含属性的容量.</li>
  <li><a href="#OwnPropCount">ObjOwnPropCount</a>: 检索对象包含的自有属性的数量.</li>
	<li>不推荐: <a href="#RawGet">ObjRawGet</a>, <a href="#RawSet">ObjRawSet</a>: 检索或设置对象的自有的值属性, 绕过任何元函数, 并可能覆盖属性访问函数.</li>
  <li>ObjClone, ObjDeleteProp, ObjHasOwnProp, ObjHasProp, ObjOwnMethods, ObjOwnProps: 等同于相应的预定义方法, 但不能被覆盖.</li>
</ul>

<h2>方法</h2>

<div class="methodShort" id="Clone"><h2>Clone</h2>
<p>返回对象的一个浅拷贝.</p>
<pre class="Syntax">Clone := Obj.<span class="func">Clone</span>()</pre>
<p>对象拥有的每个属性或方法都被复制到副本中. 对象 <em>引用</em> 被复制(就像普通的赋值一样), 而不是对象本身; 换句话说, 如果属性包含对对象的引用, 则副本将包含对同一对象的引用.</p>
<p>动态属性被复制, 而不是调用.</p>
<p>副本具有与原始对象相同的基对象.</p>
</div>

<div class="methodShort" id="DefineMethod"><h2>DefineMethod</h2>
<p>定义一个新的方法.</p>
<pre class="Syntax">Obj.<span class="func">DefineMethod</span>(Name, MethodFunc)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>方法的名称.</p>
  </dd>
  <dt>MethodFunc</dt>
  <dd>
    <p>类型: <a href="Functor.htm">函数对象</a></p>
    <p>方法的实现. 函数必须接受至少一个参数, 该参数接收对方法调用的目标对象的引用. 当方法由类定义创建时, 将自动使用名称 <code>this</code> 定义此参数.</p>
  </dd>
</dl>
<p>新方法归 <em>Obj</em> 所有, 但是任何以 <em>Obj</em> 为基的对象都可以继承. 如果 <em>Obj</em> 是一个类, 则新方法仅适用于类本身和子类(即它是静态的). 要为类的所有实例定义一个方法, 让 <em>Obj</em> 为类的 <code>Prototype</code>.</p>
</div>

<div class="methodShort" id="DefineProp"><h2>DefineProp</h2>
<p>定义一个新的动态属性.</p>
<pre class="Syntax">Obj.<span class="func">DefineProp</span>(Name, Desc)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>属性的名称.</p>
  </dd>
  <dt>Desc</dt>
  <dd>
    <p>类型: 对象</p>
    <p>具有以下零个或多个自有属性的对象:</p>
    <p><code>Get</code>: 获取属性值时调用的<a href="Functor.htm">函数对象</a>.</p>
    <p><code>Set</code>: 属性被赋值时调用的<a href="Functor.htm">函数对象</a>. 第二个参数是要分配的值.</p>
  </dd>
</dl>
<p>如果 <em>Get</em> 或 <em>Set</em> 未定义, 则可以从基对象继承. 如果 <em>Get</em> 未定义, 则该属性可以返回从基继承的值. 如果 <em>Set</em> 在此对象和所有基对象中均未定义, 则该属性为只读(尝试设置该属性会抛出异常).</p>
<p>与方法一样, <em>Get</em> 或 <em>Set</em> 的第一个参数是 <code>this</code>(目标对象). 对于 <em>Set</em>, 第二个参数是 <code>value</code>(要被赋予的值). 这些参数由类中的方法和属性定义自动定义, 但是如果使用常规函数, 则必须显式定义.</p>
<p>计算函数对象的 <code>MaxParams</code> 和 <code>IsVariadic</code> 属性, 以确定该属性是否可以接受参数. 如果 <em>get</em> 的 <code>MaxParams</code> 为 1, 或 <em>set</em> 的 <code>MaxParams</code> 为 2, 并且 <code>IsVariadic</code> 为 false 或未定义, 则属性不能接受参数; 它们被转发到由 <em>get</em> 返回的对象的 <a href="../Objects.htm#__Item">__Item</a> 属性.</p>
</div>

<div class="methodShort" id="DeleteMethod"><h2>DeleteMethod</h2>
<p>删除对象拥有的方法.</p>
<pre class="Syntax">Obj.<span class="func">DeleteMethod</span>(Name)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>方法名. 如果对象不拥有此名称的方法, 则抛出异常.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="DeleteProp"><h2>DeleteProp</h2>
<p>删除对象拥有的属性.</p>
<pre class="Syntax">Obj.<span class="func">DeleteProp</span>(Name)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>属性名.</p>
  </dd>
  <dt>返回值</dt>
  <dd><p>删除属性的值(如果没有则为空).</p></dd>
</dl>
</div>

<div class="methodShort" id="GetOwnPropDesc"><h2>GetOwnPropDesc</h2>
<p>Returns a descriptor for a given property, compatible with <a href="#DefineProp">DefineProp</a>.</p>
<pre class="Syntax">Obj.<span class="func">GetOwnPropDesc</span>(Name)</pre>
<dl>
  <dt>Name</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>属性名.</p>
  </dd>
  <dt>返回值</dt>
  <dd>
    <p>类型: Object</p>
    <p>A new object with zero or more of the following own properties:</p>
    <p><code>Get</code>: The <a href="Functor.htm">function object</a> which is called when the property's value is retrieved, if defined in <em>Obj</em>.</p>
    <p><code>Set</code>: The <a href="Functor.htm">function object</a> which is called when the property is assigned a value, if defined in <em>Obj</em>.</p>
    <p>If the property is a value property, the return value is an empty string.</p>
  </dd>
</dl>
<p>Modifying the returned object has no effect on <em>Obj</em> unless <a href="#DefineProp">DefineProp</a> is called.</p>
</div>

<div class="methodShort" id="HasOwnMethod"><h2>HasOwnMethod</h2>
<pre class="Syntax">Obj.<span class="func">HasOwnMethod</span>(Name)</pre>
<p>如果对象拥有该名称的方法, 则返回 true, 否则返回 false.</p>
</div>

<div class="methodShort" id="HasOwnProp"><h2>HasOwnProp</h2>
<pre class="Syntax">Obj.<span class="func">HasOwnProp</span>(Name)</pre>
<p>如果对象拥有该名称的属性, 则返回 true, 否则返回 false.</p>
</div>

<div class="methodShort" id="OwnMethods"><h2>OwnMethods</h2>
<p>枚举对象拥有的方法.</p>
<pre class="Syntax">For Name <span class="optional">, MethodFunc</span> in Obj.<span class="func">OwnMethods</span>()</pre>
<p>返回一个新的<a href="Enumerator.htm">枚举器</a>. 该枚举器通常直接传递给 <a href="../commands/For.htm">for-loop</a>, 循环的每次迭代都调用一次枚举器. 每次对枚举器的调用都会返回下一个方法名和/或其实现函数. for-loop 的变量对应于枚举器的参数, 它们是:</p>
<dl>
  <dt>Name</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>方法名.</p>
  </dd>
  <dt>MethodFunc</dt>
  <dd>
    <p>类型: <a href="Functor.htm">函数对象</a></p>
    <p>方法的实现. 这可以是由类定义创建的 <a href="Func.htm">Func</a>, 也可以是先前传递给 <a href="#DefineMethod">DefineMethod</a> 的对象.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="OwnProps"><h2>OwnProps</h2>
<p>枚举对象自有的属性.</p>
<pre class="Syntax">For Name <span class="optional">, Value</span> in Obj.<span class="func">OwnProps</span>()</pre>
<p>返回一个新的<a href="Enumerator.htm">枚举器</a>. 该枚举器通常直接传递给 <a href="../commands/For.htm">for-loop</a>, 循环的每次迭代都调用一次枚举器. 每次对枚举器的调用都会返回下一个属性名和/或其值. for-loop 的变量对应于枚举器的参数, 它们是:</p>
<dl>
  <dt>Name</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>属性名.</p>
  </dd>
  <dt>Value</dt>
  <dd>
    <p>属性的值.</p>
    <p>如果该属性具有 getter 方法, 则将调用该方法以获得该值(除非省略 <em>Value</em>).</p>
  </dd>
</dl>
</div>

<h2>属性</h2>

<div class="methodShort" id="Base"><h2>Base</h2>
<p>检索或设置对象的<a href="../Objects.htm#delegation">基对象</a>.</p>
<pre class="Syntax">BaseObj := Obj.Base</pre>
<pre class="Syntax">Obj.Base := BaseObj</pre>
<p><em>BaseObj</em> 必须是一个对象.</p>
<p>If assigning the new base would change the native type of the object, an exception is thrown. An object's native type is decided by the nearest prototype object belonging to a built-in class, such as <code>Object.Prototype</code> or <code>Array.Prototype</code>. For example, an instance of Array must always derive from <code>Array.Prototype</code>, either directly or indirectly.</p>
<p>Properties and methods are inherited from the base object dynamically, so changing an object's base also changes which inherited properties and methods are available.</p>
<p>This property is inherited from <a href="Any.htm">Any</a>; however, it can be set only for instances of Object.</p>
<p>另请参阅: <a href="Any.htm#GetBase">ObjGetBase</a>, <a href="#SetBase">ObjSetBase</a></p>
</div>

<h2>函数</h2>

<div class="methodShort" id="RawGet"><h2>ObjRawGet</h2>
<p>Retrieves the value of an object's own property.</p>
<p class="warning"><strong>不推荐:</strong> This function may be removed or replaced in a future release.</p>
<pre class="Syntax">Value := <span class="func">ObjRawGet</span>(Obj, Name)</pre>
<p>If the object does not own a property by this name or it is a dynamic property, the return value is an empty string. No <a href="../Objects.htm#Meta_Functions">meta-functions</a> or <a href="../Objects.htm#Custom_Classes_property">property functions</a> are called. Inherited properties are not considered.</p>
<p>如果 <em>Obj</em> 的类型不正确, 则抛出异常.</p>
</div>

<div class="methodShort" id="RawSet"><h2>ObjRawSet</h2>
<p>Creates a new value property or sets the value of an existing one.</p>
<p class="warning"><strong>不推荐:</strong> This function may be removed or replaced in a future release.</p>
<pre class="Syntax"><span class="func">ObjRawSet</span> Obj, Name, Value</pre>
<p>This function is provided to allow scripts to bypass the __Set <a href="../Objects.htm#Meta_Functions">meta-function</a> and <a href="../Objects.htm#Custom_Classes_property">properties</a>. If that isn't required, a normal assignment should be used instead. For example: <code>Obj.%Name% := Value</code></p>
<p>Since the purpose is to bypass meta-functions, this is a function only, not a method. Calling a built-in method generally causes the __Call meta-function to be called.</p>
<p>如果 <em>Obj</em> 的类型不正确, 则抛出异常.</p>
</div>

<div class="methodShort" id="SetBase"><h2>ObjSetBase</h2>
<p>Sets the object's <a href="../Objects.htm#delegation">base object</a>.</p>
<pre class="Syntax"><span class="func">ObjSetBase</span>(Obj, BaseObj)</pre>
<p>No <a href="../Objects.htm#Meta_Functions">meta-functions</a> or <a href="../Objects.htm#Custom_Classes_property">property functions</a> are called. Overriding the <a href="#Base">Base</a> property does not affect the behaviour of this function.</p>
<p>如果 <em>Obj</em> 或 <em>BaseObj</em> 的类型不正确, 则抛出异常.</p>
<p>另请参阅: <a href="Any.htm#GetBase">ObjGetBase</a>, <a href="#Base">Base 属性</a></p>
</div>

<div class="methodShort" id="OwnPropCount"><h2>ObjOwnPropCount</h2>
<p>返回对象拥有的属性的数量.</p>
<pre class="Syntax">Count := <span class="func">ObjOwnPropCount</span>(Obj)</pre>
</div>

<div class="methodShort" id="SetCapacity"><h2>ObjSetCapacity</h2>
<p>设置对象内部自有属性的当前容量.</p>
<pre class="Syntax"><span class="func">ObjSetCapacity</span>(Obj, MaxProps)</pre>
<dl>
	<dt>MaxProps</dt>
	<dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>新的容量. 如果小于自有属性的当前数量, 则使用该数量, 并释放所有未使用的空间.</p>
  </dd>
	<dt>返回值</dt>
	<dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>新容量.</p>
  </dd>
</dl>
<p>如果 <em>Obj</em> 的类型不正确, 则抛出异常.</p>
</div>

<div class="methodShort" id="GetCapacity"><h2>ObjGetCapacity</h2>
<pre class="Syntax">MaxItems := <span class="func">ObjGetCapacity</span>(Obj)</pre>
<dl>
	<dt>返回值</dt>
	<dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>对象内部属性的当前容量.</p>
  </dd>
</dl>
<p>如果 <em>Obj</em> 的类型不正确, 则抛出异常.</p>
</div>

</body>
</html>