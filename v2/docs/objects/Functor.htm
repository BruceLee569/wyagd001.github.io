<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>函数对象 - 定义 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="Function objects are either references to Func objects representing actual functions, or objects which can be called like functions." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>函数对象</h1>

<p>"函数对象" 通常表示以下任何一项:</p>
<ul>
  <li><a href="Func.htm">Func</a> 或 <a href="../Functions.htm#closures">Closure</a> 对象, 它表示一个实际的<a href="../Functions.htm">函数</a>; 可以是内置函数也可以是脚本定义的函数.</li>
  <li>用户定义的对象, 可以像函数一样调用. 亦称为"函数子".</li>
  <li>任何其他可以像函数一样调用的对象, 如<a href="#BoundFunc">绑定函数对象</a>或 COM 方法返回的 JavaScript 函数对象.</li>
</ul>
<p>函数对象可用于以下情况:</p>
<ul>
  <li><a href="GuiOnEvent.htm">Gui 事件</a></li>
  <li><a href="../commands/Hotkey.htm">Hotkey</a></li>
  <li><a href="Menu.htm#Add">Menu.Add</a></li>
  <li><a href="../commands/OnClipboardChange.htm">OnClipboardChange</a></li>
  <li><a href="../commands/OnExit.htm">OnExit</a></li>
  <li><a href="../commands/OnMessage.htm">OnMessage</a></li>
  <li><a href="../commands/SetTimer.htm">SetTimer</a></li>
</ul>

<h2 id="User-Defined">User-Defined</h2>
<!-- TODO: Explain how a user-defined object could be useful -->
<p>User-defined function objects must define a <em>Call</em> method containing the implementation of the "function".</p>
<pre>class YourClassName {
    Call(a, b) {  <em>; Declare parameters as needed, or an <a href="../Functions.htm#Variadic">array*</a>.</em>
        <em>;...</em>
        return c
    }
    <em>;...</em>
}
</pre>
<h3 id="User-Defined-Examples">示例</h3>
<p>The following example defines a function array which can be called; when called, it calls each element of the array in turn.</p>
<pre>class FuncArrayType extends Array {
    Call(params*) {
        <em>; Call a list of functions.</em>
        Loop this.Length
            %this[A_Index]%(params*)
    }
}

<em>; Create an array of functions.</em>
funcArray := FuncArrayType.new()
<em>; Add some functions to the array (can be done at any point).</em>
funcArray.Push(Func("One"))
funcArray.Push(Func("Two"))
<em>; Create an object which uses the array as a method.</em>
obj := {}
obj.DefineMethod("method", funcArray)
<em>; Call the method.</em>
%obj.method%("foo", "bar")

One(param1, param2) {
    ListVars
    MsgBox
}
Two(param1, param2) {
    ListVars
    MsgBox
}</pre>

<h2 id="BoundFunc">绑定函数对象</h2>
<p>行为像函数, 但只是将预定义的参数传递给另一个函数.</p>
<p>有两种建立绑定函数对象的方式:</p>
<ul>
  <li>通过调用 <a href="Func.htm#Bind">Func.Bind</a> 方法, 其绑定参数值至一个函数.</li>
  <li>通过调用 <a href="../commands/ObjBindMethod.htm">ObjBindMethod</a> 函数, 其绑定参数值和方法名至目标对象.</li>
</ul>
<p>可以调用绑定函数对象, 如下例所示. 当绑定函数对象被调用时, 它调用绑定的函数或方法, 传递绑定的参数和后面跟着的调用者传递的任何参数. 未绑定的参数位置是从调用者的参数列表中指定的位置(从左到右). 例如:</p>
<pre>fn := Func("RealFn").Bind(1)  <em>; Bind first parameter only</em>
%fn%(2)    <em>; 显示 "1, 2"</em>
fn.Call(3) <em>; 显示 "1, 3"</em>

fn := Func("RealFn").Bind( , 1)  <em>; Bind second parameter only</em>
%fn%(2)    <em>; 显示 "2, 1"</em>
fn.Call(3) <em>; 显示 "3, 1"</em>
%fn%(, 4)  <em>; Error: 'a' was omitted</em>

RealFn(a, b, c:="c") {
    MsgBox a ", " b
}</pre>
<p><a href="../commands/ObjBindMethod.htm">ObjBindMethod</a> can be used to bind to a method even when it isn't possible to retrieve a reference to the method itself. 例如:</p>
<pre>file := FileOpen(A_ScriptFullPath, "r")
getLine := ObjBindMethod(file, "ReadLine")
MsgBox %getLine%()  <em>; 显示此文件的第一行.</em></pre>
<p>更多复杂的例子, 请参阅 <a href="../commands/SetTimer.htm#ExampleClass">SetTimer</a>.</p>
<p>Other properties and methods are inherited from <a href="Func.htm">Func</a>, but do not reflect the properties of the target function or method (which is not required to be implemented as a function). The BoundFunc acts as an anonymous variadic function with no other formal parameters, similar to the <a href="../Variables.htm#fat-arrow">fat arrow function</a> below:</p>
<pre>Func_Bind(func, bound_args*) {
    return (args*) => (args.InsertAt(1, bound_args*), %func%(args*))
}</pre>

</body>
</html>