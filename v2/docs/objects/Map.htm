<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Map 对象 - 方法 &amp; 属性 | AutoHotkey v2</title>
<meta name="description" content="A Map object associates or maps one set of values, called keys, to another set of values." />
<meta name="ahk:equiv-v1" content="objects/Object.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>Map 对象</h1>

<p><strong>Map(映射)</strong> 对象将一组称为 <em>键</em> 的值关联或 <em>映射</em> 到另一组值. 键及其映射到的值称为键-值对. 映射可以包含任意数量的键值对, 但是每个键必须是惟一的.</p>
<p>键可以是任何<a href="../Concepts.htm#numbers">整数</a>, <a href="../Objects.htm">对象</a> 引用以 null 结尾的<a href="../Concepts.htm#strings">字符串</a>. Comparison of string keys is case-sensitive, while objects are compared by reference/address. <a href="../Concepts.htm#numbers">Float</a> keys are automatically converted to String.</p>
<p>映射的最简单用法是通过隐式的 <a href="#__Item">__Item</a> 属性检索或设置键-值对, 只需在映射对象后面的方括号中写入键. 例如:</p>
<pre>clrs := Map()
clrs["Red"] := "ff0000"
clrs["Green"] := "00ff00"
clrs["Blue"] := "0000ff"
for clr in Array("Blue", "Green")
    MsgBox clrs[clr]
</pre>
<p>下面的文档使用 <code>aMap</code> 作为任何映射对象的占位符. 注意, "map" 不应该用作变量名, 因为它是用来引用 Map 类本身.</p>
<p>Map 对象基于 <code>Map.Prototype</code>, 其又基于 <code>Object.Prototype</code>. 除了继承自 <a href="Object.htm">Object</a> 的方法和属性外, 映射对象还具有以下预定义的方法和属性:</p>

<p><strong>方法:</strong></p>
<ul>
  <li><a href="#Clear">Clear</a></li>
  <li><a href="#Clone">Clone</a></li>
  <li><a href="#Delete">Delete</a></li>
	<li><a href="#Has">Has</a></li>
  <li><a href="#__Enum">__Enum</a></li>
</ul>
<p><strong>属性:</strong></p>
<ul>
  <li><a href="#Count">Count</a></li>
	<li><a href="#Capacity">Capacity</a></li>
  <li><a href="#__Item">__Item</a></li>
</ul>

<h2>方法</h2>

<div class="methodShort" id="Clear"><h2>Clear</h2>
<p>Removes all key-value pairs from the map.</p>
<pre class="Syntax">aMap.<span class="func">Clear</span>()</pre>
</div>

<div class="methodShort" id="Clone"><h2>Clone</h2>
<p>Returns a shallow copy of the object.</p>
<pre class="Syntax">Clone := aMap.<span class="func">Clone</span>()</pre>
<p>All key-value pairs are copied to the new map. Object <em>references</em> are copied (like with a normal assignment), not the objects themselves.</p>
<p>Own properties, own methods and base are copied as per <a href="Object.htm#Clone">Obj.Clone</a>.</p>
</div>

<div class="methodShort" id="Delete"><h2>Delete</h2>
<p>Removes a key-value pair from the map.</p>
<pre class="Syntax">aMap.<span class="func">Delete</span>(Key)</pre>
<dl>
  <dt>Key</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a>, <a href="../Objects.htm">object</a>或<a href="../Concepts.htm#strings">字符串</a></p>
    <p>Any single key. If the map does not contain this key, an exception is thrown.</p>
  </dd>
  <dt>Return Value</dt>
  <dd><p>The removed value.</p></dd>
</dl>
</div>

<div class="methodShort" id="Has"><h2>Has</h2>
<p>Returns true if <i>Key</i> has an associated value within the map, otherwise false.</p>
<pre class="Syntax">aMap.<span class="func">Has</span>(Key)</pre>
</div>

<div class="methodShort" id="__Enum"><h2>__Enum</h2>
<p>Enumerates key-value pairs.</p>
<pre class="Syntax">For Key <span class="optional">, Value</span> in aMap</pre>
<p>Returns a new <a href="Enumerator.htm">enumerator</a>. This method is typically not called directly. Instead, the map object is passed directly to a <a href="../commands/For.htm">for-loop</a>, which calls __Enum once and then calls the enumerator once for each iteration of the loop. Each call to the enumerator returns the next key and/or value. The for-loop's variables correspond to the enumerator's parameters, which are:</p>
<dl>
  <dt>Key</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a>, <a href="../Objects.htm">object</a>或<a href="../Concepts.htm#strings">字符串</a></p>
    <p>The key.</p>
  </dd>
  <dt>Value</dt>
  <dd>
    <p>The value.</p>
  </dd>
</dl>
</div>

<h2>Properties</h2>

<div class="methodShort" id="Count"><h2>Count</h2>
<p>Retrieves the number of key-value pairs present in the map.</p>
<pre class="Syntax">Count := aMap.<span class="func">Count</span></pre>
</div>

<div class="methodShort" id="Capacity"><h2>Capacity</h2>
<p>Retrieves or sets the current capacity of the map.</p>
<pre class="Syntax">aMap.<span class="func">Capacity</span> := MaxItems</pre>
<pre class="Syntax">MaxItems := aMap.<span class="func">Capacity</span></pre>
<dl>
	<dt>MaxItems</dt>
	<dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>The maximum number of key-value pairs the map should be able to contain before it must be automatically expanded.  If setting a value less than the current number of key-value pairs, that number is used instead, and any unused space is freed.</p>
  </dd>
</dl>
</div>

<div class="methodShort" id="__Item"><h2>__Item</h2>
<p>Retrieves or updates the value of a key-value pair.</p>
<pre class="Syntax">Value := aMap[Key]</pre>
<pre class="Syntax">aMap[Key] := Value</pre>
<dl>
  <dt>Key</dt>
  <dd>
    <p>Type: <a href="../Concepts.htm#numbers">Integer</a>, <a href="../Objects.htm">object</a>或<a href="../Concepts.htm#strings">字符串</a></p>
    <p>When retrieving a value, <em>Key</em> must be a unique value previously associated with another value. An exception is thrown if <em>Key</em> has no associated value within the map.</p>
    <p>When assigning a value, <em>Key</em> can be any value to associate with <em>Value</em>; in other words, the <em>key</em> used to later access <em>Value</em>. <a href="../Concepts.htm#numbers">Float</a> keys are automatically converted to String.</p>
  </dd>
</dl>
<p></p>
<p>The property name __Item is typically omitted, as shown above, but is used when overriding the property.</p>
</div>

</body>
</html>