<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>热字串 - 定义 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="Learn details about hotstrings in general, ending characters, options, long replacements, context-sensitive hotstrings, function hotstrings, etc." />
<meta name="keywords" content="auto-replace,autotext,autocorrect,auto text,auto correct,abbreviation expansion,abbreviation,abbreviations,autoreplace,auto replace,text,expander,free,type,typing,word,words">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>热字串</h1>

<h2 id="toc">目录</h2>
<ul>
  <li><a href="#intro">介绍和简单示例</a></li>
  <li><a href="#EndChars">终止符</a></li>
  <li><a href="#Options">选项</a></li>
  <li><a href="#continuation">长替换</a></li>
  <li><a href="#variant">上下文相关的热字串</a></li>
  <li><a href="#AutoCorrect">自动更正</a></li>
  <li><a href="#remarks">备注</a></li>
  <li><a href="#Function">函数热字串</a></li>
  <li><a href="#Helper">热字串助手</a></li>
</ul>

<h2 id="intro">介绍和简单示例</h2>
<p>尽管热字串主要用于在您输入缩写时进行扩展(自动替换), 但是它们也可以用来启动任何脚本动作. 从这个角度看, 它们类似于<a href="Hotkeys.htm">热键</a>, 除了它们通常由多个字符组成(即字符串).</p>
<p>要定义热字串, 请用两个双冒号包围用来触发的缩写, 例如:</p>
<pre>::btw::by the way</pre>
<p>在上面的例子中, 每当您输入 btw 时, 缩写 btw  会被自动替换为 &quot;by the way&quot;(不过, 默认情况下, 您必须在输入 btw 后输入<a href="#EndChars">终止符</a>, 如 <kbd>Space</kbd>, <kbd>.</kbd> 或 <kbd>Enter</kbd>).</p>
<p id="auto">上面的 &quot;by the way&quot; 示例被称为自动替换热字串, 因为输入的文本被自动删除并替换为第二个双冒号后指定的字符串. 与之相比, 热字串还可以定义用来执行任何自定义动作, 如下例所示. 注意函数必须出现在热字串的 <u>下面</u>:</p>
<pre>::btw::
MsgBox 'You typed &quot;btw&quot;.'
return

:*:]d::  <em>; 此热串通过下面的函数用当前日期和时间替换 &quot;]d&quot;.</em>
SendInput <a href="commands/FormatTime.htm">FormatTime</a>(, "M/d/yyyy h:mm tt")  <em>;  看起来会像 9/1/2005 3:53 PM 这样</em>
return</pre>
<p>尽管上面的两个例子不是自动替换热字串, 但默认情况下您输入的缩写也会被删除. 这是通过自动退格来实现的, 此特性可以通过 <a href="#b0">b0 选项</a>来禁用.</p>

<h2 id="EndChars">终止符</h2>
<p>除非使用了<a href="#Asterisk">星号选项</a>, 否则您必须在热字串的缩写后输入一个 <em>终止符</em> 才能触发它. 终止符最初由以下字符组成: <strong>-()[]{}':;&quot;/\,.?!`n `t</strong>(注意 `n 是 <kbd>Enter</kbd>, `t 是 <kbd>Tab</kbd>, 且在它们之间还有一个普通的空格). 这个字符集可以通过编辑下列的示例进行更改, 该示例为 <u>所有</u> 热字串设置新的终止符, 而不仅是在它下面的那些:</p>
<pre>#Hotstring EndChars -()[]{}:;'&quot;/\,.?!`n `t</pre>
<p>终止符也可以在脚本运行时通过调用 <a href="commands/Hotstring.htm">Hotstring</a> 函数来进行更改, 如下例所示:</p>
<pre>Hotstring("EndChars", "-()[]{}:;")</pre>

<h2 id="Options">选项</h2>
<p>热字串的默认行为可以使用下面的两种方式来改变:</p>
<ol>
  <li><a href="commands/_Hotstring.htm">#Hotstring</a> 指令, 它会影响脚本中在它后面的所有热字串. 下列示例会让 C 和 R 选项生效: <code>#Hotstring <strong>c r</strong></code>.</li>
  <li>把选项放在热字串的第一个双冒号之间. 下列示例会让 C 和 * 选项(区分大小写且&quot;不需要终止符&quot;) 对当前热字串生效:
  <code>:<strong>c*</strong>:j@::john@somedomain.com</code>.</li>
</ol>
<p>下面列表对每个选项进行说明. 当使用上面的方法指定多个选项时, 可以在选项间包含空格.</p>
<p id="Asterisk"><strong>*</strong> (asterisk): An ending character (e.g. <kbd>Space</kbd>, <kbd>.</kbd>, or <kbd>Enter</kbd>) is not required to trigger the hotstring. 例如:</p>
<pre>:*:j@::jsmith@somedomain.com</pre>
<p>The example above would send its replacement the moment you type the @ character. When using the <a href="commands/_Hotstring.htm">#Hotstring directive</a>, use <strong>*0</strong> to turn this option back off.</p>
<p id="Question"><strong>?</strong> (question mark): The hotstring will be triggered even when it is inside another word; that is, when the character typed immediately before it is alphanumeric. 例如, if <code>:?:al::airline</code> is a hotstring, typing &quot;practical &quot; would produce &quot;practicairline &quot;. Use <strong>?0</strong> to turn this option back off.</p>
<p id="b0"><strong>B0</strong> (B followed by a zero): Automatic backspacing is <u>not</u> done to erase the abbreviation you type. Use a plain <strong>B</strong> to turn backspacing back on after it was previously turned off. A script may also do its own backspacing via {bs 5}, which sends 5 <kbd>Backspace</kbd> keystrokes. Similarly, it may send <kbd>&larr;</kbd> keystrokes via {left 5}. 例如, the following hotstring produces &quot;&lt;em&gt;&lt;/em&gt;&quot; and moves the caret 5 places to the left (so that it's between the tags):</p>
<pre>:*b0:&lt;em&gt;::&lt;/em&gt;{left 5}</pre>
<p id="C"><strong>C</strong>: Case sensitive: When you type an abbreviation, it must exactly match the case defined in the script. Use <strong>C0</strong> to turn case sensitivity back off.</p>
<p id="C1"><strong>C1</strong>: Do not conform to typed case. Use this option to make <a href="#auto">auto-replace hotstrings</a> case insensitive and prevent them from conforming to the case of the characters you actually type. Case-conforming hotstrings (which are the default) produce their replacement text in all caps if you type the abbreviation in all caps. If you type the first letter in caps, the first letter of the replacement will also be capitalized (if it is a letter). If you type the case in any other way, the replacement is sent exactly as defined. When using the <a href="commands/_Hotstring.htm">#Hotstring directive</a>, <strong>C0</strong> can be used to turn this option back off, which makes hotstrings conform again.</p>
<p id="Kn"><strong>Kn</strong>: Key-delay: This rarely-used option sets the delay between keystrokes produced by auto-backspacing or <a href="#auto">auto-replacement</a>. Specify the new delay for <strong>n</strong>; 例如, specify k10 to have a 10ms delay and k-1 to have no delay. The exact behavior of this option depends on which <a href="#SendMode">sending mode</a> is in effect:</p>
<ul>
  <li>SI (SendInput): Key-delay is ignored because a delay is not possible in this mode. The exception to this is when SendInput is <a href="commands/Send.htm#SendInputUnavail">unavailable</a>, in which case hotstrings revert to SendPlay mode below (which does obey key-delay).</li>
  <li>SP (SendPlay): A delay of length zero is the default, which for SendPlay is the same as -1 (no delay). In this mode, the delay is actually a <a href="commands/SetKeyDelay.htm#dur">PressDuration</a> rather than a delay between keystrokes.</li>
  <li>SE (SendEvent): A delay of length zero is the default. Zero is recommended for most purposes since it is fast but still cooperates well with other processes (due to internally doing a <a href="commands/Sleep.htm">Sleep 0</a>). Specify k-1 to have no delay at all, which is useful to make auto-replacements faster if your CPU is frequently under heavy load. When set to -1, a script's process-priority becomes an important factor in how fast it can send keystrokes. To raise a script's priority, use <code><a href="commands/ProcessSetPriority.htm">ProcessSetPriority</a> "High"</code>.</li>
</ul>
<p id="O"><strong>O</strong>: Omit the ending character of <a href="#auto">auto-replace hotstrings</a> when the replacement is produced. This is useful when you want a hotstring to be kept unambiguous by still requiring an ending character, but don't actually want the ending character to be shown on the screen. 例如, if <code>:o:ar::aristocrat</code> is a hotstring, typing &quot;ar&quot; followed by the spacebar will produce &quot;aristocrat&quot; with no trailing space, which allows you to make the word plural or possessive without having to press <kbd>Backspace</kbd>. Use <strong>O0</strong> (the letter O followed by a zero) to turn this option back off.</p>
<p id="Pn"><strong>Pn</strong>: The <a href="misc/Threads.htm">priority</a> of the hotstring (e.g. P1). This rarely-used option has no effect on <a href="#auto">auto-replace hotstrings</a>.</p>
<p id="raw"><strong>R</strong>: Send the replacement text <a href="commands/Send.htm#SendRaw">raw</a>; that is, without translating {Enter} to <kbd>Enter</kbd>, ^c to <kbd>Control</kbd>+<kbd>C</kbd>, etc. Use <strong>R0</strong> to turn this option back off, or override it with <strong>T</strong>.</p>
<p class="note"><strong>Note:</strong> <a href="#T">Text mode</a> may be more reliable. The R and T options are mutually exclusive.</p>
<p id="SendMode"><strong>SI</strong> or <strong>SP</strong> or <strong>SE</strong>: Sets the method by which <a href="#auto">auto-replace hotstrings</a> send their keystrokes. These options are mutually exclusive: only one can be in effect at a time. The following describes each option:</p>
<ul>
  <li>SI stands for <a href="commands/Send.htm#SendInputDetail">SendInput</a>, which typically has superior speed and reliability than the other modes. Another benefit is that like SendPlay below, SendInput postpones anything you type during a hotstring's <a href="#auto">auto-replacement text</a>. This prevents your keystrokes from being interspersed with those of the replacement. When SendInput is <a href="commands/Send.htm#SendInputUnavail">unavailable</a>, hotstrings automatically use SendPlay instead.</li>
  <li>SP stands for <a href="commands/Send.htm#SendPlayDetail">SendPlay</a>, which may allow hotstrings to work in a broader variety of games.</li>
  <li>SE stands for <a href="commands/Send.htm#SendEvent">SendEvent</a>.</li>
</ul>
<p>If none of the above options are used, the default mode is SendInput. However, unlike the SI option, SendEvent is used instead of SendPlay when SendInput is unavailable.</p>
<p id="T"><strong>T</strong>: Send the replacement text using <a href="commands/Send.htm#SendText">Text mode</a>. That is, send each character by character code, without translating {Enter} to <kbd>Enter</kbd>, ^c to <kbd>Control</kbd>+<kbd>C</kbd>, etc. and without translating each character to a keystroke. This option is put into effect automatically for hotstrings that have a <a href="#continuation">continuation section</a>. Use <strong>T0</strong> or <strong>R0</strong> to turn this option back off, or override it with <strong>R</strong>.</p>
<p id="X"><strong>X</strong>: Execute. Instead of replacement text, the hotstring accepts a command or expression to execute. 例如, <code>:X:~mb::MsgBox</code> would cause a message box to be displayed when the user types "~mb" instead of auto-replacing it with the word "MsgBox". This is most useful when defining a large number of hotstrings which call functions, as it would otherwise require three lines per hotstring.</p>
<p>When used with the <a href="commands/Hotstring.htm">Hotstring</a> function, the X option causes the <em>Replacement</em> parameter to be interpreted as a label or function name instead of replacement text. However, the X option has this effect only if it is specified each time the function is called.</p>
<p id="z"><strong>Z</strong>: This rarely-used option resets the hotstring recognizer after each triggering of the hotstring. In other words, the script will begin waiting for an entirely new hotstring, eliminating from consideration anything you previously typed. This can prevent unwanted triggerings of hotstrings. To illustrate, consider the following hotstring:</p>
<pre>:b0*?:11::
SendInput "xx"
return</pre>
<p>Since the above lacks the Z option, typing 111 (three consecutive 1's) would trigger the hotstring twice because the middle 1 is the <em>last</em> character of the first triggering but also the <em>first</em> character of the second triggering. By adding the letter Z in front of b0, you would have to type four 1's instead of three to trigger the hotstring twice. Use <strong>Z0</strong> to turn this option back off.</p>
<h2 id="continuation">长替换</h2>
<p>Hotstrings that produce a large amount of replacement text can be made more readable and maintainable by using a <a href="Scripts.htm#continuation">continuation section</a>. 例如:</p>
<pre>::text1::
(
Any text between the top and bottom parentheses is treated literally.
By default, the hard carriage return (Enter) between the previous line and this one is also preserved.
    By default, the indentation (tab) to the left of this line is preserved.
)</pre>
<p>See <a href="Scripts.htm#continuation">continuation section</a> for how to change these default behaviors. The presence of a continuation section also causes the hotstring to default to <a href="#T">Text mode</a>. The only way to override this special default is to specify an opposing option in each hotstring that has a continuation section (e.g. <code>:t0:text1::</code> or <code>:r:text2::</code>).</p>
<h2 id="variant">上下文相关的热字串</h2>
<p>The <a href="commands/_If.htm">#If</a> directive can be used to make selected hotstrings context sensitive. Such hotstrings send a different replacement, perform a different action, or do nothing at all depending on any condition, such as the type of window that is active. 例如:</p>
<pre>#If WinActive("ahk_class Notepad")
::btw::This replacement text will appear only in Notepad.
#If
::btw::This replacement text appears in windows other than Notepad.</pre>

<h2 id="AutoCorrect">自动更正</h2>
<p>The following script uses hotstrings to correct about 4700 common English misspellings on-the-fly. It also includes a <kbd>Win</kbd>+<kbd>H</kbd> hotkey to make it easy to add more misspellings:</p>
<p>Download: <a href="http://www.autohotkey.com/download/AutoCorrect.ahk">AutoCorrect.ahk</a> (127 KB)</p>
<p>Author: <a href="http://www.biancolo.com/blog/autocorrect/">Jim Biancolo</a> and <a href="http://en.wikipedia.org/wiki/Wikipedia:Lists_of_common_misspellings">Wikipedia's Lists of Common Misspellings</a></p>

<h2 id="remarks">备注</h2>
<p><a href="Variables.htm#Expressions">Expressions</a> are not currently supported within the replacement text. To work around this, don't make such hotstrings <a href="#auto">auto-replace</a>. Instead, use the <a href="commands/Send.htm#SendInput">SendInput</a> function beneath the abbreviation, followed by a line containing only the word Return.</p>
<p>To send an extra space or tab after a replacement, include the space or tab at the end of the replacement but make the last character an accent/backtick (`). 例如:</p>
<pre>:*:btw::By the way `</pre>
<p id="NoMouse">By default, any click of the left or right mouse button will reset the hotstring recognizer. In other words, the script will begin waiting for an entirely new hotstring, eliminating from consideration anything you previously typed (if this is undesirable, specify the line <code><a href="commands/_Hotstring.htm">#Hotstring</a> NoMouse</code> anywhere in the script). This &quot;reset upon mouse click&quot; behavior is the default because each click typically moves the text insertion point (caret) or sets keyboard focus to a new control/field. In such cases, it is usually desirable to: 1) fire a hotstring even if it lacks the <a href="#Question">question mark option</a>; 2) prevent a firing when something you type after clicking the mouse accidentally forms a valid abbreviation with what you typed before.</p>
<p id="focus-reset">The hotstring recognizer checks the active window each time a character is typed, and resets if a different window is active than before. If the active window changes but reverts before any characters are typed, the change is not detected (but the hotstring recognizer may be reset for some other reason). The hotstring recognizer can also be reset by calling <code><a href="commands/Hotstring.htm#Reset">Hotstring "Reset"</a></code>.</p>
<p>The built-in variable <strong>A_EndChar</strong> contains the ending character that you typed to trigger the most recent non-auto-replace hotstring. If no ending character was required (due to the <a href="#Asterisk">* option</a>), it will be blank. A_EndChar is useful when making hotstrings that use the Send function or whose behavior should vary depending on which ending character you typed. To send the ending character itself, use <code>SendText A_EndChar</code> (<a href="commands/Send.htm">SendText</a> is used because characters such as !{} would not be sent correctly by the normal Send function).</p>
<p>Although single-colons within hotstring definitions do not need to be <a href="misc/EscapeChar.htm">escaped</a> unless they precede the double-colon delimiter, backticks and those semicolons having a space or tab to their left must always be escaped. See <a href="misc/EscapeChar.htm">escape sequences</a> for a complete list.</p>
<p>Although the <a href="commands/Send.htm">Send function</a>'s special characters such as {Enter} are supported in <a href="#auto">auto-replacement text</a> (unless the <a href="#raw">raw option</a> is used), the hotstring abbreviations themselves do not use this. Instead, specify `n for the <kbd>Enter</kbd> key and `t (or a literal tab) for <kbd>Tab</kbd> (see <a href="misc/EscapeChar.htm">escape sequences</a> for a complete list). 例如, the hotstring <code>:*:ab`t::</code> would be triggered when you type &quot;ab&quot; followed by a tab.</p>
<p>Spaces and tabs are treated literally within hotstring definitions. 例如, the following would produce two different results: <code>::btw::by the way</code> and <code>::btw:: by the way</code>.</p>
<p>Each hotstring abbreviation can be no more than 40 characters long. The program will warn you if this length is exceeded. By contrast, the length of hotstring's replacement text is limited to about 5000 characters when the <a href="#SendMode">sending mode</a> is at its default of SendInput. That limit can be increased to 16,383 characters by switching to one of the other <a href="#SendMode">sending modes</a>. Furthermore, an unlimited amount of text can be sent by using <code><a href="commands/Send.htm#SendPlayDetail">SendPlay</a> MyVariable</code> in the body of the hotstring.</p>
<p>The order in which hotstrings are defined determines their precedence with respect to each other. In other words, if more than one hotstring matches something you type, only the one listed first in the script will take effect. Related topic: <a href="#variant">context-sensitive hotstrings</a>.</p>
<p>Any backspacing you do is taken into account for the purpose of detecting hotstrings. However, the use of <kbd>&uarr;</kbd>, <kbd>&rarr;</kbd>, <kbd>&darr;</kbd>, <kbd>&larr;</kbd>, <kbd>PageUp</kbd>, <kbd>PageDown</kbd>, <kbd>Home</kbd>, and <kbd>End</kbd> to navigate within an editor will cause the hotstring recognition process to reset. In other words, it will begin waiting for an entirely new hotstring.</p>
<p>A hotstring may be typed even when the active window is ignoring your keystrokes. In other words, the hotstring will still fire even though the triggering abbreviation is never visible. In addition, you may still press the <kbd>Backspace</kbd> key to undo the most recently typed keystroke (even though you can't see the effect).</p>
<p id="label">It is possible to <a href="commands/Gosub.htm">Gosub</a> or <a href="commands/Goto.htm">Goto</a> a hotstring label by including its first pair of colons (including any option symbols) in front of its name. 例如: <code>Gosub ::xyz</code>. However, jumping to a <a href="#auto">single-line (auto-replace) hotstring</a> will do nothing other than execute a <a href="commands/Return.htm">return</a>.</p>
<p>Although hotstrings are not monitored and will not be triggered during the course of an invisible <a href="commands/Input.htm">Input</a> function, visible Inputs are capable of triggering them.</p>
<p id="InputLevel">By default, hotstrings are never triggered by keystrokes produced by any AutoHotkey script. This avoids the possibility of an infinite loop where hotstrings trigger each other over and over. This behaviour can be controlled with <a href="commands/_InputLevel.htm">#InputLevel</a> and <a href="commands/SendLevel.htm">SendLevel</a>. However, auto-replace hotstrings always use send level 0 and therefore never trigger <a href="commands/_UseHook.htm">hook hotkeys</a> or hotstrings.</p>
<p>Hotstrings can be created dynamically by means of the <a href="commands/Hotstring.htm">Hotstring</a> function, which can also modify, disable, or enable the script's existing hotstrings individually.</p>
<p>The <a href="commands/Input.htm">Input</a> function is more flexible than hotstrings for certain purposes. 例如, it allows your keystrokes to be invisible in the active window (such as a game). It also supports non-character ending keys such as <kbd>Escape</kbd>.</p>
<p>The <a href="commands/_InstallKeybdHook.htm">keyboard hook</a> is automatically used by any script that contains hotstrings.</p>
<p>Hotstrings behave identically to hotkeys in the following ways:</p>
<ul>
  <li>They are affected by the <a href="commands/Suspend.htm">Suspend</a> function.</li>
  <li>They obey <a href="commands/_MaxThreads.htm">#MaxThreads</a> and <a href="commands/_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> (but not <a href="commands/_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>).</li>
  <li>Scripts containing hotstrings are automatically <a href="Scripts.htm#persistent">persistent</a>.</li>
  <li>Non-auto-replace hotstrings will create a new <a href="misc/Threads.htm">thread</a> when launched. In addition, they will update the built-in hotkey variables such as <a href="Variables.htm#ThisHotkey">A_ThisHotkey</a>.</li>
</ul>
<p>Known limitation: On some systems in Java applications, hotstrings might interfere with the user's ability to type diacritical letters (via dead keys).  To work around this, <a href="commands/Suspend.htm">Suspend</a> can be turned on temporarily (which disables all hotstrings).</p>

<h2 id="Function">函数热字串</h2>
<p>一个或多个热字串可以关联到一个<a href="Functions.htm">函数</a>, 只需在热字串标签后立即定义该函数, 如下例所示:</p>
<pre><em>; 此示例还演示了在脚本中实现大小写一致性的一种方法.</em>
:C:BTW::  <em>; 输入所有大写字母.</em>
:C:Btw::  <em>; 只有第一个字母输入大写字母.</em>
: :btw::  <em>; 输入任何其他组合.</em>
    case_conform_btw() {
        hs := A_ThisHotkey  <em>; 为了方便和被打断时能继续.</em>
        if (hs == ":C:BTW")
            Send "BY THE WAY"
        else if (hs == ":C:Btw")
            Send "By the way"
        else
            Send "by the way"
    }
</pre>
<p>有关其他细节, 请参阅<a href="Hotkeys.htm#function-details">函数热键</a>.</p>
<p><a href="commands/Hotstring.htm">Hotstring</a> 函数也可以关联函数或函数对象到一个热字串.</p>

<h2 id="Helper">热字串助手</h2>
<p>看看 <a href="commands/Hotstring.htm">Hotstring</a> 函数页面的示例部分中的<a href="commands/Hotstring.htm#ex1">第一个示例</a>, 如果您是深度的热字串用户, 那么它会很有用. 通过按下 <kbd>Win</kbd>+<kbd>H</kbd>(或您选择的其他热键), 可以把当前选择的文本转变成热字串. 例如, 如果您在文字处理软件中选择了 &quot;by the way&quot;, 按下 <kbd>Win</kbd>+<kbd>H</kbd> 会提示您输入其缩写(例如 btw), 添加新热字串到脚本中并激活它.</p>
</body>
</html>