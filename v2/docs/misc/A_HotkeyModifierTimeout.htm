<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>A_HotkeyModifierTimeout - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The A_HotkeyModifierTimeout variable affects the behavior of the Send function with the hotkey modifiers CTRL, ALT, WIN, and SHIFT." />
<meta name="ahk:equiv-v1" content="commands/_HotkeyModifierTimeout.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>A_HotkeyModifierTimeout</h1>

<p>影响带以下<a href="../Hotkeys.htm">热键</a>修饰符的 <a href="../commands/Send.htm">Send</a> 的行为: <kbd>Ctrl</kbd>, <kbd>Alt</kbd>, <kbd>Win</kbd> 和 <kbd>Shift</kbd>.</p>

<p>内置变量 <strong>A_HotkeyModifierTimeout</strong> 定义了热键被按下后, 其修饰符键被认为仍然被按住的时间. 这被 <a href="../commands/Send.htm">Send</a> 用来决定在暂时释放修饰符键后是否再按下它们.</p>
<dl>
  <dt>Value</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>间隔的长度, 以毫秒为单位. 该值可以是 -1, 这样它就永远不会超时(修饰符键总是在 Send 后被再次按下), 或 0 这样它总是超时(修改键永远不会被再次按下).</p>
    <p>默认值为 50.</p>
  </dd>
</dl>

<h2 id="Remarks">备注</h2>
<p>This variable has no effect when:</p>
<ul>
  <li>Hotkeys send their keystrokes via the <a href="../commands/Send.htm#SendInput">SendInput</a> or <a href="../commands/Send.htm#SendPlay">SendPlay</a> methods. This is because those methods postpone the user's physical pressing and releasing of keys until after the Send completes.</li>
  <li>The script has the keyboard hook installed (you can see if your script uses the hook via the "View-&gt;Key history" menu item in the main window, or via the <a href="../commands/KeyHistory.htm">KeyHistory</a> function). This is because the hook can keep track of which modifier keys (<kbd>Alt</kbd>/<kbd>Ctrl</kbd>/<kbd>Win</kbd>/<kbd>Shift</kbd>) the user is physically holding down and doesn't need to use the timeout.</li>
</ul>
<p>To illustrate the effect of this variable, consider this example: <code>^!a::Send "abc"</code>.</p>
<p>When the <a href="../commands/Send.htm">Send</a> function executes, the first thing it does is release <kbd>Ctrl</kbd> and <kbd>Alt</kbd> so that the characters get sent properly. After sending all the keys, the function doesn't know whether it can safely push back down <kbd>Ctrl</kbd> and <kbd>Alt</kbd> (to match whether the user is still holding them down). But if less than the specified number of milliseconds have elapsed, it will assume that the user hasn't had a chance to release the keys yet and it will thus push them back down to match their physical state. Otherwise, the modifier keys will not be pushed back down and the user will have to release and press them again to get them to modify the same or another key.</p>
<p>The timeout should be set to a value less than the amount of time that the user typically holds down a hotkey's modifiers before releasing them. Otherwise, the modifiers may be restored to the down position (get stuck down) even when the user isn't physically holding them down.</p>
<p>You can reduce or eliminate the need for this variable with one of the following:</p>
<ul>
  <li>Install the keyboard hook by calling <a href="../commands/InstallKeybdHook.htm">InstallKeybdHook</a>.</li>
  <li>Use the <a href="../commands/Send.htm#SendInput">SendInput</a> or <a href="../commands/Send.htm#SendPlay">SendPlay</a> methods rather than the traditional <a href="../commands/Send.htm#SendEvent">SendEvent</a> method.</li>
  <li>When using the traditional <a href="../commands/Send.htm#SendEvent">SendEvent</a> method, reduce <a href="../commands/SetKeyDelay.htm">SetKeyDelay</a> to 0 or -1, which should help because it sends the keystrokes more quickly.</li>
</ul>

<h2 id="Related">相关</h2>
<p><a href="../commands/GetKeyState.htm">GetKeyState</a></p>

<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> Sets the hotkey modifier timeout to 100 ms instead of 50 ms.</p>
<pre>A_HotkeyModifierTimeout := 100</pre>
</div>



<p>影响<a href="../Hotkeys.htm">热键</a>修饰符的行为: <kbd>Ctrl</kbd>, <kbd>Alt</kbd>, <kbd>Win</kbd> 和 <kbd>Shift</kbd>.</p>

<pre class="Syntax"><span class="func">#HotkeyModifierTimeout</span> Milliseconds</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>Milliseconds</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>间隔长度, 以毫秒为单位. 此值设为 -1 时, 它永远不会超时(在 Send 后修饰键总是被推回到按下的状态), 设为 0 时, 总是超时(修饰键总是不会被推回到按下的状态).</p>
  </dd>

</dl>
<h2 id="Remarks">备注</h2>
<p>在下列情况中 <strong>不需要</strong> 使用此指令:</p>
<ul>
  <li>热键通过 <a href="Send.htm#SendInput">SendInput</a> 或 <a href="Send.htm#SendPlay">SendPlay</a> 方法发送键击. 这是因为这些方法将用户的物理按键操作和释放延迟到 Send 完成之后.</li>
  <li>脚本安装了键盘钩子(您可以通过主窗口中的 "View-&gt;Key history" 菜单项或 <a href="KeyHistory.htm">KeyHistory</a> 函数判断您的脚本是否使用了钩子). 这是因为钩子可以跟踪用户实际按住的修饰键(<kbd>Alt</kbd>/<kbd>Ctrl</kbd>/<kbd>Win</kbd>/<kbd>Shift</kbd>), 不需要使用超时.</li>
</ul>
<p>为了说明此指令的效果, 请参考这个例子: <code>^!a::Send "abc"</code>.</p>
<p>执行 <a href="Send.htm">Send</a> 函数时, 它会首先释放 <kbd>Ctrl</kbd> 和 <kbd>Alt</kbd>, 以便正确发送字符. 在发送所有键击后, 此函数不知道它是否可以安全的推回 <kbd>Ctrl</kbd> 和 <kbd>Alt</kbd> 到按下状态(以匹配用户是否仍然按下它们). 但是, 如果经过的时间少于指定的毫秒数, 则将假定用户尚未有释放键的机会, 因此它将推回它们以使其符合其物理状态. 否则, 修饰键将不会被推回按下状态, 用户必须再次按下它们来修饰同一个或其他的按键.</p>
<p>超时值应设置为小于用户通常在释放热键的修饰键之前按住它们的时间. 否则, 即使用户没有实际按下修饰键, 修饰键也可能恢复到向下位置(保持按下).</p>
<p>在下列情况中您可以减少或不使用此指令:</p>
<ul>
  <li>通过在脚本的任意位置添加 <a href="_InstallKeybdHook.htm">#InstallKeybdHook</a> 来安装键盘钩子.</li>
  <li>使用 <a href="Send.htm#SendInput">SendInput</a> 或 <a href="Send.htm#SendPlay">SendPlay</a> 方法而不使用传统的 <a href="Send.htm#SendEvent">SendEvent</a> 方法.</li>
  <li>使用传统的 <a href="Send.htm#SendEvent">SendEvent</a> 方法, 将 <a href="SetKeyDelay.htm">SetKeyDelay</a> 减少到 0 或 -1, 这应该会有所帮助, 因为它可以更快地发送击键.</li>
</ul>
<p>如果脚本中未使用此指令, 那么它会表现得就像此设置为 50.</p>
<p>和其他指令一样, #HotkeyModifierTimeout 不能有条件地执行.</p>

<h2 id="Related">相关</h2>
<p><a href="GetKeyState.htm">GetKeyState</a></p>
<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a class="ex_number" href="#ExBasic"></a> 将热键修饰符超时设置为 100 毫秒, 而不是 50 毫秒.</p>
<pre>#HotkeyModifierTimeout 100</pre>
</div>

</body>
</html>