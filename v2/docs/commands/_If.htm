<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>#If - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The #If directive creates context-sensitive hotkeys and hotstrings. Such hotkeys perform a different action (or none at all) depending on the result of an expression." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>


<h1>#If</h1>

<p>创建上下文相关的<a href="../Hotkeys.htm">热键</a>和<a href="../Hotstrings.htm">热字串</a>. 这样的热键会根据表达式的结果执行不同的操作(或什么都不做).</p>

<pre class="Syntax"><span class="func">#If</span> <span class="optional">Expression</span></pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>Expression</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#boolean">布尔值</a></p>
    <p>任何有效的<a href="../Variables.htm#Expressions">表达式</a>.</p>
  </dd>

</dl>

<h2 id="howto">基本操作</h2>
<p>#If 指令设置表达式, 随后创建的热键将使用该表达式来确定是否应激活它们. 当按下键, 鼠标按钮或组合键, 或者在程序需要知道热键是否处于活动状态时, 将对该表达式求值.</p>
<p>要生成上下文敏感的<a href="../Hotkeys.htm">热键</a>和<a href="../Hotstrings.htm">热字串</a>, 只需在它们前面加上 #If 指令. 例如:</p>
<pre>#If WinActive("ahk_class Notepad") or WinActive(MyWindowTitle)
#Space::MsgBox "You pressed Win+Spacebar in Notepad or " MyWindowTitle</pre>
<p>#If 指令是与位置相关的: 它会影响脚本中在它后面的所有热键和热字串, 直到下一个 #If 指令.</p>
<p class="warning"><strong>注意:</strong> 与 <a href="If.htm">if 语句</a>不同, 大括号对 #If 指令无效.</p>
<p>要关闭热键的上下文相关性, 请指定不带任何表达式的 #If 指令. 例如:</p>
<pre>#If</pre>
<p>当通过 #If 禁用鼠标或键盘热键时, 它会执行其原来的功能; 也就是说, 它传递到活动窗口, 就好像不存在热键一样. 但有一个例外: 操纵杆热键: 尽管 #If 有效, 它始终不会阻止其他程序看到操纵杆按钮按下.</p>
<p>#If 也可以用来改变普通按键(例如 <kbd>Enter</kbd> 或 <kbd>Space</kbd>) 的行为. 当某个特定窗口忽略该键或执行某些您认为不需要的操作时, 这是非常有用的. 例如:</p>
<pre>#If WinActive("Reminders ahk_class #32770")  <em>; Outlook 中的 "reminders" 窗口.</em>
Enter::Send "!o"  <em>; 按下 &quot;Enter&quot; 打开 reminder, 而不是 snoozing.</em>
#If</pre>

<h2 id="variant">变体(副本) 热键</h2>
<p>一个特定的<a href="../Hotkeys.htm">热键</a>或<a href="../Hotstrings.htm">热字串</a>在脚本中可以被创建多次, 如果每个定义有不同的 #If 条件. 这被称为 <em>热键变体</em>. 例如:</p>
<pre>#If <a href="WinActive.htm">WinActive</a>("ahk_class Notepad")
^!c::MsgBox "You pressed Control+Alt+C in Notepad."
#If WinActive("ahk_class WordPadClass")
^!c::MsgBox "You pressed Control+Alt+C in WordPad."
#If
^!c::MsgBox "You pressed Control+Alt+C in a window other than Notepad/WordPad."</pre>
<p>如果有多个变体符合触发条件, 那么仅触发最早创建的那个. 这种情况的例外是全局变体(不带 #If 条件的那个): 它的优先级总是最低的, 仅当其他变体都不触发时它才会被触发(此例外不适用<a href="../Hotstrings.htm">热字串</a>).</p>
<p>创建重复热键时, <a href="../Hotkeys.htm#Symbols"> 修饰符</a> 的顺序(如 ^!+#) 没有关系. 例如, <code>^!c</code> 等同于 <code>!^c</code>.但是, 按键必须拼写一致. 例如, 为了这个目的时, <em>Esc</em> 不同于 <em>Escape</em>(尽管大小写无关). 最后, 任何带有<a href="../Hotkeys.htm#wildcard">通配符前缀(*)</a> 的热键和不带通配符的热键是完全独立的; 例如, <code>*F1</code> 和 <code>F1</code> 都可以有他们各自的变体.</p>
<p>要让多个变体执行相同的热键子例程, 最简单的方法是创建一个相同的热键堆栈, 每个热键上面都有一个不同的 #If 指令. 例如:</p>
<pre>#If WinActive("ahk_class Notepad")
#z::
#If WinActive("ahk_class WordPadClass")
#z::
MsgBox "You pressed Win+Z in either Notepad or WordPad."
return</pre>
<p>Alternatively, a <a href="GroupAdd.htm">window group</a> can be used via <code>#If WinActive("ahk_group MyGroup")</code>.</p>
<p>To create hotkey variants dynamically (while the script is running), 请参阅 <a href="Hotkey.htm#if">Hotkey "If"</a>.</p>

<h2 id="expression-evaluation">Expression Evaluation</h2>
<p>When the key, mouse or joystick button combination which forms a hotkey is pressed, the #If expression is evaluated to determine if the hotkey should activate.</p>
<p class="warning"><strong>Note:</strong> Scripts should not assume that the expression is only evaluated when the key is pressed (see below).</p>
<p>The expression may also be evaluated whenever the program needs to know whether the hotkey is active. 例如, the #If expression for a custom combination like <code>a &amp; b::</code> might be evaluated when the prefix key (<code>a</code> in this example) is pressed, to determine whether it should act as a custom modifier key.</p>
<p class="warning" id="lag"><strong>Note:</strong> Use of #If in an unresponsive script may cause input lag or break hotkeys (see below).</p>
<p>There are several more caveats to the #If directive:</p>
<ul>
  <li>Keyboard or mouse input is typically buffered (delayed) until expression evaluation completes or <a href="_IfTimeout.htm">times out</a>.</li>
  <li>Expression evaluation can only be performed by the script's main thread (at the OS level, not a <a href="../misc/Threads.htm">quasi-thread</a>), not directly by the keyboard/mouse hook. If the script is busy or unresponsive, such as if a FileCopy is in progress, expression evaluation is delayed and may time out.</li>
  <li>If the <a href="_IfTimeout.htm#LowLevelHooksTimeout">system-defined timeout</a> is reached, the system may stop notifying the script of keyboard or mouse input (see #IfTimeout for details).</li>
  <li>Sending keystrokes or mouse clicks while the expression is being evaluated (such as from a function which it calls) may cause complications and should be avoided.</li>
</ul>
<p><a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> and <a href="../Variables.htm#TimeSinceThisHotkey">A_TimeSinceThisHotkey</a> are set based on the hotkey for which the current #If expression is being evaluated.</p>
<p><a href="../Variables.htm#PriorHotkey">A_PriorHotkey</a> and <a href="../Variables.htm#TimeSincePriorHotkey">A_TimeSincePriorHotkey</a> temporarily contain the previous values of the corresponding "This" variables.</p>

<h2 id="optimization">Optimization</h2>
<p>#If is optimized to avoid expression evaluation for simple calls to <a href="WinActive.htm">WinActive</a> or <a href="WinExist.htm">WinExist</a>, thereby reducing the <a href="#lag">risk of lag</a> or other issues in such cases. Specifically:</p>
<ul>
  <li>The expression must contain exactly one call to <a href="WinExist.htm">WinExist</a> or <a href="WinActive.htm">WinActive</a>.</li>
  <li>Each parameter must be a single quoted string, and no more than two parameters may be used.</li>
  <li>The result may be inverted with <code>not</code> or <code>!</code>, but no other operators may be used.</li>
  <li>Whitespace and parentheses are fully handled when the expression is pre-compiled and therefore do not affect this optimization.</li>
</ul>
<p>If the expression meets these criteria, it is evaluated directly by the program and does not appear in <a href="ListLines.htm">ListLines</a>.</p>
<p>Before the <a href="Hotkey.htm">Hotkey</a> function is used to modify an existing hotkey variant, typically <code>Hotkey "If"</code> must be used with the original expression text. However, the first unique expression with a given combination of criteria can also be referenced by that criteria. 例如:</p>
<pre>
Hotkey "IfWinExist", "ahk_class Notepad"
Hotkey "#n", "Off"  <em>; Turn the hotkey off.</em>
Hotkey 'If', 'WinExist("ahk_class Notepad")'
Hotkey "#n", "On"   <em>; Turn the same hotkey back on.</em>

#if WinExist("ahk_class Notepad")
#n::WinActivate
</pre>
<p>Note that any use of variables will disqualify the expression. If the variable's value never changes after the hotkey is created, there are two strategies for minimizing the risk of lag or other issues inherent to #If:</p>
<ul>
  <li>Use <code><a href="Hotkey.htm#IfWin">Hotkey "IfWin..."</a>, MyTitleVar</code> to set the criteria and <code><a href="Hotkey.htm">Hotkey</a> KeyName, Label</code> to create the hotkey variant.</li>
  <li>Use a constant expression such as <code>#if WinActive("ahk_group MyGroup")</code> and define the window group with <code><a href="GroupAdd.htm">GroupAdd</a> "MyGroup", MyTitleVar</code> elsewhere in the script.</li>
</ul>

<h2 id="general-remarks">备注</h2>
<p>#If also restores prefix keys to their native function when appropriate (a <a href="../Hotkeys.htm#prefix">prefix key</a> is the <kbd>A</kbd> key in a hotkey such as <code>a &amp; b</code>). This occurs whenever there are no enabled hotkeys for a given prefix.</p>
<p>When Gosub or Goto is used to jump to a hotkey or hotstring label, it jumps to the variant closest to the top of the script.</p>
<p>When a hotkey is currently disabled via #If, its key or mouse button will appear with a "#" character in <a href="KeyHistory.htm">KeyHistory's</a> "Type" column. This can help debug a script.</p>
<p><a href="../Hotkeys.htm#alttab">Alt-tab hotkeys</a> are not affected by #If: they are in effect for all windows.</p>
<p>The <a href="../misc/WinTitle.htm#LastFoundWindow">Last Found Window</a> can be set by #If. 例如:</p>
<pre>#If <a href="WinExist.htm">WinExist</a>("ahk_class Notepad")
#n::<a href="WinActivate.htm">WinActivate</a>  <em>; Activates the window found by WinExist().</em></pre>

<h2 id="Related">相关</h2>
<p><a href="_IfTimeout.htm">#IfTimeout</a> may be used to override the default timeout value.</p>
<p><a href="Hotkey.htm">Hotkey function</a>, <a href="../Hotkeys.htm">Hotkeys</a>, <a href="../Hotstrings.htm">Hotstrings</a>, <a href="Suspend.htm">Suspend</a>, <a href="WinActive.htm">WinActive</a>, <a href="WinExist.htm">WinExist</a>, <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a></p>

<h2 id="Examples">示例</h2>

<div class="ex" id="ExVolume">
<p><a href="#ExVolume">#1</a>: Adjust volume by scrolling the mouse wheel over the taskbar:</p>
<pre>
<em>; 示例 0: WinActive.</em>
#If WinActive("ahk_class Notepad")
^!a::MsgBox "You pressed Ctrl-Alt-A while Notepad is active."
#c::MsgBox "You pressed Win-C while Notepad is active."
::btw::This replacement text for "btw" will occur only in Notepad.
#If
#c::MsgBox "You pressed Win-C in a window other than Notepad."

#If MouseIsOver("ahk_class Shell_TrayWnd")
WheelUp::Send "{Volume_Up}"
WheelDown::Send "{Volume_Down}"

MouseIsOver(WinTitle) {
    MouseGetPos ,, Win
    return WinExist(WinTitle " ahk_id " Win)
}
</pre>
</div>

<div class="ex" id="ExWordDelete">
<p><a href="#ExWordDelete">#2</a>: Simple word-delete shortcuts for all Edit controls:</p>
<pre>
#If ActiveControlIsOfClass("Edit")
^BS::Send "^+{Left}{Del}"
^Del::Send "^+{Right}{Del}"

ActiveControlIsOfClass(Class) {
    FocusedControl := ControlGetFocus("A")
    FocusedControlClass := WinGetClass("ahk_id " FocusedControl)
    return (FocusedControlClass=Class)
}
</pre>
</div>

<div class="ex" id="ExContextInsens">
<p><a href="#ExContextInsens">#3</a>: Context-insensitive Hotkey.</p>
<pre>
#If
Esc::ExitApp
</pre>
</div>

<div class="ex" id="ExDynamic">
<p><a href="#ExDynamic">#4</a>: Dynamic Hotkeys. This example requires the MousIsOver function from <a href="#ExVolume">example #1</a>:</p>
<pre>
NumpadAdd::
Hotkey "If", 'MouseIsOver("ahk_class Shell_TrayWnd")'
if (doubleup := !doubleup)
    Hotkey "WheelUp", "DoubleUp"
else
    Hotkey "WheelUp", "WheelUp"
return

DoubleUp:
Send "{Volume_Up 2}"
return
</pre>
</div>

</body>
</html>