<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Hotstring - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The Hotstring function creates, modifies, enables, or disables a hotstring while the script is running." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>Hotstring</h1>

<p>在脚本运行时创建, 修改, 启用或禁用<a href="../Hotstrings.htm">热字串</a>.</p>

<pre class="Syntax"><span class="func">Hotstring</span> String <span class="optional">, Replacement, OnOffToggle</span>
<span class="func">Hotstring</span> <a href="#NewOptions">NewOptions</a>
OldValue := <span class="func">Hotstring</span>("<a href="#EndChars">EndChars</a>" <span class="optional">, NewValue</span>)
OldValue := <span class="func">Hotstring</span>("<a href="#MouseReset">MouseReset</a>" <span class="optional">, NewValue</span>)
<span class="func">Hotstring</span> "Reset"
</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>String</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>热字串的触发字符串, 前面是<a href="../Hotstrings.htm">常用的冒号对</a>和<a href="../Hotstrings.htm#Options">选项字符</a>. 例如, <code>"::btw"</code> 或 <code>":*:]d"</code>.</p>
    <p><em>String</em> 可以考虑通过<a href="../Hotstrings.htm#C">区分大小写(C)</a>, <a href="../Hotstrings.htm#Question">单词敏感性(?)</a>, 激活条件(如 <a href="_If.htm">#If</a> 或 <a href="Hotkey.htm#if">Hotkey "If"</a> 设置) 和触发字符串来匹配现有的热字符串. 例如, <code>"::btw"</code> 和 <code>"::BTW"</code> 只有在区分大小写模式作为默认值开启时才匹配, 而 <code>":C:btw"</code> 和 <code>":C:BTW"</code> 永远不匹配. <code>C</code> 和 <code>?</code> 选项可能包含在 <em>String</em> 中或者通过 <a href="_Hotstring.htm">#Hotstring</a> 指令或之前对<a href="#NewOptions">此函数</a>的调用设为默认值.</p>
    <p>如果热字串已经存在, 那么在 <em>String</em> 中指定的所有选项都会生效, 而其他所有选项都保持原样. 但是, 由于带有 <code>C</code> 或 <code>?</code> 的热字串被认为是与其他热字串不一样的, 所以不可能添加或删除这些选项. 作为代替, 关闭现有热字串并创建一个新的.</p>
    <p>当热字串第一次被创建时 -- 无论是通过热字串函数还是脚本中的<a href="../Hotstrings.htm">双冒号标签</a> -- 其触发字符串和选项字符序列都将成为热字串的固定名称, 正如 <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> 中显示的名称. 即使热字串函数稍后使用不同的选项字符访问热字串, 这个名称也不会改变.</p>
    <p>如果 <a href="../Hotstrings.htm#X">X(执行) 选项</a>存在于 <em>String</em> 中(不只是设置为默认值), <em>Replacement</em> 参数将被解释为一个标签或函数名而不是替换文本. 如果 <em>Replacement</em> 是对象, 则没有效果.</p>
  </dd>

  <dt>Replacement</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a>或<a href="../Concepts.htm#objects">对象</a></p>
    <p>当热字串触发时, 替换字符串, 或<a href="../misc/Labels.htm">标签</a>, 调用的<a href="../Functions.htm">函数</a>或<a href="../objects/Functor.htm">函数对象</a>(作为新<a href="../misc/Threads.htm">线程</a>).</p>
    <p>默认情况下, 所有字符串都作为替换文本处理. 要按名称指定标签或函数, 请在 <em>String</em> 中包含 <a href="../Hotstrings.htm#X">X(执行)</a> 选项. 普通全局标签和<a href="../Hotkeys.htm">热键</a>/<a href="../Hotstrings.htm">热字串</a>标签都能使用, 但是不能使用局部标签. 不应该包含尾部的冒号. 如果一个函数和一个标签具有相同的名称, 则标签优先. 要使用函数代替时, 传递<a href="../objects/Func.htm">函数引用</a>.</p>
    <p>如果热字串已经存在, 则该参数可以留空, 在这种情况下, 它的替换不会被改变. 这对于只更改热字串的选项, 或打开或关闭热字串它是有用的.</p>
    <p class="note"><strong>注意</strong>: If this parameter is specified but the hotstring is disabled from a previous use of this function, the hotstring will remain disabled. To prevent this, include the word <code>"On"</code> in <em>OnOffToggle</em>.</p>
  </dd>

  <dt>OnOffToggle</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a>或<a href="../Concepts.htm#numbers">整数</a></p>
    <p>下列值之一:</p>
    <p><strong>On</strong> 或 <strong>1</strong>(true): 启用热字串.</p>
    <p><strong>Off</strong> 或 <strong>0</strong>(false): 禁用热字串.</p>
    <p><strong>Toggle</strong> 或 <strong>-1</strong>: 设置热字串到相反的状态(启用或禁用).</p>
  </dd>

</dl>

<h2 id="Errors">错误</h2>
<p>This function throws an exception if the parameters are invalid or a memory allocation fails. It does not affect <a href="../misc/ErrorLevel.htm">ErrorLevel</a>.</p>
<p>An exception is also thrown if <em>Replacement</em> is omitted and <em>String</em> is valid but does not match an existing hotstring. This can be utilized to test for the existence of a hotstring. 例如:</p>
<pre>try
    Hotstring "::btw"
catch
    MsgBox "The hotstring does not exist or it has no variant for the current IfWin criteria."</pre>

<h2 id="Remarks">备注</h2>
<p>The <a href="Hotkey.htm#IfWin">current IfWin setting</a> determines the <a href="#variant">variant</a> of a hotstring upon which the Hotstring function will operate.</p>
<p>A given label or function can be the target of more than one hotstring. If it is known that a label or function was called by a hotstring, you can determine which hotstring by checking the built-in variable <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a>.</p>
<p>If the script is <a href="Suspend.htm">suspended</a>, newly added/enabled hotstrings will also be suspended until the suspension is turned off (unless they are exempt as described in the <a href="Suspend.htm">Suspend</a> section).</p>
<p>The <a href="_InstallKeybdHook.htm">keyboard</a> and/or <a href="_InstallMouseHook.htm">mouse</a> hooks will be installed or removed if justified by the changes made by this function.</p>
<p>This function cannot directly enable or disable hotstrings in scripts other than its own.</p>
<p>Once a script has at least one hotstring, it becomes persistent, meaning that <a href="ExitApp.htm">ExitApp</a> rather than Exit should be used to terminate it. Hotstring scripts are also automatically <a href="_SingleInstance.htm">#SingleInstance</a> unless <code>#SingleInstance Off</code> has been specified.</p>

<h2 id="variant">Variant (Duplicate) Hotstrings</h2>
<p>A particular hotstring can be created more than once if each definition has different <a href="Hotkey.htm#IfWin">IfWin</a> criteria, <a href="../Hotstrings.htm#C">case-sensitivity</a> (<code>C</code> vs. <code>C0</code>/<code>C1</code>), or <a href="../Hotstrings.htm#Question">word-sensitivity</a> (<code>?</code>). These are known as <em>hotstring variants</em>. For example:</p>
<pre>Hotkey "IfWinActive", "ahk_group CarForums"
Hotstring "::btw", "behind the wheel"
Hotkey "IfWinActive", "Inter-Office Chat"
Hotstring "::btw", "back to work"
Hotkey "IfWinActive"
Hotstring "::btw", "by the way"</pre>
<p>If more than one variant of a hotstring is eligible to fire, only the one created earliest will fire.</p>
<p>For more information about IfWin, 请参阅 <a href="_If.htm#general-remarks">#If's General Remarks</a>.</p>

<h2 id="EndChars">EndChars</h2>
<pre class="Syntax">OldValue := <span class="func">Hotstring</span>("EndChars" <span class="optional">, NewValue</span>)</pre>
<p>Retrieves or modifies the set of characters used as <a href="../Hotstrings.htm#EndChars">ending characters</a> by the hotstring recognizer. 例如:</p>
<pre>prev_chars := Hotstring("EndChars", "-()[]{}':;`"/\,.?!`n `t")
MsgBox "The previous value was: " prev_chars</pre>
<p><a href="Hotstring.htm#EndChars">#Hotstring EndChars</a> also affects this setting.</p>
<p>It is currently not possible to specify a different set of end characters for each hotstring.</p>

<h2 id="MouseReset">MouseReset</h2>
<pre class="Syntax">OldValue := <span class="func">Hotstring</span>("MouseReset" <span class="optional">, NewValue</span>)</pre>
<p>Retrieves or modifies the global setting which controls whether mouse clicks reset the hotstring recognizer, as described <a href="../Hotstrings.htm#NoMouse">here</a>. <em>NewValue</em> should be 1 (true) to enable mouse click detection and resetting of the hotstring recognizer, or 0 (false) to disable it. The return value is the setting which was in effect before the function was called.</p>
<p>The <a href="_InstallMouseHook.htm">mouse</a> hook may be installed or removed if justified by the changes made by this function.</p>
<p><a href="_Hotstring.htm">#Hotstring NoMouse</a> also affects this setting, and is equivalent to specifying <code>false</code> for <em>NewValue</em>.</p>

<h2 id="Reset">Reset</h2>
<pre class="Syntax"><span class="func">Hotstring</span> "Reset"</pre>
<p>Immediately resets the hotstring recognizer. In other words, the script will begin waiting for an entirely new hotstring, eliminating from consideration anything you previously typed.</p>

<h2 id="NewOptions">Setting Default Options</h2>
<pre class="Syntax"><span class="func">Hotstring</span> NewOptions</pre>
<p>To set new default options for subsequently created hotstrings, pass the options to the Hotstring function without any leading or trailing colon. 例如: <code>Hotstring "T"</code>.</p>
<p>Turning on <a href="../Hotstrings.htm#C">case-sensitivity (C)</a> or <a href="../Hotstrings.htm#Question">word-sensitivity (?)</a> also affects which existing hotstrings will be found by any subsequent calls to the Hotstring function. 例如, <code>Hotstring ":T:btw"</code> will find <code>::BTW</code> by default, but not if <code>Hotstring "C"</code> or <code><a href="_Hotstring.htm">#Hotstring</a> C</code> is in effect. This can be undone or overridden by passing a mutually-exclusive option; 例如, <code>C0</code> and <code>C1</code> override <code>C</code>.</p>

<h2 id="Related">相关</h2>
<p><a href="../Hotstrings.htm">Hotstrings</a>, <a href="_If.htm">#If</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="Suspend.htm">Suspend</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread</a>, <a href="Critical.htm">Critical</a></p>

<h2 id="Examples">示例</h2>

<div class="ex" id="ExHelper">
<p><a href="#ExHelper">#1</a>: 热字串助手. The following script might be useful if you are a heavy user of hotstrings. It's based on the v1 script created by Andreas Borutta. By pressing <kbd>Win</kbd>+<kbd>H</kbd> (or another hotkey of your choice), the currently selected text can be turned into a hotstring.  For example, if you have &quot;by the way&quot; selected in a word processor, pressing <kbd>Win</kbd>+<kbd>H</kbd> will prompt you for its abbreviation (e.g. btw), add the new hotstring to the script and activate it.</p>
<pre>#h::  <em>; Win+H hotkey
; Get the text currently selected. The clipboard is used instead of
; ControlGetSelected because it works in a greater variety of editors
; (namely word processors).  Save the current clipboard contents to be
; restored later. Although this handles only plain text, it seems better
; than nothing:</em>
ClipboardOld := Clipboard
Clipboard := "" <em>; Must start off blank for detection to work.</em>
Send "^c"
if !ClipWait(1)  <em>; ClipWait timed out.</em>
    return
<em>; Replace CRLF and/or LF with `n for use in a "send-raw" hotstring:
; The same is done for any other characters that might otherwise
; be a problem in raw mode:</em>
ClipContent := StrReplace(Clipboard, "``", "````")  <em>; Do this replacement first to avoid interfering with the others below.</em>
ClipContent := StrReplace(ClipContent, "`r`n", "``r")  <em>; Using `r works better than `n in MS Word, etc.</em>
ClipContent := StrReplace(ClipContent, "`n", "``r")
ClipContent := StrReplace(ClipContent, "`t", "``t")
ClipContent := StrReplace(ClipContent, "`;", "```;")
Clipboard := ClipboardOld  <em>; Restore previous contents of clipboard.</em>
ShowInputBox(":T:`::" ClipContent)
return

ShowInputBox(DefaultValue)
{
    <em>; This will move the InputBox's caret to a more friendly position:</em>
    SetTimer "MoveCaret", 10
    <em>; Show the InputBox, providing the default hotstring:</em>
    UserInput := InputBox("
    (
    Type your abreviation at the indicated insertion point. You can also edit the replacement text if you wish.

    Example entry: :T:btw`::by the way
    )", "New Hotstring",, DefaultValue)
    if ErrorLevel  <em>; The user pressed Cancel.</em>
        return

    if RegExMatch(UserInput, "(?P&lt;Label&gt;:.*?:(?P&lt;Abbreviation&gt;.*?))::(?P&lt;Replacement&gt;.*)", Hotstring)
    {
        if !Hotstring.Abbreviation
            MsgText := "You didn't provide an abbreviation"
        else if !Hotstring.Replacement
            MsgText := "You didn't provide a replacement"
        else
        {
            Hotstring Hotstring.Label, Hotstring.Replacement  <em>; Enable the hotstring now.</em>
            FileAppend "`n" UserInput, A_ScriptFullPath  <em>; Save the hotstring for later use.</em>
        }
    }
    else
        MsgText := "The hotstring appears to be improperly formatted"

    if MsgText
    {
        Result := MsgBox(MsgText ". Would you like to try again?",, 4)
        if Result = "Yes"
            ShowInputBox(DefaultValue)
    }
    
    MoveCaret()
    {
        WinWait "New Hotstring"
        <em>; Otherwise, move the InputBox's insertion point to where the user will type the abbreviation.</em>
        Send "{Home}{Right 3}"
        SetTimer, 0
    }
}</pre>
</div>

</body>
</html>