<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>For Loop - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The For loop statement repeats a series of code lines once for each key-value pair in an object." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">
$(function(){
	var pageDATA_ua = window.navigator.userAgent.toLowerCase(); 
	if(pageDATA_ua.indexOf('ucbrowser')>=0){
		CaoNiMaDeUc();
	}
});
</script>
</head>
<body>

<h1>For-loop</h1>

<p>Repeats a series of functions once for each key-value pair in an object.</p>

<pre class="Syntax"><span class="func">For</span> Key <span class="optional">, Value</span> in Expression</pre>
<h2>参数</h2>
<dl>

  <dt>Key</dt>
  <dt>Value</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#variables">变量</a></p>
    <p>The variables in which to store the values returned by the enumerator at the beginning of each iteration - usually the key and value of each key-value pair within the object. The actual nature of these values is defined by the enumerator (and the type of enumerator is defined by the target object).</p>
    <p>When the loop breaks or completes, these variables are restored to their former values.</p>
  </dd>

  <dt>Expression</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#objects">对象</a></p>
    <p>An <a href="../Variables.htm#Expressions">expression</a> which results in an object, or a variable which contains an object.</p>
  </dd>

</dl>

<h2>备注</h2>
<p>The parameter list can optionally be enclosed in parentheses. 例如: <code>for (key in myobject)</code></p>
<p><i>Expression</i> is evaluated only once, before the loop begins. The resulting object's <code>_NewEnum</code> method is called to retrieve an <a href="../objects/Enumerator.htm"><i>enumerator</i></a> object. At the beginning of each iteration, the enumerator's <a href="../objects/Enumerator.htm#Next">Next</a> method is used to retrieve the next key-value pair. If Next returns false (zero or an empty string), the loop terminates.</p>
<p>Although not exactly equivalent to a for-loop, the following demonstrates this process:</p>
<pre>_enum := (<i>Expression</i>)._NewEnum()
while _enum.Next(Key, Value)
{
    ...
}
</pre>
<p>As in the code above, an exception is thrown if <em>Expression</em> or _NewEnum does not yield an object, or if a required method is missing.</p>
<p>Existing key-value pairs may be modified during the loop, but inserting or removing keys may cause some items to be skipped or enumerated multiple times. One workaround is to build a list of keys to remove, then use a second loop to remove the keys after the first loop completes. Note that <code><a href="../objects/Object.htm#Delete">Object.Delete</a>(<i>first</i>, <i>last</i>)</code> can be used to remove a range of keys without looping.</p>
<p>A for-loop is usually followed by a <a href="Block.htm">block</a>, which is a collection of statements that form the <em>body</em> of the loop. However, a loop with only a single statement does not require a block (an &quot;if&quot; and its &quot;else&quot; count as a single statement for this purpose). The One True Brace (OTB) style may optionally be used, which allows the open-brace to appear on the same line rather than underneath. 例如: <code>for x, y in z {</code>.</p>
<p>As with all loops, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> and <a href="../Variables.htm#Index">A_Index</a> may be used.</p>

<h2>COM Objects</h2>
<p>Since <i>Key</i> and <i>Value</i> are passed directly to the enumerator's Next method, the values they are assigned depends on what type of object is being enumerated. For COM objects, <i>Key</i> contains the value returned by <a href="http://msdn.microsoft.com/en-us/library/ms221369.aspx">IEnumVARIANT::Next()</a> and <i>Value</i> contains a number which represents its <a href="http://msdn.microsoft.com/en-us/library/cc237865.aspx">variant type</a>. 例如, when used with a <a href="http://msdn.microsoft.com/en-us/library/x4k5wbx4.aspx">Scripting.Dictionary</a> object, each <i>Key</i> contains a key from the dictionary and <i>Value</i> is typically 8 for strings and 3 for integers. See <a href="ComObjType.htm">ComObjType</a> for a list of type codes.</p>
<p>When enumerating a <a href="ComObjArray.htm">SafeArray</a>, <i>Key</i> contains the current element and <i>Value</i> contains its variant type.</p>

<h2>相关</h2>
<p><a href="../objects/Enumerator.htm">Enumerator object</a>, <a href="../objects/Object.htm#NewEnum">Object._NewEnum</a>, <a href="While.htm">While-loop</a>, <a href="Loop.htm">Loop</a>, <a href="Until.htm">Until</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a></p>

<h2>示例</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a>:  列出对象中的键值对:</p>
<pre>colours := <a href="../Objects.htm#Arrays">Object</a>("red", 0xFF0000, "blue", 0x0000FF, "green", 0x00FF00)
<em>; 上面的表达式可以直接代替下面的"colours":</em>
for k, v in colours
    s .= k "=" v "`n"
MsgBox s
</pre>
</div>

<div class="ex" id="ExCOM">
<p><a href="#ExCOM">#2</a>: 列出所有的资源管理器和 Internet Explorer 窗口:</p>
<pre>for window in <a href="ComObjCreate.htm">ComObjCreate</a>("<a href="http://msdn.microsoft.com/en-us/library/bb774094.aspx">Shell.Application</a>").Windows
    windows .= window.<a href="http://msdn.microsoft.com/en-us/library/aa752057.aspx">LocationName</a> " :: " window.<a href="http://msdn.microsoft.com/en-us/library/aa752058.aspx">LocationURL</a> "`n"
MsgBox windows</pre>
</div>

<div class="ex" id="ExCEnumerator">
<p><a href="#ExCEnumerator">#3</a>: Class: CEnumerator</p>
<p>可用于遍历数值键的通用枚举器对象. 在循环期间不能修改数组, 否则迭代的范围将无效.
可以定义自己的 MaxIndex() 函数来表示数组边界. 如果在 1 和最大索引间有缺失的数组成员, 仍会循环到它们但值为空. 这意味着这个枚举器不支持实际的稀疏数组. 来源: <a href="https://www.autohotkey.com/board/topic/2667-suggestions-on-documentation-improvements/?p=531509">改善文档的建议</a></p>
<pre><em>/*
Class: CEnumerator
要在对象能使用这种循环, 请在它的类定义中插入这个函数:

    _NewEnum()
    {
    	return new CEnumerator(this)
    }
*/</em>

<em>; 对枚举器进行循环</em>
For k, v in Test
    MsgBox k "=" v

<em>; 用于演示的测试类</em>
class Test
{
    static Data := ["abc", "def", "ghi"]

    _NewEnum()
    {
        return new CEnumerator(this.Data)
    }
}

class CEnumerator
{
    __New(Object)
    {
        this.Object := Object
        this.first := true
        <em>; 加速缓存. 当自定义 Length 函数性能差时用得上.</em>
        <em>; 副作用是, 这意味着在迭代期间不能插入键值对, 否则范围将无效.</em>
        this.ObjMaxIndex := Object.Length()
    }

    Next(ByRef key, ByRef value)
    {
        if (this.first)
        {
            this.Delete("first")
            key := 1
        }
        else
            key++
        if (key &lt;= this.ObjMaxIndex)
            value := this.Object[key]
        else
            key := ""
        return key != ""
    }
}</pre>
</div>

</body>
</html>