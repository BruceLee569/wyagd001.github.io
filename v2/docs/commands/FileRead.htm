<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>FileRead - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The FileRead function retrieves the contents of a file." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>FileRead</h1>

<p>检索文件的内容.</p>

<pre class="Syntax">Text := <span class="func">FileRead</span>(Filename <span class="optional">, Options</span>)</pre>
<h2>参数</h2>
<dl>

  <dt>Filename</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>要读取的文件的名称, 如果未指定绝对路径, 则假定在 <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> 中.</p>
  </dd>
  
  <dt>Options</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>以下字符串的零个或多个, 使用单个空格或制表符将每个选项与下一个选项分开. 例如: <code>"`n m5000 UTF-8"</code></p>
    <p><strong>Encoding</strong>: 如果文件缺少 UTF-8 或 UTF-16 字节顺序标记, 则指定 <a href="FileEncoding.htm">FileEncoding</a> 接受的任何编码名称(不包括空字符串) 以使用该编码. 如果省略, 默认为 <a href="../Variables.htm#FileEncoding">A_FileEncoding</a>.</p>
    <p><strong>RAW</strong>: Specify the word RAW (case-insensitive) to read the file's content as <a href="#Binary">raw binary data</a>  and return a <a href="../objects/Buffer.htm">Buffer</a> object instead of a string. This option overrides any previously specified encoding and vice versa.</p>
    <p><strong>m1024</strong>: If this option is omitted, the entire file is loaded unless there is insufficient memory, in which case an error message is shown and the thread exits (but <a href="Try.htm">Try</a> can be used to avoid this). Otherwise, replace 1024 with a decimal or hexadecimal number of bytes. If the file is larger than this, only its leading part is loaded.</p>
    <p class="note"><strong>Note</strong>: This might result in the last line ending in a naked carriage return (`r) rather than `r`n.</p>
    <p><strong>`n</strong> (a linefeed character): Replaces any/all occurrences of carriage return &amp; linefeed (`r`n) with linefeed (`n). However, this translation reduces performance and is usually not necessary. 例如, text containing `r`n is already in the right format to be added to a <a href="StrReplace.htm">Gui Edit control</a>. The following <a href="LoopParse.htm">parsing loop</a> will work correctly regardless of whether each line ends in `r`n or just `n: <code>Loop Parse, MyFileContents, "`n", "`r"</code>.</p>
  </dd>
  
</dl>

<h2>返回值</h2>
<p>类型: <a href="../Concepts.htm#strings">字符串</a> or <a href="../objects/Buffer.htm">Buffer</a></p>
<p>This function returns the contents of the specified file. The return value is a Buffer object if the RAW option is in effect and the file can be opened; otherwise, it is a string. If the file does not exist or cannot be opened for any other reason, an empty string is returned.</p>

<h2>Error Handling</h2>
<p><a href="../misc/ErrorLevel.htm">ErrorLevel</a> is set to 0 if the load was successful. It is set to 1 if a problem occurred such as: 1) file does not exist; 2) file is locked or inaccessible; 3) the system lacks sufficient memory to load the file.</p>
<p>An <a href="Catch.htm#RuntimeErrors">exception</a> is thrown if invalid options are detected.</p>
<p><a href="../Variables.htm#LastError">A_LastError</a> is set to the result of the operating system's GetLastError() function.</p>

<h2 id="Binary">Reading Binary Data</h2>
<p>When the <code>RAW</code> option is used, the return value is a <a href="../objects/Buffer.htm">Buffer</a> object containing the raw, unmodified contents of the file. The object's <a href="../objects/Buffer.htm#Size">Size</a> property returns the number of bytes read. <a href="NumGet.htm">NumGet</a> or <a href="StrGet.htm">StrGet</a> can be used to retrieve data from the buffer. For example:</p>
<pre>buf := FileRead(A_AhkPath, "RAW")
if StrGet(buf, 2, "cp0") == "MZ"  <em>; Looks like an executable file...</em>
{
    <em>; Read machine type from COFF file header.</em>
    machine := NumGet(buf, NumGet(buf, 0x3C, "uint") + 4, "ushort")
    machine := machine=0x8664 ? "x64" : machine=0x014C ? "x86" : "unknown"
    <em>; Display machine type and file size.</em>
    MsgBox "This " machine " executable is " buf.Size " bytes."
}
buf := ""</pre>
<p>This option is generally required for reading binary data because by default, any bytes read from file are interpreted as text and may be converted from the source file's encoding (as specified in the options or by <a href="../Variables.htm#FileEncoding">A_FileEncoding</a>) to the script's <a href="../Compat.htm#Format">native encoding</a>, UTF-16. If the data is not UTF-16 text, this conversion generally changes the data in undesired ways.</p>
<p>For another demonstration of the RAW option, see <a href="ClipboardAll.htm#ex2">Saving and Restoring the Clipboard</a>.</p>
<p>Finally, <a href="FileOpen.htm">FileOpen</a> and <a href="../objects/File.htm#RawRead">File.RawRead</a> or <a href="../objects/File.htm#ReadNum">File.Read<i>Num</i></a> may be used to read binary data without first reading the entire file into memory.</p>

<h2>备注</h2>
<p>When the goal is to load all or a large part of a file into memory, FileRead performs much better than using a <a href="LoopRead.htm">file-reading loop</a>.</p>
<p>A file greater than 4 GB in size will cause an exception to be thrown unless the <strong>*m</strong> option is present, in which case the leading part of the file is loaded. An exception will also be thrown if the program is unable to allocate enough memory to contain the requested amount of data.</p>
<p>If there is concern about using too much memory, check the file size beforehand with <a href="FileGetSize.htm">FileGetSize</a>.</p>
<p><a href="FileOpen.htm">FileOpen</a> provides more advanced functionality than FileRead, such as reading or writing data at a specific location in the file without reading the entire file into memory. See <a href="../objects/File.htm">File Object</a> for a list of functions.</p>

<h2>相关</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File Object</a>, <a href="LoopRead.htm">file-reading loop</a>, <a href="FileGetSize.htm">FileGetSize</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="IniRead.htm">IniRead</a>, <a href="Sort.htm">Sort</a>, <a href="Download.htm">Download</a></p>

<h2>示例</h2>
<pre class="NoIndent" id="ex1"><em>; 示例 #1: Read text file into OutputVar.</em>
MyText := FileRead("C:\My Documents\My File.txt")</pre>
<pre class="NoIndent" id="ex2"><em>; 示例 #2: Quickly sort the contents of a file.</em>
Contents := FileRead("C:\Address List.txt")
if not ErrorLevel  <em>; Successfully loaded.</em>
{
    Contents := <a href="Sort.htm">Sort</a>(Contents)
    FileDelete "C:\Address List (alphabetical).txt"
    FileAppend Contents, "C:\Address List (alphabetical).txt"
    Contents := "" <em>; Free the memory.</em>
}</pre>

</body>
</html>