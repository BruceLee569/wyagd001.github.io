<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Hotkey - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The Hotkey function creates, modifies, enables, or disables a hotkey while the script is running." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>Hotkey</h1>

<p>在脚本运行时创建, 修改, 启用或禁用热键:</p>
<pre class="Syntax">
<span class="func">Hotkey</span> KeyName <span class="optional">, Label, Options</span>
</pre>
<p>指定随后创建或修改<a href="#variant">变体</a>热键的标准:</p>
<pre class="Syntax">
<span class="func">Hotkey</span> <a href="#if-blank">"If"</a>
<span class="func">Hotkey</span> <a href="#if-expr">"If", "Expression"</a>
<span class="func">Hotkey</span> <a href="#if-func">"If", FunctionObject</a>
<span class="func">Hotkey</span> <a href="#IfWin">"IfWinActive/Exist"</a> <span class="optional">, WinTitle, WinText</span>
</pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>KeyName</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>热键的按键的名称, 包括所有<a href="../Hotkeys.htm#Symbols">修饰符</a>. 例如, 指定 <code>#c</code> 来触发 <kbd>Win</kbd>+<kbd>C</kbd> 热键.</p>
    <p>如果 <em>KeyName</em> 已经是现有的热键, 那么将使用此函数的其他参数值更新原来的热键.</p>
    <p><em>KeyName</em> 也可以是现有的热键标签的名称(即双冒号标签), 这样会使用此函数的其他参数值更新原来的热键.</p>
    <p>指定 <em>现有的</em> 热键, <em>KeyName</em> 是不区分大小写的. 但是, 按键名称必须和现有的热键拼写相同(例如在这种情况下 Esc 与 Escape 是不同的). 此外, <a href="../Hotkeys.htm#Symbols">修饰符</a>(如 ^!+#) 的顺序是无关紧要的. <a href="GetKeyName.htm">GetKeyName</a> 可用于获取标准的按键名称.</p>
    <p>热键首次创建时 -- 无论是通过 Hotkey 函数还是脚本中的<a href="../Hotkeys.htm">双冒号标签</a> -- 其键名以及修饰符的顺序成为此热键的固定名称, 正如 <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> 所反映的那样. 这个名称由热键的所有<a href="_If.htm#variant">变体</a>共享, 并且即使之后 Hotkey  函数使用不同的修饰符顺序操作此热键, 此名称也不会改变.</p>
    <p>如果热键变体已经存在, 则根据 <em>KeyName</em> 是否包含<a href="../Hotkeys.htm#Tilde">颚化符前缀(~)</a> 更新它的行为.</p>
    <p>使用<a href="../Hotkeys.htm#prefixdollar">钩子前缀($)</a> 可添加到现有热键上. 这个前缀影响所有热键的变体且不能被删除.</p>
  </dd>

  <dt>Label</dt>
  <dd>
      <p>类型: <a href="../Concepts.htm#strings">字符串</a>或<a href="../Concepts.htm#objects">对象</a></p>
      <p>当按下热键时, 要执行的子程序(作为一个新的<a href="../misc/Threads.htm">线程</a>). 它可以是<a href="../misc/Labels.htm">标签</a>名称, 函数名称或<a href="../objects/Functor.htm">函数对象</a>.</p>
  <p>原义标签和函数名必须用引号括起来. 可以使用普通全局和<a href="../Hotkeys.htm">热键</a>/<a href="../Hotstrings.htm">热字串</a>标签, 但不能使用局部标签(而是使用<a href="../Functions.htm#nested">套嵌函数</a>). 后面的冒号不应该包括在内. 如果 <em>Label</em> 是动态的(例如 <code>VarContainingLabelName</code>), 可以事先使用 <a href="IsLabel.htm">IsLabel(VarContainingLabelName)</a> 检查标签是否存在.</p>
  <p>如果 <em>Label</em> 是一个函数, 则不带参数地调用它. 若要在具有相同名称的标签存在时指定函数, 请通过引用而不是名称传递它. 例如: <code>Hotkey "#c", Func("<i>FunctionName</i>")</code>. 热键还可以直接<a href="../Hotkeys.htm#Function">定义为函数</a>而无需使用 Hotkey 函数.</p>
      <p>如果 <em>KeyName</em> 已经作为热键, 那么参数可以为空, 这种情况下标签不会被改变. 这在仅需要改变热键 <em>Options</em> 时很有用.</p>
      <p class="note"><strong>注意</strong>: 如果指定了标签或函数, 但热键之前已经使用此命令禁用了, 那么热键会保持禁用状态. 要启用它, 请在 <em>Options</em> 中包含单词 ON.</p>
      <p>此参数还可以是下列特定值的其中一个:</p>
      <p><strong>On</strong>: 启用热键. 如果热键已经处于启用状态, 则不进行操作.</p>
      <p><strong>Off</strong>: 禁用热键. 如果热键已经处于禁用状态, 则不进行操作.</p>
      <p><strong>Toggle</strong>: 设置热键到相反的状态(启用或禁用).</p>
      <p><strong>AltTab</strong>(及其他): <a href="../Hotkeys.htm#alttab">这里</a>描述的特殊的 Alt-Tab 热键动作.</p>
      <p class="note"><strong>注意</strong>: 如果脚本中有一个名为 On, Off, Toggle 或 AltTab(或由这个函数识别的任何变体) 的标签, 则该标签将被忽略, 并且不能与该函数一起使用.</p>
      </dd>

  <dt>Options</dt>
  <dd>
      <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
      <p>由零个或多个下列字母组成的字符串, 字母间可以用空格分隔. 例如: <code>UseErrorLevel B0</code>.</p>
      <p id="UseErrorLevel"><strong>UseErrorLevel</strong>: 如果函数遇到问题, 使用此选项会跳过警告对话框, 设置 <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 为<a href="#ErrorLevel">下表</a>中的一个代码, 然后让<a href="../misc/Threads.htm">当前线程</a>继续执行.</p>
      <p><strong>On</strong>: 如果热键当前是禁用的, 则启用它.</p>
      <p><strong>Off</strong>: 如果热键当前是启用的, 则禁用它. 此选项常用来创建初始状态为禁用的热键.</p>
      <p><strong>B</strong> 或 <strong>B0</strong>: 指定字母 B 将按照 <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a> 中描述的方法缓冲热键. 指定 B0(B 后跟着数字 0) 来禁用这种类型的缓冲.</p>
      <p><strong>Pn</strong>: 指定字母 P 后面跟着热键的<a href="../misc/Threads.htm">线程优先级</a>. 如果创建热键时省略 P 选项, 则设置优先级为 0.</p>
      <p><strong>Tn</strong>: 指定字母 T 后面跟着一个表示此热键允许的线程数, 如同 <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a> 中描述的那样. 例如: <code>T5</code>.</p>
      <p><strong>In</strong>(InputLevel): 指定字母 I(或 i) 后跟随热键的<a href="_InputLevel.htm">输入级别</a>. 例如: <code>I1</code>.</p>
      <p>如果任一选项字母被忽略并且热键已经存在, 这些选项将不会被更改. 但是, 如果热键还不存在 -- 也就是说, 它将由这个函数创建 -- 这些选项将默认为最近生效的那些. 例如, 如果 <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a> 出现在脚本的最底部, 也会被使用. 如果脚本中没有出现 <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>, 那么将使用它的默认设置(在本例中为 OFF).</p>
      </dd>

</dl>

<h2 id="ErrorLevel">错误处理</h2>
<p>当第一个参数是 "If" 或以 "IfWin" 开始时, 如果参数无效或内存分配失败, 则抛出异常. 在这些情况下, 不会设置 ErrorLevel.</p>
<p>只有在 <em>Options</em> 参数中使用了单词 UseErrorLevel, <a href="../misc/ErrorLevel.htm">ErrorLevel</a> 才会改变.</p>
<table class="info">
  <tr>
    <th style="white-space: nowrap">错误</th>
    <th>说明</th>
  </tr>
  <tr>
    <td>1</td>
    <td><em>Label</em> 参数指定了不存在的标签名.</td>
  </tr>
  <tr>
    <td>2</td>
    <td><em>KeyName</em> 参数指定了一个或多个当前键盘布局/语言无法识别或不支持的键.</td>
  </tr>
  <tr>
    <td>3</td>
    <td>不支持的前缀键. 例如, 不支持使用鼠标滚轮作为热键(如 <code>WheelDown &amp; Enter</code>) 的前缀.</td>
  </tr>
  <tr>
    <td>4</td>
    <td><em>KeyName</em> 参数不适合用于 <a href="../Hotkeys.htm#alttab">AltTab 或 ShiftAltTab</a> 动作. 这种情况下要求热键为两个键的组合. 例如: <code>RControl &amp; RShift::AltTab</code>.</td>
  </tr>
  <tr>
    <td>5</td>
    <td>函数试图修改不存在的热键.</td>
  </tr>
  <tr>
    <td>6</td>
    <td>函数试图修改不存在的热键<a href="#variant">变体</a>. 要解决此问题, 请使用 <a href="#if">Hotkey "If"</a> 来设置匹配那些需修改的热键变体的条件.</td>
  </tr>
  <tr>
    <td>98</td>
    <td>创建这个热键将超过每个脚本 32762 个热键的限制(不过, 每个热键可以有无限数量的<a href="#variant">变体</a>, 而且也没有对<a href="../Hotstrings.htm">热字串</a>数量的限制).</td>
  </tr>
  <tr>
    <td>99</td>
    <td>内存不足. 这种情况极少, 通常仅在操作系统变得不稳定时才会发生.</td>
  </tr>
</table>
<p><br>
提示: UseErrorLevel 选项可用于测试热键变体是否存在. 例如:</p>
<pre>Hotkey "^!p",, "UseErrorLevel"
if ErrorLevel = 5 or ErrorLevel = 6
    MsgBox "The hotkey does not exist or it has no variant for the current If criteria."</pre>

<h2 id="Remarks">备注</h2>
<p><a href="#if">当前的 If 设置</a>决定了 Hotkey 函数将操作热键的哪个<a href="#variant">变体</a>.</p>
<p>如果需要根据活动窗口的类型来自动禁用选择的热键或热字串, 使用 <code>Hotkey "^!c", "Off"</code> 通常不如 <a href="_If.htm">#If</a> 带有 <a href="WinActive.htm">WinActive</a>/<a href="WinExist.htm">WinExist</a>(或它们的动态副本 <a href="#IfWin">Hotkey "IfWinActive/Exist"</a>) 来的方便.</p>
<p>通过<a href="../Hotkeys.htm">双冒号标签</a>创建的热键比使用 Hotkey 函数执行地更好, 因为在脚本启动时会批量启用它们(而非一个一个地启用). 因此, 最好使用此函数仅创建那些在脚本开始运行后才知道其键名的热键. 一种此类情况是, 当通过 <a href="IniRead.htm">INI 文件</a>来配置脚本各种操作的热键时使用此函数.</p>
<p>给定的标签可以是多个热键的目标. 如果某个热键调用了标签, 您可以通过检查内置变量 <a href="../Variables.htm#ThisHotkey">A_ThisHotkey</a> 来确定是哪个热键.</p>
<p>如果脚本被<a href="Suspend.htm">挂起了</a>, 那么新增加/启用的热键也将是挂起的, 直到挂起状态被关闭(除非它们像 <a href="Suspend.htm">Suspend</a> 页面中描述的那样进行了豁免).</p>
<p>如果由这个函数所做的更改是合理的将会安装或移除<a href="_InstallKeybdHook.htm">键盘</a>和/或<a href="_InstallMouseHook.htm">鼠标</a>钩子.</p>
<p>尽管 Hotkey 函数不能直接启用或禁用其他脚本中的热键, 但在大多数情况下它可以通过创建或启用相同的热键来<a href="../misc/Override.htm">覆盖</a>它们. 这样是否有效取决于下列因素: 1) 在其他脚本中需要被覆盖的热键是否为<a href="ListHotkeys.htm">钩子热键</a>(非钩子热键总是可以成功覆盖); 2) 最近启动的热键通常优先于其他脚本中的相同热键(因此, 如果脚本是最近启动的, 那么它的覆盖应该总是会成功);  3) 此热键的启用或创建是否会重新激活<a href="_InstallKeybdHook.htm">键盘</a>或<a href="_InstallMouseHook.htm">鼠标</a>钩子(如果是, 那么覆盖总是会成功).</p>
<p>脚本中至少有一个热键时, 它会变成<a href="../Scripts.htm#persistent">持续运行的</a>, 这意味着应该使用 <a href="ExitApp.htm">ExitApp</a> 而不是 Exit 来终止它.</p>

<h2 id="if">Hotkey "If"</h2>
<p>指定随后创建或修改的热键<a href="#variant">变体</a>的条件.</p>
<pre class="Syntax">
<span class="func">Hotkey</span> "If"
<span class="func">Hotkey</span> "If", "Expression"
<span class="func">Hotkey</span> "If", FunctionObject
<span class="func">Hotkey</span> "IfWinActive/Exist" <span class="optional">, WinTitle, WinText</span>
</pre>
<dl>

  <dt id="if-blank">"If"</dt>
  <dd><p>设置空白条件(关闭上下文相关性).</p></dd>

  <dt id="if-expr">"If", "Expression"</dt>
  <dd>
    <p>设置条件为现有的 <a href="_If.htm">#If</a> 表达式. <em>Expression</em> 通常写为<a href="../Language.htm#strings">带引号的字符串</a>, 但也可以是返回与 #If 表达式匹配的文本的变量或表达式. 尽管此函数无法创建新的表达式, 但是它可以使用现有的表达式来创建新的热键. 请参阅 <a href="_If.htm#ExDynamic">#If 示例 4</a>.</p>
    <p class="note"><strong>注意</strong>: Hotkey 函数使用传递给它的字符串, 而不是原始源代码. 脚本加载时会解析<a href="../misc/EscapeChar.htm">转义序列</a>, 因此仅考虑结果字符; 例如, <code>Hotkey "If", 'x = "`t"'</code> 和 <code>Hotkey "If", 'x = "' A_Tab '"'</code> 都等同于 <code>#If x = "`t"</code>.</p>
  </dd>
  
  <dt id="if-func">"If", FunctionObject</dt>
  <dd>
    <p>设置条件为给定的<a href="../objects/Functor.htm">函数对象</a>. 随后创建的热键仅在调用给定函数对象产生非零数字时执行. 类似于 <code>Hotkey "If", "Expression"</code>, 不同之处在于每个热键可以具有许多<a href="#variant">变体</a>(每个对象一个). <em>FunctionObject</em> 必须是具有 <em>call</em> 方法的对象. 函数或 <em>call</em> 方法可以接受一个参数: 热键的<a href="../Variables.htm#ThisHotkey">名称</a>.</p>
    <p>一旦传递给 Hotkey 函数, 该对象将永远不会被删除(但进程退出时, 操作系统将回收内存).</p>
    <p>下面的 <a href="#ExampleIfFn">"三键组合" 示例</a>使用此子命令.</p>
  </dd>

  <dt id="IfWin">"IfWinActive/Exist", WinTitle, WinText</dt>
  <dd>
    <p>根据指示来设置条件.</p>
    <p>"IfWinActive/Exist" 应替换为以下字符串之一以指定条件的类型: "IfWinActive", "IfWinExist", "IfWinNotActive" 或 "IfWinNotExist".</p>
    <p>由于参数是在调用函数之前计算的, 任何变量引用在那一刻都是永久的. 换句话说, 现有的热键看不到变量内容的后续更改.</p>
    <p><em>WinTitle</em> 和 <em>WinText</em> 与 <a href="WinActive.htm">WinActive</a> 或 <a href="WinExist.htm">WinExist</a> 具有相同的含义, 但是它们使用<a href="../Scripts.htm#auto">自动执行段</a>中设置的 <a href="SetTitleMatchMode.htm">SetTitleMatchMode</a> 和 <a href="DetectHiddenWindows.htm">DetectHiddenWindows</a> 的默认设置. 有关详情, 请参阅 <a href="../misc/WinTitle.htm">WinTitle</a>.</p>
  </dd>

</dl>
<h3 id="if-remarks">备注</h3>
<p><code>Hotkey "If"</code> 许在脚本运行时创建或修改上下文相关的<a href="../Hotkeys.htm">热键</a>(相比之下, <a href="_If.htm">#If</a> 指令是与位置有关的, 在脚本开始执行之前生效). 例如:</p>
<pre>Hotkey "IfWinActive", "ahk_class Notepad"
Hotkey "^!e", "MyLabel"  <em>; 创建仅在记事本中有效的热键.</em></pre>
<p>使用 <code>Hotkey "If"</code> 会把当前<a href="../misc/Threads.htm">线程</a>中随后创建或修改的所有<a href="../Hotkeys.htm">热键</a>都变为上下文相关的. 此外, 每个 If 子命令都是互斥的 ; 也就是说, 只有最新的才会生效.</p>
<p>要关闭上下文相关性(也就是说, 使后续创建的热键在所有窗口工作), 指定任何 If 子命令, 但省略参数. 例如: <code>Hotkey "If"</code> 或 <code>Hotkey "IfWinActive"</code>.</p>
<p>在热键或热字串<a href="../misc/Threads.htm">线程</a>使用 <code>Hotkey "If"</code> 之前, Hotkey 函数默认与启动热键或热键的线程拥有相同的上下文. 换句话说, <code>Hotkey A_ThisHotkey, "Off"</code> 将关闭当前热键, 即使它是上下文相关的. 所有其他线程默认创建或修改的是全局热键, 除非在<a href="../Scripts.htm#auto">自动执行段</a>使用 <code>Hotkey "If"</code> 覆盖了该默认值.</p>
<p>当通过 If 子命令或指令禁用鼠标或键盘热键时, 它会执行其原来的功能; 也就是说, 它传递到活动窗口, 就好像不存在热键一样. 然而, 操纵杆热键总是传递到窗口的, 无论它们禁用与否.</p>

<h2 id="variant">变体(副本) 热键</h2>
<p>一个特定的热键可以被创建多次, 如果每个定义有不同的 If 条件. 这被称为 <em>热键变体</em>. 例如:</p>
<pre>Hotkey "IfWinActive", "ahk_class Notepad"
Hotkey "^!c", "MyLabelForNotepad"
Hotkey "IfWinActive", "ahk_class WordPadClass"
Hotkey "^!c", "MyLabelForWordPad"
Hotkey "IfWinActive"
Hotkey "^!c", "MyLabelForAllOtherWindows"</pre>
<p>如果有多个变体符合触发条件, 那么仅触发最早创建的那个. 这种情况的例外是全局变体(不带 If 条件的那个): 它的优先级总是最低的, 仅当其他变体都不触发时它才会被触发.</p>
<p>创建重复热键时, <a href="../Hotkeys.htm#Symbols">修饰符</a>的顺序(如 ^!+#) 没有关系. 例如, <code>"^!c"</code> 等同于 <code>"!^c"</code>. 但是, 按键必须拼写一致. 例如, 用于此目的时, <em>Esc</em> 不同于 <em>Escape</em>(尽管大小写无关). 最后, 任何带有<a href="../Hotkeys.htm#wildcard">通配符前缀(*)</a> 的热键和不带通配符的热键是完全独立的; 例如, <code>"*F1"</code> 和 <code>"F1"</code> 都有他们各自的变体.</p>
<p>有关上下文相关的热键的更多信息, 请参阅 <a href="_If.htm#general-remarks">#If 的备注</a>.</p>

<h2 id="Related">相关</h2>
<p><a href="../Hotkeys.htm#Symbols">Hotkey Symbols</a>, <a href="_If.htm">#If</a>, <a href="_MaxThreadsBuffer.htm">#MaxThreadsBuffer</a>, <a href="_MaxThreadsPerHotkey.htm">#MaxThreadsPerHotkey</a>, <a href="Suspend.htm">Suspend</a>, <a href="IsLabel.htm">IsLabel</a>, <a href="../misc/Threads.htm">Threads</a>, <a href="Thread.htm">Thread</a>, <a href="Critical.htm">Critical</a>, <a href="Gosub.htm">Gosub</a>, <a href="Return.htm">Return</a>, <a href="../objects/Menu.htm">Menu object</a>, <a href="SetTimer.htm">SetTimer</a></p>
<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a></p>
<pre>Hotkey "^!z", "MyLabel"
return

MyLabel:
MsgBox "You pressed " A_ThisHotkey
return</pre>
</div>

<div class="ex" id="ExOther">
<p><a href="#ExOther">#2</a>: 其他的例子</p>
<pre>Hotkey, RCtrl &amp; RShift, AltTab <em>; 让 RCtrl &amp; RShift 执行 Alt-Tab 的功能.</em>
Hotkey "#c", "On"  <em>; 重新启用 Win-C 热键.</em>
Hotkey "$+#c", "Off"  <em>; 禁用 Shift-Win-C 热键.</em>
Hotkey "^!a", , "T5"  <em>; 改变热键以允许 5 个线程.</em>

Hotkey "IfWinActive", "ahk_class Notepad"
Hotkey "^!c", "MyLabelForNotepad"  <em>; 创建仅在记事本中有效的热键 Ctrl-Alt-C.</em></pre>
</div>

<div class="ex" id="ExampleIfFn">
<p><a href="#ExampleIfFn">#3</a>: 这个界面允许你注册简单的三键组合热键:</p>
<pre>
Gui := GuiCreate()
Gui.Add("Text", "xm", "Prefix key:")
Gui.Add("Edit", "yp x100 w100 vPrefix", "Space")
Gui.Add("Text", "xm", "Suffix hotkey:")
Gui.Add("Edit", "yp x100 w100 vSuffix", "f &amp; j")
Gui.Add("Button", "Default", "Register").OnEvent("Click", "RegisterHotkey")
Gui.OnEvent("Close", (*) =&gt; ExitApp())
Gui.OnEvent("Escape", (*) =&gt; ExitApp())
Gui.Show()

RegisterHotkey(this, *) {
    Saved := this.Gui.Submit(false)
    Hotkey "If", () =&gt; GetKeyState(Saved.Prefix)
    Hotkey Saved.Suffix, (*) =&gt; MsgBox(A_ThisHotkey)
}</pre>
</div>

</body>
</html>