<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>NumPut - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The NumPut function stores a number in binary format at the specified address+offset." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>NumPut</h1>
<p>Stores a number in binary format at the specified address+offset.</p>
<pre class="Syntax"><span class="func">NumPut</span> Type, Number, <span class="optional">Type2, Number2, ...</span> Target <span class="optional">, Offset := 0</span></pre>
<p class="warning"><strong>Deprecated:</strong> The syntax below is being considered for removal in favour of the above syntax.</p>
<pre class="Syntax"><span class="func">NumPut</span> Number, Target <span class="optional">, Offset := 0</span><span class="optional">, Type := "UPtr"</span></pre>

<h2>参数</h2>
<dl>

  <dt>Type</dt>
  <dd>
      <p>Type: <a href="../Concepts.htm#strings">String</a></p>
      <p>One of the following strings (defaults to UPtr if omitted):<br>
    UInt, UInt64, Int, Int64, Short, UShort, Char, UChar, Double, Float, Ptr or UPtr</p>
      <p>For all integer types, or when passing pure integers, signed vs. unsigned does not affect the result due to the use of two's complement to represent signed integers.</p>
      <p>These type names must be enclosed in quotes when used as literal strings.</p>
      <p>For details see <a href="DllCall.htm#types">DllCall Types</a>.</p>
    </dd>

  <dt>Number</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>The number to store.</p>
  </dd>

  <dt>Target</dt>
  <dd>
    <p>类型: <a href="../objects/Buffer.htm">对象</a>, <a href="../Concepts.htm#numbers">整数</a>或<a href="../Concepts.htm#variables">变量</a></p>
		<p>A <a href="../objects/Buffer.htm">Buffer</a>-like object, memory address or variable reference.</p>
    <p>Any object which implements <a href="../objects/Buffer.htm#Ptr">Ptr</a> and <a href="../objects/Buffer.htm#Size">Size</a> properties may be used, but this function is optimized for the native <a href="../objects/Buffer.htm">Buffer</a> object. Passing an object with these properties ensures that the function does not write to an invalid memory location (doing so could cause crashes or other unpredictable behaviour).</p>
    <p class="warning"><strong>Deprecated:</strong> If <em>Target</em> is a variable such as <code>MyVar</code> and it contains a string (not a pure number), the address and size of the variable's string buffer is used. Passing a variable containing a string may be treated as an error in a future release. <a href="../objects/Buffer.htm">Buffer</a> objects should be used for structs and other binary data.</p>
    <p>If the variable contains a pure number, that number is assumed to be an address.</p>
	</dd>

  <dt>Offset</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>An offset - in bytes - which is added to <em>Target</em> to determine the target address.</p>
  </dd>

</dl>

<h2>返回值</h2>
<p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
<p>This function returns the address to the right of the last item written. This is often used when writing a sequence of numbers of different types, such as in a structure for use with <a href="DllCall.htm">DllCall</a>. However, in some cases it may be simpler and more efficient to use the multiple-parameter mode as described below.</p>

<h2>General 备注</h2>
<p>A sequence of numbers can be written by repeating <em>Type</em> and <em>Number</em> any number of times after the first <em>Number</em>. Each number is written at the next byte after the previous number, with no padding. When creating a structure for use with <a href="DllCall.htm">DllCall</a>, be aware that some fields may need explicit padding added due to data alignment requirements.</p>
<p>If an integer is too large to fit in the specified <em>Type</em>, its most significant bytes are ignored; e.g. <code>NumPut(257, buf, 0, &quot;Char&quot;)</code> would store the number 1.</p>
<p>An exception may be thrown if the target address is invalid. However, some invalid addresses cannot be detected as such and may cause unpredictable behaviour. Passing a <a href="../objects/Buffer.htm">Buffer</a> object instead of an address ensures that the target address can always be validated.</p>
<p class="warning"><strong>Deprecated:</strong> If only three parameters are present and <em>Number</em> is the first parameter, the third parameter can be either <em>Offset</em> or <em>Type</em>. For example, <code>NumPut(x, buf, "int")</code> is valid.</p>

<h2>相关</h2>
<p><a href="NumGet.htm">NumGet</a>, <a href="DllCall.htm">DllCall</a>, <a href="BufferAlloc.htm">BufferAlloc</a>, <a href="../objects/Buffer.htm">Buffer object</a>, <a href="VarSetCapacity.htm">VarSetCapacity</a></p>

</body>
</html>