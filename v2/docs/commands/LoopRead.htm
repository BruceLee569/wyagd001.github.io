<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Loop Read - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The Loop Read statement retrieves the lines in a text file, one at a time." />
<meta name="ahk:equiv-v1" content="commands/LoopReadFile.htm" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>Loop Read</h1>

<p>检索文本文件中的行, 每次一行.</p>

<pre class="Syntax"><span class="func">Loop Read</span> InputFile <span class="optional">, OutputFile</span></pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>InputFile</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>需要在循环中读取其内容的文本文件的名称, 如果未指定绝对路径, 则假定在 <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> 中. 文件的行结束符可以是回车和换行符(`r`n), 也可以只是换行符(`n), 或只是回车(`r).</p>
  </dd>

  <dt>OutputFile</dt>
  <dd>
      <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
      <p>在循环期间保持打开的文件的名称, 如果未指定绝对路径, 则假定在 <a href="../Variables.htm#WorkingDir">A_WorkingDir</a> 中.</p>
      <p>在循环的主体内, 使用 <a href="FileAppend.htm">FileAppend</a> 函数, 不带 <em>Filename</em> 参数(即省略它) 来追加到这个特殊的文件. 以这种方式追加到一个文件比使用 2 个参数模式的 <a href="FileAppend.htm">FileAppend</a> 执行地更好, 因为每次操作时不需要关闭文件和再重新打开. 如果需要的话, 记得在文本后加入换行符(`n) 或回车符和换行符(`r`n).</p>
      <p>如果没有向文件写入任何内容, 文件就不会被打开. 如果循环执行零迭代或从未调用 <a href="FileAppend.htm">FileAppend</a>, 就会发生这种情况.</p>
      <p><strong>选项</strong>: The end of line (EOL) translation mode and output file encoding depend on which options are passed in the opening call to <a href="FileAppend.htm">FileAppend</a> (i.e. the first call which omits <em>Filename</em>). Subsequent calls ignore the <em>Options</em> parameter. EOL translation is not performed by default; that is, linefeed (`n) characters are written as-is unless the <code>"`n"</code> option is present.</p>
      <p><strong>Standard Output (stdout)</strong>: Specifying an asterisk (*) for <em>OutputFile</em> sends any text written by <a href="FileAppend.htm">FileAppend</a> to standard output (stdout). Although such output can be redirected to a file, piped to another EXE, or captured by <a href="_ErrorStdOut.htm">fancy text editors</a>, it will not appear at the command prompt it was launched from. See <a href="FileAppend.htm">FileAppend</a> for more details.</p>
  </dd>

</dl>

<h2 id="Remarks">备注</h2>
<p>A file-reading loop is useful when you want to operate on each line contained in a text file, one at a time. The file is kept open for the entire operation to avoid having to re-scan each time to find the next line.</p>
<p id="LoopReadLine">The built-in variable <strong>A_LoopReadLine</strong> exists within any file-reading loop. It contains the contents of the current line excluding the carriage return and linefeed (`r`n) that marks the end of the line. If an inner file-reading loop is enclosed by an outer file-reading loop, the innermost loop's file-line will take precedence.</p>
<p>Lines up to 65,534 characters long can be read. If the length of a line exceeds this, its remaining characters will be read during the next loop iteration.</p>
<p><a href="StrSplit.htm">StrSplit</a> or a <a href="LoopParse.htm">parsing loop</a> is often used inside a file-reading loop to parse the contents of each line retrieved from <em>InputFile</em>. 例如, if <em>InputFile</em>'s lines are each a series of tab-delimited fields, those fields can individually retrieved as in this example:</p>
<pre>Loop read, "C:\Database Export.txt"
{
    Loop parse, A_LoopReadLine, A_Tab
    {
        MsgBox "Field number " A_Index " is " A_LoopField "."
    }
}</pre>
<p>To load an entire file into a variable, use <a href="FileRead.htm">FileRead</a> because it performs much better than a loop (especially for large files).</p>
<p>To have multiple files open simultaneously, use <a href="FileOpen.htm">FileOpen</a>.</p>
<p>请参阅 <a href="Loop.htm">Loop</a> 了解关于<a href="Block.htm">区块</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a> 和 A_Index 变量(其存在于各种类型的循环中) 的相关信息.</p>
<p>To control how the file is decoded when no byte order mark is present, use <a href="FileEncoding.htm">FileEncoding</a>.</p>

<h2 id="Related">相关</h2>
<p><a href="FileEncoding.htm">FileEncoding</a>, <a href="FileOpen.htm">FileOpen</a>/<a href="../objects/File.htm">File Object</a>, <a href="FileRead.htm">FileRead</a>, <a href="FileAppend.htm">FileAppend</a>, <a href="Sort.htm">Sort</a>, <a href="Loop.htm">Loop</a>, <a href="Break.htm">Break</a>, <a href="Continue.htm">Continue</a>, <a href="Block.htm">Blocks</a>, <a href="FileSetAttrib.htm">FileSetAttrib</a>, <a href="FileSetTime.htm">FileSetTime</a></p>

<h2 id="Examples">示例</h2>
<div class="ex" id="ExFileAppend">
<p><a href="#ExFileAppend">#1</a>: Only those lines of the 1st file that contain the word FAMILY will be written to the 2nd file. Uncomment the first line to overwrite rather than append to any existing file.</p>
<pre><em>;FileDelete "C:\Docs\Family Addresses.txt"</em>

Loop read, "C:\Docs\Address List.txt", "C:\Docs\Family Addresses.txt"
{
    if InStr(A_LoopReadLine, "family")
        FileAppend(A_LoopReadLine "`n")
}</pre>
</div>

<div class="ex" id="ExLastLine">
<p><a href="#ExLastLine">#2</a>: 获取文本文件的最后一行.</p>
<pre>Loop read, "C:\Log File.txt"
    last_line := A_LoopReadLine  <em>; 当循环结束时, 这里会保持最后一行的内容.</em></pre>
</div>

<div class="ex" id="ExURL">
<p><a href="#ExURL">#3</a>: 尝试从文本或 HTML 文件中提取所有 FTP 和 HTTP URL 的有效脚本:</p>
<pre>
SourceFile := FileSelect(3,, "Pick a text or HTML file to analyze.")
if SourceFile = ""
    return  <em>; This will exit in this case.</em>

SplitPath SourceFile,, SourceFilePath,, SourceFileNoExt
DestFile := SourceFilePath "\" SourceFileNoExt " Extracted Links.txt"

if FileExist(DestFile)
{
    Result := MsgBox("Overwrite the existing links file? Press No to append to it.`n`nFILE: " DestFile,, 4)
    if Result = "Yes"
        FileDelete DestFile
}

LinkCount := 0
Loop read, SourceFile, DestFile
{
    URLSearch(A_LoopReadLine)
}
MsgBox LinkCount ' links were found and written to "' DestFile '".'
return


URLSearch(URLSearchString)
{
    <em>; It's done this particular way because some URLs have other URLs embedded inside them:
    ; Find the left-most starting position:</em>
    URLStart := 0  <em>; Set starting default.</em>
    for URLPrefix in ["https://", "http://", "ftp://", "www."]
    {
        ThisPos := InStr(URLSearchString, URLPrefix)
        if !ThisPos  <em>; This prefix is disqualified.</em>
            continue
        if !URLStart
            URLStart := ThisPos
        else <em>; URLStart has a valid position in it, so compare it with ThisPos.</em>
        {
            if ThisPos &amp;&amp; ThisPos &lt; URLStart
                URLStart := ThisPos
        }
    }

    if !URLStart  <em>; No URLs exist in URLSearchString.</em>
        return

    <em>; Otherwise, extract this URL:</em>
    URL := SubStr(URLSearchString, URLStart)  <em>; Omit the beginning/irrelevant part.</em>
    Loop parse, URL, " `t&lt;&gt;"  <em>; Find the first space, tab, or angle bracket (if any).</em>
    {
        URL := A_LoopField
        break  <em>; i.e. perform only one loop iteration to fetch the first "field".</em>
    }
    <em>; If the above loop had zero iterations because there were no ending characters found,
    ; leave the contents of the URL var untouched.

    ; If the URL ends in a double quote, remove it.  For now, StrReplace is used, but
    ; note that it seems that double quotes can legitimately exist inside URLs, so this
    ; might damage them:</em>
    URLCleansed := StrReplace(URL, '"')
    FileAppend URLCleansed "`n"
    global LinkCount += 1

    <em>; See if there are any other URLs in this line:</em>
    CharactersToOmit := StrLen(URL)
    CharactersToOmit += URLStart
    URLSearchString := SubStr(URLSearchString, CharactersToOmit)
    
    <em>; Recursive call to self:</em>
    URLSearch(URLSearchString)
}
</pre>
</div>

</body>
</html>