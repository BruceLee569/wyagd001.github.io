<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Throw - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The Throw statement signals the occurrence of an error. This signal can be caught by a try-catch statement." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>Throw</h1>

<p>发生错误时发出信号. 此信号可以被 <a href="Try.htm">try</a>-<a href="Catch.htm">catch</a> 语句捕获.</p>

<pre class="Syntax"><span class="func">Throw</span> <span class="optional">Value</span></pre>
<h2 id="Parameters">参数</h2>
<dl>

  <dt>Value</dt>
  <dd>
    <p>要抛出的值; 通常是一个 <a href="../objects/Error.htm">Error</a> 对象. 例如:</p>
      <pre>throw ValueError("Parameter #1 invalid", -1, theBadParam)</pre>
      <p>Values of all kinds can be thrown, but if <a href="Catch.htm">Catch</a> is used without specifying a class (or <a href="Try.htm">Try</a> is used without <a href="Catch.htm">Catch</a> or <a href="Finally.htm">Finally</a>), it will only catch instances of the <a href="../objects/Error.htm">Error</a> class.</p>
      <p>While execution is within a <a href="Catch.htm">Catch</a>, <em>Value</em> can be omitted to re-throw the caught value (avoiding the need to specify an output variable just for that purpose). This is supported even within a nested <em>try-finally</em>, but not within a nested <em>try-catch</em>. The line with <code>throw</code> does not need to be physically contained by the <em>catch</em> statement's body; it can be used by a called function.</p>
  </dd>

</dl>

<h2 id="Remarks">备注</h2>
<p>如果表达式被括在括号中, 则 <code>throw</code> 后的空格或制表符是可选的 , 如 <code>throw(Error())</code> 所示.</p>
<p>A thrown value or runtime error can be <em>caught</em> by <a href="Try.htm">Try</a>-<a href="Catch.htm">Catch</a>. In such cases, execution is transferred into the <em>catch</em> statement or to the next statement after the <em>try</em>. If a thrown value is not caught, the following occurs:</p>
<ul>
  <li>任何激活的 <a href="OnError.htm">OnError</a> 回调都会被调用. 每个回调可以检查 <em>Value</em> 并抑制或允许进一步的回调和默认处理.</li>
  <li>默认情况下, 会根据抛出的内容显示错误信息. 如果 <em>Value</em> 是一个<a href="../objects/Object.htm">对象</a> 并且拥有一个名为 <em>Message</em> 的值属性, 那么它的值将被用作消息. 如果 <em>Value</em> 是一个非数字字符串, 则使用它作为消息. 在任何其他情况下, 都会使用一个默认的消息. 如果 <em>Value</em> 是数字, 则显示在默认消息的下方.</li>
  <li>The thread exits. Note that this does not necessarily occur for continuable errors, but <em>throw</em> is never continuable.</li>
</ul>

<h2 id="Related">相关</h2>
<p><a href="../objects/Error.htm">Error 对象</a>, <a href="Try.htm">Try</a>, <a href="Catch.htm">Catch</a>, <a href="Finally.htm">Finally</a>, <a href="OnError.htm">OnError</a></p>

<h2 id="Examples">示例</h2>
<p>请参阅 <a href="Try.htm#Examples">Try</a>.</p>

</body>
</html>