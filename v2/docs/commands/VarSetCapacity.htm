<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>VarSetCapacity - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The VarSetCapacity function enlarges a variable's holding capacity or frees its memory, which is only necessary for unusual circumstances such as DllCall." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>VarSetCapacity</h1>

<p>增加变量的容量或释放其内存. 通常, 这仅在特殊情况下(如 <a href="DllCall.htm">DllCall</a>) 才有必要.</p>
<p class="warning"><strong>不推荐:</strong> 程序的未来版本中可能会更改或删除此函数. 有关详情, 请参阅<a href="#Remarks">备注</a>.</p>
<pre class="Syntax">GrantedCapacity := <span class="func">VarSetCapacity</span>(TargetVar <span class="optional">, RequestedCapacity, FillByte</span>)</pre>

<h2 id="Parameters">参数</h2>
<dl>

  <dt>TargetVar</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#variables">变量</a></p>
    <p>变量的引用. 例如: <code>VarSetCapacity(MyVar, 1000)</code>. 这也可以是动态变量, 例如 <code>Array%i%</code> 或<a href="../Functions.htm#ByRef">函数的 ByRef 参数</a>.</p>
  </dd>

  <dt>RequestedCapacity</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>如果省略, 则函数将返回变量当前的容量且不会改变其的内容. 否则, 变量中当前的任何内容都将丢失(变量被置空).</p>
    <p>为 <em>RequestedCapacity</em> 指定调整后变量所能容纳的字节数. 对于 Unicode 字符串, 这应该是长度乘以 2. <em>RequestedCapacity</em> 不包含内部零终止符. 例如, 指定 1 将允许变量除其内部终止符外最多保留一个字节. 注意: 如果脚本稍后为其分配较大的值, 则该变量将自动扩展.</p>
    <p>Since this function is often called simply to ensure the variable has a certain minimum capacity, for performance reasons, it shrinks the variable only when <em>RequestedCapacity</em> is 0. In other words, if the variable's capacity is already greater than <em>RequestedCapacity</em>, it will not be reduced (but the variable will still made blank for consistency).</p>
    <p>Therefore, to explicitly shrink a variable, first free its memory with <code>VarSetCapacity(Var, 0)</code> and then use <code>VarSetCapacity(Var, NewCapacity)</code> -- or simply let it auto-expand from zero as needed.</p>
    <p>For performance reasons, freeing a variable whose previous capacity was less than 64 characters (128 bytes in Unicode builds) might have no effect because its memory is of a permanent type. In this case, the current capacity will be returned rather than 0.</p>
    <p>For performance reasons, the memory of a variable whose capacity is less than 4096 bytes is not freed by storing an empty string in it (e.g. <code>Var := &quot;&quot;</code>). However, <code>VarSetCapacity(Var, 0)</code> does free it.</p>
    <p id="neg1">Specify -1 for <em>RequestedCapacity</em> to update the variable's internally-stored string length to the length of its current contents. This is useful in cases where the variable has been altered indirectly, such as by passing its <a href="../Variables.htm#amp">address</a> via <a href="DllCall.htm">DllCall</a>. In this mode, VarSetCapacity returns the length in bytes rather than the capacity.</p>
  </dd>

  <dt>FillByte</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
    <p>This parameter is normally omitted, in which case the memory of the target variable is not initialized (instead, the variable is simply made blank as described above). Otherwise, specify a number between 0 and 255. Each byte in the target variable's memory area (its current capacity, which might be greater than <em>RequestedCapacity</em>) is set to that number. Zero is by far the most common value, which is useful in cases where the variable will hold raw binary data such as a <a href="DllCall.htm#struct">DllCall structure</a>.</p>
  </dd>

</dl>

<h2 id="Return_Value">返回值</h2>
<p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
<p>This function returns the number of bytes that Var can now hold, which will be greater than or equal to <em>RequestedCapacity</em>.</p>

<h2>Failure</h2>
<p>An exception is thrown under any of the following conditions:</p>
<ul>
  <li><em>VarName</em> is not a valid variable reference. It is not possible to pass an <a href="../Objects.htm#Usage_Objects">object property</a> or <a href="../Variables.htm#BuiltIn">built-in variable</a> by reference, and therefore not valid to pass one to this function.</li>
  <li>The system has insufficient memory to make the change (very rare).</li>
  <li><em>RequestedCapacity</em> is less than -1 or (for 32-bit) greater than or equal to 2**31 (2GB).</li>
</ul>

<h2 id="Remarks">备注</h2>
<p>The <a href="../objects/Buffer.htm">Buffer</a> object offers superior clarity and flexibility when dealing with binary data, structures, DllCall and similar. For instance, a Buffer object can be assigned to a property or array element or be passed to or returned from a function without copying its contents.</p>
<p>VarSetCapacity controls the size of a variable's string buffer, which should not be used to create structures or store other binary data. 将来的更新可能会删除此功能或将其更改为接受新的字符大小而不是字节大小.</p>
<p>This function can be used to enhance performance when building a string by means of gradual concatenation. This is because multiple automatic resizings can be avoided when you have some idea of what the string's final length will be. In such a case, <em>RequestedCapacity</em> need not be accurate: if the capacity is too small, performance is still improved and the variable will begin auto-expanding when the capacity has been exhausted. If the capacity is too large, some of the memory is wasted, but only temporarily because all the memory can be freed after the operation by means of <code>VarSetCapacity(Var, 0)</code> or <code>Var := &quot;&quot;</code>.</p>

<h2 id="Related">相关</h2>
<p><a href="BufferAlloc.htm">BufferAlloc</a>, <a href="../objects/Buffer.htm">Buffer object</a>, <a href="DllCall.htm">DllCall</a>, <a href="NumPut.htm">NumPut</a>, <a href="NumGet.htm">NumGet</a></p>

<h2 id="Examples">示例</h2>
<div class="ex" id="ExBasic">
<p><a href="#ExBasic">#1</a>: 通过确保 <em>MyVar</em> 有足够的空间来进行优化.</p>
<pre>VarSetCapacity(MyVar, 10240000)  <em>; ~10 MB</em>
Loop
{
    <em>; ...</em>
    MyVar .= StringToConcatenate
    <em>; ...</em>
}</pre>
</div>

<div class="ex" id="ExString">
<p><a href="#ExString">#2</a></p>
<pre><em>; 计算字符串需要的缓冲空间.</em>
max_chars := 500
max_bytes := max_chars * 2

Loop 2
{
    <em>; 分配用于 DllCall 的空间.</em>
    VarSetCapacity(buf, max_bytes)

    if (A_Index = 1)
        <em>; 通过 DllCall 间接修改变量.</em>
        DllCall("wsprintf", <span class="red">"Ptr", &amp;buf</span>, "Str", "0x%08x", "UInt", 4919)
    else
        <em>; 使用 "str" 来自动更新长度:</em>
        DllCall("wsprintf", <span class="blue">"Str", buf</span>, "Str", "0x%08x", "UInt", 4919)

    <em>; 连接字符串以演示为什么需要更新长度:</em>
    wrong_str := buf . "&lt;end&gt;"
    wrong_len := StrLen(buf)

    <em>; 更新变量的长度.</em>
    VarSetCapacity(buf, -1)

    right_str := buf . "&lt;end&gt;"
    right_len := StrLen(buf)

    MsgBox
    (
    "Before updating
      String: " wrong_str "
      Length: " wrong_len "

    After updating
      String: " right_str "
      Length: " right_len
    )
}
</pre>
</div>

</body>
</html>