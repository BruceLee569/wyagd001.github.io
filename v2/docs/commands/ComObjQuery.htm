<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>ComObjQuery - 语法 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="The ComObjQuery function queries a COM object for an interface or service." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="../static/theme.css" rel="stylesheet" type="text/css" />
<script src="../static/content.js" type="text/javascript"></script>
<script type="text/javascript">$(function(){0<=window.navigator.userAgent.toLowerCase().indexOf("ucbrowser")&&CaoNiMaDeUc()})</script>
</head>
<body>

<h1>ComObjQuery</h1>
<p>Queries a COM object for an interface or service.</p>
<pre class="Syntax">InterfacePointer := <span class="func">ComObjQuery</span>(ComObject, <span class="optional">SID,</span> IID)</pre>

<h2>参数</h2>
<dl>

  <dt>ComObject</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#objects">对象</a> or <a href="../Concepts.htm#numbers">Integer</a></p>
    <p>A COM wrapper object or raw interface pointer.</p>
  </dd>

  <dt>IID</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>An interface identifier (GUID) in the form "{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}".</p>
  </dd>

  <dt>SID</dt>
  <dd>
    <p>类型: <a href="../Concepts.htm#strings">字符串</a></p>
    <p>A service identifier in the same form as IID. When omitting this parameter, also omit the comma.</p>
  </dd>

</dl>

<h2>返回值</h2>
<p>类型: <a href="../Concepts.htm#numbers">整数</a></p>
<p>This function returns the pointer to the requested interface. If the pointer cannot be retrieved, zero is returned.</p>

<h2>备注</h2>
<p>In its two-parameter mode, this function is equivalent to <a href="http://msdn.microsoft.com/en-us/library/ms682521.aspx">IUnknown::QueryInterface</a>. When SID and IID are both specified, it internally queries for the <a href="http://msdn.microsoft.com/en-us/library/cc678965.aspx">IServiceProvider</a> interface, then calls <a href="http://msdn.microsoft.com/en-us/library/cc678966.aspx">IServiceProvider::QueryService</a>. In either case, the return value is either zero or a pointer to the requested interface. Generally this pointer must be <a href="ObjAddRef.htm">released</a> when the script is finished with it.</p>

<h2>相关</h2>
<a href="ObjAddRef.htm">ObjRelease</a>, <a href="ComObjCreate.htm">ComObjCreate</a>, <a href="ComObjGet.htm">ComObjGet</a>, <a href="ComObjActive.htm">ComObjActive</a>, <a href="ComObjError.htm">ComObjError</a>

<h2>示例</h2>
<div class="ex" id="ExClassName">
<p><a href="#ExClassName">#1</a>: 确定对象的类名.</p>
<pre>obj := ComObjCreate("Scripting.Dictionary")

MsgBox "Interface name: " ComObjType(obj, "name")

IID_IProvideClassInfo := "{B196B283-BAB4-101A-B69C-00AA00341D07}"

<em>; 请求对象的 IProvideClassInfo 接口的指针.</em>
if !(pci := ComObjQuery(obj, IID_IProvideClassInfo))
{
    MsgBox "IProvideClassInfo interface not supported."
    return
}

<em>; 调用 GetClassInfo 来获取 ITypeInfo 接口的指针.</em>
DllCall(vtable(pci, 3), "ptr", pci, "ptr*", ti)

<em>; 调用 GetDocumentation 来获取对象的完整类型名称.</em>
DllCall(vtable(ti, 12), "ptr", ti, "int", -1, "ptr*", name, "ptr", 0, "ptr", 0, "ptr", 0)

<em>; 转换 BSTR 指针为可用的字符串.</em>
name := StrGet(name, "UTF-16")

<em>; 释放原始接口指针.</em>
ObjRelease(ti)
ObjRelease(pci)

<em>; 显示类型名称!</em>
MsgBox "Class name: " name

vtable(ptr, n) {
    <em>; NumGet(ptr+0) 返回对象的虚函数表的地址(简称为 vtable).
    ; 表达式的其余部分从
    ; vtable 获取第 n 个函数的地址.</em>
    return NumGet(NumGet(ptr+0), n*A_PtrSize)
}
</pre>
</div>

<div class="ex" id="ExIE">
<p><a href="#ExIE">#2</a>: 自动化现有的 Internet Explorer 窗口.</p>
<pre>sURL := "https://autohotkey.com/boards/"
if WebBrowser := GetWebBrowser()
    WebBrowser.Navigate(sURL)
return

GetWebBrowser()
{
    <em>; 获取指向顶部 IE 窗口的文档对象的原始指针.</em>
    static msg := DllCall("RegisterWindowMessage", "Str", "WM_HTML_GETOBJECT")
    lResult := SendMessage(msg, 0, 0, "Internet Explorer_Server1", "ahk_class IEFrame")
    if !lResult
        return  <em>; 未找到 IE.</em>
    DllCall("oleacc\ObjectFromLresult", "Ptr", lResult
        , "Ptr", GUID(IID_IHTMLDocument2,"{332C4425-26CB-11D0-B483-00C04FD90119}")
        , "Ptr", 0, "Ptr*", pdoc)
    
    <em>; 查询 WebBrowserApp 服务. 在这种特殊情况中,
    ; SID 和 IID 相同, 但不总是如此.</em>
    static IID_IWebBrowserApp := "{0002DF05-0000-0000-C000-000000000046}"
    static SID_SWebBrowserApp := IID_IWebBrowserApp
    pweb := ComObjQuery(pdoc, SID_SWebBrowserApp, IID_IWebBrowserApp)
    
    <em>; 释放文档对象指针.</em>
    ObjRelease(pdoc)
    
    <em>;  返回包装过的可用的 WebBrowser 对象:</em>
    static VT_DISPATCH := 9, F_OWNVALUE := 1
    return ComObject(VT_DISPATCH, pweb, F_OWNVALUE)
}

GUID(ByRef GUID, sGUID) <em>; 转换字符串为二进制的 GUID 并返回其地址.</em>
{
    VarSetCapacity(GUID, 16, 0)
    return DllCall("ole32\CLSIDFromString", "WStr", sGUID, "Ptr", &amp;GUID) &gt;= 0 ? &amp;GUID : ""
}
</pre>
</div>

</body>
</html>