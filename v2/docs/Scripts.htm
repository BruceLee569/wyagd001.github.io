<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>Scripts - 定义 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="Learn details about scripts in general, splitting long lines, compiling a script, passing command line parameters, codepage and debugging." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
</head>
<body>

<h1>Scripts</h1>
<p>相关话题:</p>
<ul>
  <li><a href="Program.htm">程序的使用</a>: 在一般情况下, 如何使用 AutoHotkey.</li>
  <li><a href="Concepts.htm">概念和约定</a>: AutoHotkey 使用的各种概念的通俗解释.</li>
  <li><a href="Language.htm">脚本语言</a>: 有关语法的具体详细信息(如何编写脚本).</li>
</ul>

<h2>目录</h2>
<ul>
  <li><a href="#intro">简介</a></li>
  <li><a href="#auto">脚本顶部(自动执行段)</a>: 当脚本启动时, 会自动执行的部分.</li>
  <li><a href="#continuation">把过长的行分割成一系列短行</a>: 这样可以提高脚本的可读性和可维护性.</li>
  <li><a href="#ahk2exe">把脚本转换成 EXE(ahk2exe)</a>: 把 .ahk 脚本转换成可以在任何 PC 上运行的 .exe 文件.</li>
  <li><a href="#cmd">向脚本传递命令行参数</a>: A_Args 变量包含了传入的参数.</li>
  <li><a href="#cp">脚本文件代码页</a>: 在脚本中可靠地使用非 ASCII 字符.</li>
  <li><a href="#debug">调试脚本</a>: 如何找出无法正常工作的脚本中的问题.</li>
</ul>
<h2 id="intro">简介</h2>
<p>每个脚本都是纯文本文件, 其中包含了可由程序(AutoHotkey.exe) 执行的文本行. 脚本中还可以包含<a href="Hotkeys.htm">热键</a>和<a href="Hotstrings.htm">热字串</a>或者甚至完全由它们组成. 不过, 在不包含热键和热字串时, 脚本会在启动后从上往下按顺序执行其中的函数.</p>
<p>程序会把脚本逐行加载到内存中, 每行最多可以包含 16,383 个字符. 在加载过程中, 脚本会被<a href="misc/Performance.htm">优化</a>和检查. 将列出所有的语法错误, 更正它们后脚本才能运行.</p>
<h2 id="auto">脚本顶部(自动执行段)</h2>
<p>脚本加载完成后, 它会从顶行开始执行, 直到遇到 <a href="commands/Return.htm">Return</a>, <a href="commands/Exit.htm">Exit</a>, <a href="Hotkeys.htm">热键/热字串标签</a>或脚本的底部(无论最先遇到哪个). 脚本的这个顶端部分被称为 <em>自动执行段</em>.</p>
<p class="warning"><strong>注意:</strong> 虽然脚本的 <em>第一个</em> 热键/热字串标签与 <a href="commands/Return.htm">return(返回)</a> 的效果相同, 但其他热键和标签却没有.</p>
<p id="persistent">脚本没有<a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, 可见的 <a href="objects/Gui.htm">GUIs</a>, 激活的<a href="commands/OnMessage.htm">消息监视</a>, 激活的<a href="commands/SetTimer.htm">计时器</a>, 激活的<a href="commands/OnClipboardChange.htm">OnClipboardChange</a> 回调函数, 自定义托盘<a href="objects/Menu.htm">菜单项目</a> 和 <a href="commands/_Persistent.htm">#Persistent</a> 指令, 那么它会在自动执行段完成后终止. 否则, 它会以空闲状态继续运行, 从而对热键, 热字串, <a href="objects/GuiOnEvent.htm">GUI 事件</a>, <a href="objects/Menu.htm">自定义菜单项目</a>和<a href="commands/SetTimer.htm">计时器</a>这些事件进行响应. 如果在自动执行段完成后, 这些条件发生了改变(例如, 禁用了最后一个计时器), 脚本可能会在最后一个正在运行的线程完成后或最后一个 GUI 关闭后退出.</p>
<p>每个由<a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, <a href="objects/Menu.htm">菜单项</a>, <a href="objects/GuiOnEvent.htm">GUI 事件</a>或<a href="commands/SetTimer.htm">计时器</a>启动的<a href="misc/Threads.htm">线程</a>以以下属性的默认值重新开始, 这些值在自动执行部分中设置. 如果没有设置, 则使用标准的默认值(与下面每个页面中注明的一样): <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>,  <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="commands/SendMode.htm">SendMode</a>, <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>,  <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>,
  <a href="commands/SetWinDelay.htm">SetWinDelay</a>,
  <a href="commands/SetControlDelay.htm">SetControlDelay</a>,
  <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>,
  <a href="commands/CoordMode.htm">CoordMode</a>,
  <a href="commands/SetStoreCapslockMode.htm">SetStoreCapsLockMode</a>, <a href="commands/StringCaseSense.htm">StringCaseSense</a>, <a href="commands/Thread.htm">Thread</a> 和 <a href="commands/Critical.htm">Critical</a>.</p>
<p>如果自动执行段执行了很长时间才结束(或永不结束), 上面这些设置的默认值将在 100 毫秒后自动生效. 当自动执行段最终结束(如果可能) 时, 在自动执行段末尾生效的那些设置才更新为默认值. 因此, 通常最好在包含<a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, <a href="commands/SetTimer.htm">计时器</a>或<a href="objects/Menu.htm">自定义菜单项</a>的脚本顶部设置自己想要的默认值. 还要注意, 每个<a href="misc/Threads.htm">线程</a>会保存它自己的上述设置的集合. 在一个线程中对这些设置的改变不会影响其他<a href="misc/Threads.htm">线程</a>.</p>

<p>除空格外, <code>/*</code> 必须出现在行首, 而 <code>*/</code> 只能出现在行首或行尾. 省略 <code>*/</code> 也是有效的, 在这种情况下, 文件的其余部分被注释掉.</p>
<h2 id="continuation">把长行分割成一系列短行</h2>
<p>长行可以分成一些小行, 以提高可读性和可维护性. 这样不会降低脚本的执行速度, 因为在脚本启动时这些短行会在内存中合并起来.</p>
<p>有三种方法, 通常可以组合使用:</p>
<ul>
  <li><a href="#continuation-line">延续前缀</a>: 以表达式运算符开始一行, 将其连接到前一行.</li>
  <li><a href="#continuation-expr">延续闭环</a>: 在大多数情况下, 括在 (), [] 或 {} 中的子表达式可以自动跨越多行.</li>
  <li><a href="#continuation-section">延续片段</a>: 标记一组要合并在一起的行, 并添加其他选项, 例如在行之间插入什么文本(或代码).</li>
</ul>
<p id="continuation-line"><strong>Continuation prefix</strong>: A line that starts with a comma or any other <a href="Variables.htm#Operators">expression operator</a> (except ++ and --) is automatically merged with the line directly above it. In the following example, the second line is appended to the first because it begins with a comma:</p>
<pre>FileAppend "This is the text to append.`n"   <em>; A comment is allowed here.</em>
    <strong>,</strong> A_ProgramFiles "\SomeApplication\LogFile.txt"  <em>; Comment.</em></pre>
<p>Similarly, the following lines would get merged into a single line because the last two start with &quot;and&quot; or &quot;or&quot;:</p>
<pre>if (Color = &quot;Red&quot; or Color = &quot;Green&quot;  or Color = &quot;Blue&quot;   <em>; Comment.</em>
    <strong>or</strong> Color = &quot;Black&quot; or Color = &quot;Gray&quot; or Color = &quot;White&quot;)   <em>; Comment.</em>
    <strong>and</strong> ProductIsAvailableInColor(Product, Color)   <em>; Comment.</em></pre>
<p>The <a href="Variables.htm#ternary">ternary operator</a> is also a good candidate:</p>
<pre>ProductIsAvailable := (Color = &quot;Red&quot;)
    <strong>?</strong> false  <em>; We don't have any red products, so don't bother calling the function.</em>
    <strong>:</strong> ProductIsAvailableInColor(Product, Color)</pre>
<p>Although the indentation used in the examples above is optional, it might improve clarity by indicating which lines belong to ones above them. Also, it is not necessary to include extra spaces for lines starting with the words &quot;AND&quot; and &quot;OR&quot;; the program does this automatically. Finally, blank lines or <a href="Language.htm#comments">comments</a> may be added between or at the end of any of the lines in the above examples.</p>
<p id="continuation-expr"><strong>Continuation by enclosure</strong>: If a line contains an expression or function/property definition with an unclosed <code>(</code>/<code>[</code>/<code>{</code>, it is joined with subsequent lines until the number of opening and closing symbols balances out. In other words, a sub-expression enclosed in parentheses, brackets or braces can automatically span multiple lines in most cases. 例如:</p>
<pre>
myarray := [  <em>; The opening bracket must be on this line.</em>
  "item 1",
  "item 2",
]
MsgBox(
    "The value of item 2 is " myarray[2],
    "Title",
    "ok iconi"
    )
</pre>
<p>Continuation expressions may contain both types of <a href="Language.htm#comments">comments</a>.</p>
<p>Continuation expressions may contain normal <a href="#continuation-section">continuation sections</a>. Therefore, as with any line containing an expression, if a line begins with a non-escaped open parenthesis (<code>(</code>), it is considered to be the start of a continuation section unless there is a closing parenthesis (<code>)</code>) on the same line.</p>
<p>Quoted strings cannot span multiple lines using this method alone. However, 请参阅 above.</p>
<p>Brace (<code>{</code>) at the end of a line does not cause continuation if the program determines that it should be interpreted as the beginning of a block (<a href="commands/Block.htm#otb">OTB style</a>) rather than the start of an <a href="Language.htm#object-literal">object literal</a>. Specifically (in descending order of precedence):</p>
<ul>
  <li>A brace is never interpreted as the beginning of a block if it is preceded by an unclosed <code>(</code>/<code>[</code>/<code>{</code>, since that would produce an invalid expression. 例如, the brace in <code>If ({</code> is the start of an object literal.</li>
  <li>An object literal cannot legally follow <code>)</code> or <code>]</code>, so if the brace follows either of those symbols (excluding whitespace), it is interpreted as the beginning of a block (such as for a function or property definition).</li>
  <li>For <a href="Language.htm#control-flow">control flow statements</a> which require a body (and therefore support OTB), the brace can be the start of an object literal only if it is preceded by an operator, such as <code>:= {</code> or <code>for x <strong>in</strong> {</code>. In particular, the brace in <code>Loop {</code> is always block-begin, and <code>If {</code> and <code>While {</code> are always errors.</li>
</ul>
<p>A brace can be safely used for line continuation with any function call, expression or control flow statement which does not require a body. 例如:</p>
<pre>myfn() {
    return {
        key: "value"
    }
}</pre>
<p id="continuation-section"><strong>Continuation section</strong>: This method should be used to merge a large number of lines or when the lines are not suitable for the other methods. Although this method is especially useful for <a href="Hotstrings.htm">auto-replace hotstrings</a>, it can also be used with any <a href="Variables.htm#Expressions">expression</a>. 例如:</p>
<pre><em>; 示例 #1:</em>
Var := "
(
Line 1 of the text.
Line 2 of the text. By default, a linefeed (`n) is present between lines.
Additionally, "quote marks" are <a href="#continuation_quotes">automatically escaped</a> when appropriate.
)"

<em>; 示例 #2:</em>
FileAppend "
(
A line of text.
By default, the hard carriage return (Enter) between the previous line and this one will be written to the file.
	This line is indented with a tab; by default, that tab will also be written to the file.
)", A_Desktop "\My File.txt"</pre>
<p>In the examples above, a series of lines is bounded at the top and bottom by a pair of parentheses. This is known as a <em>continuation section</em>. Notice that any code after the closing parenthesis is also joined with the other lines (without any delimiter), but the opening and closing parentheses are not included.</p>
<p>If the line above the continuation section ends with a <a href="Concepts.htm#names">name</a> character and the section does not start inside a quoted string, a single space is automatically inserted to separate the name from the contents of the continuation section.</p>
<p id="continuation_quotes">Quote marks are automatically escaped (i.e. they are interpreted as literal characters) if the continuation section starts inside a quoted string, as in the examples above. Otherwise, quote marks act as they do normally; that is, continuation sections can contain expressions with quoted strings.</p>
<p id="continuation_defaults">By default, leading spaces or tabs are omitted based on the indentation of the first line inside the continuation section. If the first line mixes spaces and tabs, only the first type of character is treated as indentation. If any line is indented less than the first line or with the wrong characters, all leading whitespace on that line is left as is. </p>
<p>The default behavior of a continuation section can be overridden by including one or more of the following options to the right of the section's opening parenthesis. If more than one option is present, separate each one from the previous with a space. 例如: <code>( LTrim Join|</code>.</p>
<p id="Join"><strong>Join</strong>: Specifies how lines should be connected together. If this option is omitted, each line except the last will be followed by a linefeed character (`n). If the word <em>Join</em> is specified by itself, lines are connected directly to each other without any characters in between. Otherwise, the word <em>Join</em> should be followed immediately by as many as 15 characters. 例如, <code>Join`s</code> would insert a space after each line except the last (&quot;`s&quot; indicates a literal space -- it is a special escape sequence recognized only by <em>Join</em>). Another example is <code>Join`r`n</code>, which inserts CR+LF between lines. Similarly, <code>Join|</code> inserts  a pipe between lines. To have the final line in the section also ended by a join-string, include a blank line immediately above the section's closing parenthesis.</p>
<p>Known limitation: If the Join string ends with a colon, it must not be the last option on the line. 例如, <code>(Join:</code> is treated as the label "(Join" and <code>(LTrim Join:</code> is unsupported, but <code>(Join: C</code> is okay.</p>
<p id="LTrim"><strong>LTrim</strong>: Omits all spaces and tabs at the beginning of each line. This is usually unnecessary because of the <a href="#continuation_defaults">default &quot;smart&quot; behaviour</a>.</p>
<p id="LTrim0"><strong>LTrim0</strong> (LTrim followed by a zero): Turns off the omission of spaces and tabs from the beginning of each line.</p>
<p id="RTrim0"><strong>RTrim0</strong> (RTrim followed by a zero): Turns off the omission of spaces and tabs from the end of each line.</p>
<p id="CommentOption"><strong>Comments</strong> (or <strong>Comment</strong> or <strong>Com</strong> or <strong>C</strong>): Allows <a href="Language.htm#comments">semicolon comments</a> inside the continuation section (but not <code>/*..*/</code>). Such comments (along with any spaces and tabs to their left) are entirely omitted from the joined result rather than being treated as literal text. Each comment can appear to the right of a line or on a new line by itself.</p>
<p id="accent"><strong>`</strong> (accent): Treats each backtick character literally rather than as an <a href="misc/EscapeChar.htm">escape character</a>. This also prevents the translation of any explicitly specified escape sequences such as <code>`r</code> and <code>`t</code>.</p>
<p id="non-continuation"><strong>)</strong>: If a closing parenthesis appears in the continuation section's options (except as a parameter of the <a href="#Join">Join</a> option), the line is reinterpreted as an expression instead of the beginning of a continuation section. This allows expressions like <code>(x.y)[z]()</code> to work without the need to escape the opening parenthesis.</p>
<p><a href="misc/EscapeChar.htm">Escape sequences</a> such as `n (linefeed) and `t (tab) are supported inside the continuation section except when the <a href="#accent">accent (`) option</a> has been specified.</p>
<p>When the <a href="#CommentOption">comment option</a> is absent, semicolon and /*..*/ comments are not supported within the interior of a continuation section because they are seen as literal text. However, comments can be included on the bottom and top lines of the section. 例如:</p>
<pre>FileAppend "   <em>; Comment.
; Comment.</em>
( LTrim Join    <em>; Comment.</em>
    &nbsp;; This is <strong>not</strong> a comment; it is literal. Include the word <i>Comments</i> in the line above to make it a comment.
)", "C:\File.txt"   <em>; Comment.</em></pre>
<p>As a consequence of the above, semicolons never need to be <a href="misc/EscapeChar.htm">escaped</a> within a continuation section.</p>
<p>A continuation section cannot produce a line whose total length is greater than 16,383 characters (if it tries, the program will alert you the moment the script is launched). One way to work around this is to do a series of concatenations into a variable.  例如:</p>
<pre>Var := "
(
...
)"
Var .= "`n  <em>; Add more text to the variable via another continuation section.</em>
(
...
)"
FileAppend Var, "C:\My File.txt"</pre>
<p>Since a closing parenthesis indicates the end of a continuation section, to have a line start with literal closing parenthesis, precede it with an accent/backtick: <code>`)</code>. However, this cannot be combined with the <a href="#accent">accent (`) option</a>.</p>
<p>A continuation section can be immediately followed by a line containing the open-parenthesis of another continuation section. This allows the options mentioned above to be varied during the course of building a single line.</p>
<p>The piecemeal construction of a continuation section by means of <a href="commands/_Include.htm">#Include</a> is not supported.</p>

<h2 id="ahk2exe">Convert a Script to an EXE (ahk2exe)</h2>
<p>A script compiler (courtesy of fincs) is included with the program.</p>
<p>Once a script is compiled, it becomes a standalone executable; that is, AutoHotkey.exe is not required in order to run the script. The compilation process creates an executable file which contains the following: the AutoHotkey interpreter, the script, any files it <a href="commands/_Include.htm">includes</a>, and any files it has incorporated via the <a href="commands/FileInstall.htm">FileInstall</a> function.</p>
<p>Ahk2Exe can be used in the following ways:</p>
<ol>
  <li><strong>GUI Interface</strong>: Run the &quot;Convert .ahk to .exe&quot; item in the Start Menu.</li>
  <li><strong>Right-click</strong>: Within an open Explorer window, you can right-click any .ahk file and select &quot;Compile Script&quot; (only available if the script compiler option was chosen when AutoHotkey was installed). This creates an EXE file of the same base filename as the script, which appears after a short time in the same directory. Note: The EXE file is produced using the same custom icon, .bin file and use <a href="#mpress">MPRESS</a> setting that were last used by Method #1 above.</li>
  <li id="ahk2exeCmd"><strong>Command Line</strong>: The compiler can be run from the command line with the following parameters:
  <pre class="no-highlight">Ahk2Exe.exe /in MyScript.ahk [/out MyScript.exe] [/icon MyIcon.ico] [/bin AutoHotkeySC.bin] [/mpress 0or1]</pre>
  例如:
<pre class="no-highlight">Ahk2Exe.exe /in "MyScript.ahk" /icon "MyIcon.ico"</pre>
Usage:
<ul>
<li>Parameters containing spaces should be enclosed in double quotes.</li>
<li>If the &quot;out&quot; file is omitted, the EXE will have the same base filename as the script itself.</li>
</ul></li>
</ol>
<p>Notes:</p>
<ul>
  <li>Compiling does not typically improve the performance of a script.</li>
  <li><a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> and <a href="Variables.htm#AllowMainWindow">A_AllowMainWindow</a> affect the behavior of compiled scripts.</li>
  <li>Custom version info (as seen in Explorer's file-properties dialog) can be added to your compiled scripts by using a utility such as Resource Hacker (freeware) to edit the file &quot;AutoHotkeySC.bin&quot;. This file is contained in the &quot;Compiler&quot; subfolder where AutoHotkey was installed. <a href="http://www.autohotkey.com/forum/topic22975.html">Compile_AHK II</a> can be used to facilitate this process. The compiled script can be edited instead of AutoHotkeySC.bin.</li>
  <li>The method above can also be used to change existing icons or add new ones to all compiled scripts.</li>
  <li>The built-in variable A_IsCompiled contains 1 if the script is running in compiled form. Otherwise, it is blank.</li>
  <li>When parameters are passed to Ahk2Exe, a message indicating the success or failure of the compiling process is written to stdout. Although the message will not appear at the command prompt, it can be &quot;caught&quot; by means such as redirecting output to a file.</li>
  <li>Additionally in the case of a failure, Ahk2Exe has exit codes indicating the kind of error that occurred. These error codes can be found at <a href="https://github.com/fincs/Ahk2Exe/blob/master/ErrorCodes.md">GitHub (ErrorCodes.md)</a>.</li>
</ul>
<p>The compiler's source code and newer versions can be found at <a href="https://github.com/fincs/Ahk2Exe">GitHub</a>.</p>

<h3 id="mpress">Compressing Compiled Scripts</h3>
<p>Ahk2Exe optionally uses MPRESS (a freeware program by MATCODE Software) to compress compiled scripts. If <strong>mpress.exe</strong> is present in the "Compiler" subfolder where AutoHotkey was installed, it is used automatically unless it is disabled via <code>/mpress 0</code> or the GUI setting. </p>
<p>Official website (was offline in March 2016): <a href="http://www.matcode.com/mpress.htm">http://www.matcode.com/mpress.htm</a></p>
<p>Mirror (downloads and information): <a href="https://autohotkey.com/mpress/">https://autohotkey.com/mpress/</a></p>
<p><strong>Note:</strong> While compressing the script executable prevents casual inspection of the script's source code using a plain text editor like Notepad or a PE resource editor, it does not prevent the source code from being extracted by tools dedicated to that purpose.</p>

<h2 id="cmd">Passing Command Line Parameters to a Script</h2>
<p>Scripts support command line parameters. The format is:</p>
<pre>AutoHotkey.exe [<i>Switches</i>] [<i>Script Filename</i>] [<i>Script Parameters</i>]</pre>
<p>And for compiled scripts, the format is:</p>
<pre>CompiledScript.exe [<i>Switches</i>] [<i>Script Parameters</i>]</pre>
<p><strong>Switches:</strong> Zero or more of the following:</p>
<table class="info">
  <tr><th>Switch</th><th>Meaning</th><th>Works compiled?</th></tr>
  <tr id="SlashF">
    <td>/f or /force</td>
    <td>Launch unconditionally, skipping any warning dialogs. This has the same effect as <a href="commands/_SingleInstance.htm">#SingleInstance Off</a>.</td>
    <td>Yes</td>
  </tr>
  <tr id="SlashR">
    <td>/r or /restart</td>
    <td>Indicate that the script is being restarted (this is also used by the <a href="commands/Reload.htm">Reload</a> function, internally).</td>
    <td>Yes</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut</td>
    <td>Send syntax errors that prevent a script from launching to stderr rather than displaying a dialog. See <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a> for details. This can be combined with /iLib to validate the script without running it.</td>
    <td>Yes</td>
  </tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td>Connect to a debugging client. 有关详细信息, 请参阅 <a href="#idebug">Interactive Debugging</a>.</td>
    <td>No</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td>Overrides the default codepage used to read script files. 有关详细信息, 请参阅 <a href="#cp">Script File Codepage</a>.</td>
    <td>No</td>
  </tr>
  <tr>
    <td>/iLib <em>"OutFile"</em></td>
    <td>
      <p>AutoHotkey loads the script but does not run it. For each script file which is auto-included via <a href="Functions.htm#lib">the library mechanism</a>, two lines are written to the file specified by <em>OutFile</em>. These lines are written in the following format, where <em>LibDir</em> is the full path of the Lib folder and <em>LibFile</em> is the filename of the library:</p>
<pre>#Include LibDir\
#IncludeAgain LibDir\LibFile.ahk</pre>
      <p>If the output file exists, it is overwritten. <em>OutFile</em> can be <code>*</code> to write the output to stdout.</p>
      <p>If the script contains syntax errors, the output file may be empty. The process exit code can be used to detect this condition; if there is a syntax error, the exit code is 2. The /ErrorStdOut switch can be used to suppress or capture the error message.</p>
    </td>
    <td>No</td>
  </tr>
</table>

<p id="defaultfile"><strong>Script Filename:</strong> This can be omitted if there are no <em>Script Parameters</em>. If omitted (such as if you run AutoHotkey directly from the Start menu), the program looks for a script file called <code><i>AutoHotkey</i>.ahk</code> in the following locations, in this order:</p>
<ul>
  <li>The directory which contains the <a href="Variables.htm#AhkPath">AutoHotkey executable</a>.</li>
  <li>The current user's <a href="Variables.htm#MyDocuments">Documents</a> folder.</li>
</ul>
<p>The filename <code><i>AutoHotkey</i>.ahk</code> depends on the name of the executable used to run the script. 例如, if you rename AutoHotkey.exe to MyScript.exe, it will attempt to find <code>MyScript.ahk</code>. If you run AutoHotkeyU32.exe without parameters, it will look for AutoHotkeyU32.ahk.</p>
<p id="stdin">Specify an asterisk (*) for the filename to read the script text from standard input (stdin). This also puts the following into effect:</p>
<ul>
  <li>The <a href="Variables.htm#InitialWorkingDir">initial working directory</a> is used as <a href="Variables.htm#ScriptDir">A_ScriptDir</a> and to locate the <a href="Functions.htm#lib">local function library</a>.</li>
  <li><a href="Variables.htm#ScriptName">A_ScriptName</a> and <a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a> both contain "*".</li>
  <li><a href="commands/_SingleInstance.htm">#SingleInstance</a> is off by default.</li>
</ul>
<p>For an example, 请参阅 <a href="commands/Run.htm#ExecScript">ExecScript()</a>.</p>
<p><strong>Script Parameters:</strong> The string(s) you want to pass into the script, with each separated from the next by a space. Any parameter that contains spaces should be enclosed in quotation marks. A literal quotation mark may be passed in by preceding it with a backslash (\&quot;). Consequently, any trailing slash in a quoted parameter (such as &quot;C:\My Documents<span class="red">\&quot;</span>) is treated as a literal quotation mark (that is, the script would receive the string C:\My Documents<span class="red">&quot;</span>). To remove such quotes, use <code>A_Args[1] := <a href="commands/StrReplace.htm">StrReplace</a>(A_Args[1], '"')</code></p>
<p id="cmd_args">Incoming parameters, if present, are stored as an array in the built-in variable <strong>A_Args</strong>, and can be accessed using <a href="Objects.htm#Usage_Simple_Arrays">array syntax</a>. <code>A_Args[1]</code> contains the first parameter. The following example exits the script when too few parameters are passed to it:</p>
<pre>if A_Args.Length() &lt; 3
{
    MsgBox "This script requires at least 3 parameters but it only received " A_Args.Length() "."
    ExitApp
}</pre>
<p>If the number of parameters passed into a script varies (perhaps due to the user dragging and dropping a set of files onto a script), the following example can be used to extract them one by one:</p>
<pre>for n, param in A_Args  <em>; For each parameter:</em>
{
    MsgBox "Parameter number " n " is " param "."
}
</pre>
<p>If the parameters are file names, the following example can be used to convert them to their case-corrected long names (as stored in the file system), including complete/absolute path:</p>
<pre>for n, GivenPath in A_Args  <em>; For each parameter (or file dropped onto a script):</em>
{
    Loop Files, GivenPath, "FD"  <em>; Include files and directories.</em>
        LongPath := A_LoopFileFullPath
    MsgBox "The case-corrected long path name of file`n" GivenPath "`nis:`n" LongPath
}</pre>

<h2 id="cp">脚本文件代码页</h2>
<p>The characters a script file may contain are restricted by the codepage used to load the file.</p>
<ul>
  <li>If the file begins with a UTF-8 or UTF-16 (LE) byte order mark, the appropriate codepage is used and the <a href="#CPn">/CP<i>n</i></a> switch is ignored.</li>
  <li>If the <a href="#CPn">/CP<i>n</i></a> switch is passed on the command-line, codepage <i>n</i> is used. For a list of valid numeric codepage identifiers, 请参阅 <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">MSDN</a>.</li>
  <li>In all other cases, the system default ANSI codepage is used.</li>
</ul>
<p>Note that this applies only to script files loaded by AutoHotkey, not to file I/O within the script itself. <a href="commands/FileEncoding.htm">FileEncoding</a> controls the default encoding of files read or written by the script, while <a href="commands/IniRead.htm">IniRead</a> and <a href="commands/IniWrite.htm">IniWrite</a> always deal in UTF-16 or ANSI.</p>
<p>As all text is converted (where necessary) to the <a href="Compat.htm#Format">native string format</a>, characters which are invalid or don't exist in the native codepage are replaced with a placeholder: '&#65533;'. This should only occur if there are encoding errors in the script file or the codepages used to save and load the file don't match.</p>
<p><a href="commands/RegWrite.htm">RegWrite</a> may be used to set the default for scripts launched from Explorer (e.g. by double-clicking a file):</p>
<pre><em>; Uncomment the appropriate line below or leave them all commented to
;   reset to the default of the current build.  Modify as necessary:
; codepage := 0        ; System default ANSI codepage
; codepage := 65001    ; UTF-8
; codepage := 1200     ; UTF-16
; codepage := 1252     ; ANSI Latin 1; Western European (Windows)</em>
if (codepage != "")
    codepage := " /CP" . codepage
cmd := Format('"{1}"{2} "%1" %*', A_AhkPath, codepage)
key := "AutoHotkeyScript\Shell\Open\Command"
if A_IsAdmin    <em>; Set for all users.</em>
    RegWrite cmd, "REG_SZ", "HKCR\" key
else            <em>; Set for current user only.</em>
    RegWrite cmd, "REG_SZ", "HKCU\Software\Classes\" key</pre>
<p>这里假定已经安装了 AutoHotkey. 如果没有, 则结果可能不理想.</p>

<h2 id="debug">调试脚本</h2>
<p>内置函数(如 <a href="commands/ListVars.htm">ListVars</a> 和 <a href="commands/Pause.htm">Pause</a>) 可以帮助你调试脚本. 例如, 把下面这两行临时插入精心选择的位置时, 可以在脚本中创建 "断点":</p>
<pre>ListVars
Pause</pre>
<p>当脚本执行到这两行时, 会显示所有变量当前包含的内容供你检查. 当你准备恢复时, 可以通过 File 或托盘菜单取消暂停. 然后脚本会继续执行, 直到遇到下一个"断点"(如果有).</p>
<p>通常最好把这些 "断点" 插入到活动窗口对当前脚本没有影响的位置, 例如 WinActivate 函数的前一行. 这样当您取消暂停时脚本才可以正确恢复操作.</p>
<p>下列函数也可以用于调试: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a> 和 <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
<p>一些常见错误, 例如拼写错误或忘记 "global" 声明时, 可以使用<a href="commands/_Warn.htm">启用警告</a>检测到.</p>
<h3 id="idebug">交互调试</h3>
<p>通过受支持的 <a href="AHKL_DBGPClients.htm">DBGp 客户端</a>可以进行交互调试. 通常可以执行以下操作:</p>
<ul>
  <li>设置和移除断点 - 遇到<a href="http://en.wikipedia.org/wiki/Breakpoint">断点</a>时暂停执行.</li>
  <li>单步调试代码 - 逐语句, 逐过程或跳出函数和子程序.</li>
  <li>检查所有变量或指定的变量.</li>
  <li>查看正在运行的子程序和函数的堆栈.</li>
</ul>
<p>注意在已编译脚本中此功能是禁用的.</p>
<p>要启用交互调试, 首先要运行受支持的调试器客户端, 然后使用命令行开关 <b>/Debug</b> 运行脚本.</p>
<pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
<p><i>SERVER</i> 和 <i>PORT</i> 可以省略. 例如, 下面的方式是等同的:</p>
<pre class="no-highlight">AutoHotkey /Debug "myscript.ahk"
AutoHotkey /Debug=localhost:9000 "myscript.ahk"</pre>
<p id="debug_attach">要向已经在运行的脚本附加调试器, 请向脚本发送消息, 如下所示:</p>
<pre>ScriptPath := "" <em>; 设置此变量为脚本的完整路径</em>
A_DetectHiddenWindows := true
if WinExist(ScriptPath " ahk_class AutoHotkey")
    <em>; 可选参数:
    ;   wParam  = 调试器客户端的 IPv4 地址, 为 32 位整数.
    ;   lParam  = 调试器客户端正在侦听的端口.</em>
    PostMessage DllCall("RegisterWindowMessage",  Str, "AHK_ATTACH_DEBUGGER")
</pre>
<p>当调试器连接后, 通过发送 DBGp 命令 "detach", 可以在不终止脚本的情况下分离调试器.</p>

<h2>脚本展示</h2>
<p>请参阅<a href="scripts/index.htm">此页面</a>了解一些有用的脚本.</p>
</body>
</html>