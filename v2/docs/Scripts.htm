<!DOCTYPE HTML>
<html lang="zh">
<head>
<title>脚本 - 定义 &amp; 使用 | AutoHotkey v2</title>
<meta name="description" content="Learn details about scripts in general, splitting long lines, compiling a script, passing command line parameters, codepage and debugging." />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<link href="static/theme.css" rel="stylesheet" type="text/css" />
<script src="static/content.js" type="text/javascript"></script>
<script type="text/javascript">
$(function(){
	var pageDATA_ua = window.navigator.userAgent.toLowerCase(); 
	if(pageDATA_ua.indexOf('ucbrowser')>=0){
		CaoNiMaDeUc();
	}
});
</script>
</head>
<body>

<h1>脚本</h1>
<p>相关话题:</p>
<ul>
  <li><a href="Program.htm">程序的使用</a>: 在一般情况下, 如何使用 AutoHotkey.</li>
  <li><a href="Concepts.htm">概念和约定</a>: AutoHotkey 使用的各种概念的通俗解释.</li>
  <li><a href="Language.htm">脚本语言</a>: 有关语法的具体详细信息(如何编写脚本).</li>
</ul>

<h2>目录</h2>
<ul>
  <li><a href="#intro">简介</a></li>
  <li><a href="#auto">脚本顶部(自动执行段)</a>: 当脚本启动时, 会自动执行的部分.</li>
  <li><a href="#continuation">把过长的行分割成一系列短行</a>: 这样可以提高脚本的可读性和可维护性.</li>
  <li><a href="#ahk2exe">把脚本转换成 EXE(ahk2exe)</a>: 把 .ahk 脚本转换成可以在任何 PC 上运行的 .exe 文件.</li>
  <li><a href="#cmd">向脚本传递命令行参数</a>: A_Args 变量包含了传入的参数.</li>
  <li><a href="#cp">脚本文件代码页</a>: 在脚本中可靠地使用非 ASCII 字符.</li>
  <li><a href="#debug">调试脚本</a>: 如何找出无法正常工作的脚本中的问题.</li>
</ul>
<h2 id="intro">简介</h2>
<p>每个脚本都是纯文本文件, 其中包含了可由程序(AutoHotkey.exe) 执行的文本行. 脚本中还可以包含<a href="Hotkeys.htm">热键</a>和<a href="Hotstrings.htm">热字串</a>或者甚至完全由它们组成. 不过, 在不包含热键和热字串时, 脚本会在启动后从上往下按顺序执行其中的函数.</p>
<p>程序会把脚本逐行加载到内存中, 每行最多可以包含 16,383 个字符. 在加载过程中, 脚本会被<a href="misc/Performance.htm">优化</a>和检查. 将列出所有的语法错误, 更正它们后脚本才能运行.</p>
<h2 id="auto">脚本顶部(自动执行段)</h2>
<p>脚本加载完成后, 它会从顶行开始执行, 直到遇到 <a href="commands/Return.htm">Return</a>, <a href="commands/Exit.htm">Exit</a>, <a href="Hotkeys.htm">热键/热字串标签</a>或脚本的底部(无论最先遇到哪个). 脚本的这个顶端部分被称为 <em>自动执行段</em>.</p>
<p class="warning"><strong>注意:</strong> 虽然脚本的 <em>第一个</em> 热键/热字串标签与 <a href="commands/Return.htm">return(返回)</a> 的效果相同, 但其他热键和标签却没有.</p>
<p id="persistent">脚本没有<a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, 可见的 <a href="objects/Gui.htm">GUIs</a>, 激活的<a href="commands/OnMessage.htm">消息监视</a>, 激活的<a href="commands/SetTimer.htm">计时器</a>, 激活的<a href="commands/OnClipboardChange.htm">OnClipboardChange</a> 回调函数, 自定义托盘<a href="objects/Menu.htm">菜单项目</a> 和 <a href="commands/_Persistent.htm">#Persistent</a> 指令, 那么它会在自动执行段完成后终止. 否则, 它会以空闲状态继续运行, 从而对热键, 热字串, <a href="objects/GuiOnEvent.htm">GUI 事件</a>, <a href="objects/Menu.htm">自定义菜单项目</a>和<a href="commands/SetTimer.htm">计时器</a>这些事件进行响应. 如果在自动执行段完成后, 这些条件发生了改变(例如, 禁用了最后一个计时器), 脚本可能会在最后一个正在运行的线程完成后或最后一个 GUI 关闭后退出.</p>
<p>每个由<a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, <a href="objects/Menu.htm">菜单项</a>, <a href="objects/GuiOnEvent.htm">GUI 事件</a>或<a href="commands/SetTimer.htm">计时器</a>启动的<a href="misc/Threads.htm">线程</a>以以下属性的默认值重新开始, 这些值在自动执行部分中设置. 如果没有设置, 则使用标准的默认值(与下面每个页面中注明的一样): <a href="commands/DetectHiddenWindows.htm">DetectHiddenWindows</a>, <a href="commands/DetectHiddenText.htm">DetectHiddenText</a>,  <a href="commands/SetTitleMatchMode.htm">SetTitleMatchMode</a>, <a href="commands/SendMode.htm">SendMode</a>, <a href="commands/SetKeyDelay.htm">SetKeyDelay</a>,  <a href="commands/SetMouseDelay.htm">SetMouseDelay</a>,
  <a href="commands/SetWinDelay.htm">SetWinDelay</a>,
  <a href="commands/SetControlDelay.htm">SetControlDelay</a>,
  <a href="commands/SetDefaultMouseSpeed.htm">SetDefaultMouseSpeed</a>,
  <a href="commands/CoordMode.htm">CoordMode</a>,
  <a href="commands/SetStoreCapslockMode.htm">SetStoreCapsLockMode</a>, <a href="commands/StringCaseSense.htm">StringCaseSense</a>, <a href="commands/Thread.htm">Thread</a> 和 <a href="commands/Critical.htm">Critical</a>.</p>
<p>如果自动执行段执行了很长时间才结束(或永不结束), 上面这些设置的默认值将在 100 毫秒后自动生效. 当自动执行段最终结束(如果可能) 时, 在自动执行段末尾生效的那些设置才更新为默认值. 因此, 通常最好在包含<a href="Hotkeys.htm">热键</a>, <a href="Hotstrings.htm">热字串</a>, <a href="commands/SetTimer.htm">计时器</a>或<a href="objects/Menu.htm">自定义菜单项</a>的脚本顶部设置自己想要的默认值. 还要注意, 每个<a href="misc/Threads.htm">线程</a>会保存它自己的上述设置的集合. 在一个线程中对这些设置的改变不会影响其他<a href="misc/Threads.htm">线程</a>.</p>

<p>除空格外, <code>/*</code> 必须出现在行首, 而 <code>*/</code> 只能出现在行首或行尾. 省略 <code>*/</code> 也是有效的, 在这种情况下, 文件的其余部分被注释掉.</p>
<h2 id="continuation">把长行分割成一系列短行</h2>
<p>长行可以分成一些小行, 以提高可读性和可维护性. 这样不会降低脚本的执行速度, 因为在脚本启动时这些短行会在内存中合并起来.</p>
<p>有三种方法, 通常可以组合使用:</p>
<ul>
  <li><a href="#continuation-line">延续前缀</a>(延续行): 以表达式运算符开始一行, 将其连接到前一行.</li>
  <li><a href="#continuation-expr">延续闭环</a>(延续表达式): 在大多数情况下, 括在 (), [] 或 {} 中的子表达式可以自动跨越多行.</li>
  <li><a href="#continuation-section">延续片段</a>: 标记一组要合并在一起的行, 并添加其他选项, 例如在行之间插入什么文本(或代码).</li>
</ul>
<p id="continuation-line"><strong>延续前缀</strong>: 以逗号或任何其他<a href="Variables.htm#Operators">表达式运算符</a>(除了 ++ 和 --) 开头的行会自动与其正上方的行合并. 在以下示例中, 第二行被附加到第一行, 因为它以逗号开头:</p>
<pre>FileAppend "This is the text to append.`n"   <em>; 这里可以使用注释.</em>
    <strong>,</strong> A_ProgramFiles "\SomeApplication\LogFile.txt"  <em>; 注释.</em></pre>
<p>同样地, 下列几行也会合并成单行, 因为最后两行以 &quot;and&quot; 或 &quot;or&quot; 开始:</p>
<pre>if (Color = &quot;Red&quot; or Color = &quot;Green&quot;  or Color = &quot;Blue&quot;   <em>; 注释.</em>
    <strong>or</strong> Color = &quot;Black&quot; or Color = &quot;Gray&quot; or Color = &quot;White&quot;)   <em>; 注释.</em>
    <strong>and</strong> ProductIsAvailableInColor(Product, Color)   <em>; 注释.</em></pre>
<p><a href="Variables.htm#ternary">三元运算符</a>也是个不错的选择::</p>
<pre>ProductIsAvailable := (Color = &quot;Red&quot;)
    <strong>?</strong> false  <em>; 我们没有任何红色产品, 所以不用那么麻烦去调用函数.</em>
    <strong>:</strong> ProductIsAvailableInColor(Product, Color)</pre>
<p>虽然上面示例中使用的缩进是可选的, 但它可以显示出哪些行属于上一行从而提高代码清晰度. 此外, 以 &quot;AND&quot; 和 &quot;OR&quot; 开头的行没有必要包含额外的空格; 程序会自动处理这些. 最后, 可以在上述示例中的任何行的末尾或行与行之间添加空行或<a href="Language.htm#comments">注释</a>.</p>
<p id="continuation-expr"><strong>延续闭环</strong>: 如果一行中包含一个带有未闭合 <code>(</code>/<code>[</code>/<code>{</code>  的表达式或函数/属性定义, 那么它将与后续的行连接, 直到左, 右括号的数量平衡为止. 换句话说, 在大多数情况下, 用小括号(圆括号), 中括号(方括号), 大括号 (花括号) 括起来的子表达式可以自动跨越多行. 例如:</p>
<pre>
myarray := [  <em>; 左中括号必须在这行中.</em>
  "item 1",
  "item 2",
]
MsgBox(
    "The value of item 2 is " myarray[2],
    "Title",
    "ok iconi"
    )
</pre>
<p>延续表达式可以包含两种类型的<a href="Language.htm#comments">注释</a>.</p>
<p>延续表达式可以包含普通的<a href="#continuation-section">延续片段</a>. 因此, 与任何包含表达式的行一样, 如果一行以非转义的左括号(<code>(</code>) 开头, 除非在同一行上有一个右括号(<code>)</code>), 否则它将被视为延续片段的开头.</p>
<p>引号括起来的字符串不能单独使用此方法跨越多行. 然而, 请参阅上面的内容.</p>
<p>如果程序判定行末尾的大括号(<code>{</code>) 应该被解释为块(<a href="commands/Block.htm#otb">OTB 样式</a>) 的开头而不是<a href="Language.htm#object-literal">对象标识符</a>的开头, 则行末尾的大括号不会导致延续. 具体来说(按优先级降序排列):</p>
<ul>
  <li>如果一个大括号前面有一个未闭合的 <code>(</code>/<code>[</code>/<code>{</code>, 那么它永远不会被解释为一个块的开始, 因为这会产生一个无效的表达式. 例如, 大括号在 <code>If ({</code> 中是对象标识符的开始.</li>
  <li>对象标识符不能合法地跟随 <code>)</code> 或 <code>]</code>, 因此, 如果大括号跟随这些符号中的任何一个(不包括空格), 它将被解释为块的开始(例如用于函数或属性定义).</li>
  <li>对于需要正文(主体)(因此支持 OTB) 的<a href="Language.htm#control-flow">控制流语句</a>, 仅当大括号前面有运算符时, 大括号才能成为对象标识符的开始, 如 <code>:= {</code> 或 <code>for x <strong>in</strong> {</code>. 特别是, 大括号在 <code>Loop {</code> 中始终是块的开始, 而 <code>If {</code> 和 <code>While {</code> 始终是错误.</li>
</ul>
<p>大括号可以安全地在任何不需要正文的函数调用, 表达式或控制流语句的行延续中使用. 例如:</p>
<pre>myfn() {
    return {
        key: "value"
    }
}</pre>
<p id="continuation-section"><strong>延续片段</strong>: 此方法应该用于合并大量行或当这些行不适合其他方法时. 虽然这个方法对于<a href="Hotstrings.htm">自动替换热字符串</a>特别有用, 但是它也可以用于任何<a href="Variables.htm#Expressions">表达式</a>. 例如:</p>
<pre><em>; 示例 #1:</em>
Var := "
(
第 1 行的文字.
第 2 行的文字. 默认情况下, 行与行之间存在换行符(`n).
此外, "引号" 会在适当时<a href="#continuation_quotes">自动转义</a>.
)"

<em>; 示例 #2:</em>
FileAppend "
(
一行文字.
默认情况下, 上一行与此行之间的硬回车(Enter) 将写入文件.
	这一行用制表符缩进; 默认情况下, 该制表符也将写入该文件.
)", A_Desktop "\My File.txt"</pre>
<p>在上面的示例中, 一系列的行在顶部和底部用一对括号括起来. 这被称为 <em>延续片段</em>. 注意, 右括号之后的任何代码也与其他行连接(没有任何分隔符), 但不包括左括号和右括号.</p>
<p>如果延续片段上面的行以<a href="Concepts.htm#names">命名</a>字符串结束, 而延续片段没有从引号字符串开始, 则自动插入一个空格, 将名称与延续片段的内容分隔开.</p>
<p id="continuation_quotes">如果延续片段以引号开始, 引号将自动转义(即它们被解释为原义字符), 如上面的示例所示. 否则, 引号的作用与正常情况相同; 也就是说, 延续片段可以包含带引号字符串的表达式.</p>
<p id="continuation_defaults">默认情况下, 根据延续片段中第一行的缩进, 省略前导空格或制表符. 如果第一行混合有空格和制表符, 则只将第一种类型的字符视为缩进. 如果任何行缩进小于第一行或使用不同的字符, 则该行上的所有前导空格都保持原样.</p>
<p>延续片段的默认行为可以通过在该片段的左括号的右侧包含以下一个或多个选项来覆盖改写. 如果存在多个选项, 请使用空格将每个选项与前一个选项分开. 例如: <code>( LTrim Join|</code>.</p>
<p id="Join"><strong>Join</strong>: 指定行与行之间连接的方式. 如果省略此选项, 那么除最后一行外的其他行后面都会跟一个换行符(`n). 如果指定单词 <em>Join</em> 自身, 则行与行之间直接连接而不添加任何字符. 否则, 单词 <em>Join</em> 后面可以紧跟最多 15 个字符. 例如, <code>Join`s</code> 会在除最后一行外的每行末尾插入一个空格(&quot;`s&quot; 表示原义的空格 -- 它是一个仅由 <em>Join</em> 识别的特殊转义序列). 另一个例子是 <code>Join`r`n</code>, 它会在行与行之间插入 CR+LF. 同样地, <code>Join|</code> 会在行之间插入管道符. 要让延续片段的最后一行也以连接字符串结尾, 请在它的右括号上方添加一个空行.</p>
<p>已知限制: 如果 Join 字符串以冒号结尾, 则它不能是该行的最后一个选项. 例如, <code>(Join:</code> 被视为标签 "(Join", <code>(LTrim Join:</code> 不受支持, 而 <code>(Join: C</code> 这种写法没有问题.</p>
<p id="LTrim"><strong>LTrim</strong>: 删除每行开头的所有的空格和制表符. 由于<a href="#continuation_defaults">默认的 &quot;智能&quot; 行为</a>, 这通常是不必要的.</p>
<p id="LTrim0"><strong>LTrim0</strong> (LTrim 后跟一个 0): 关闭每行开头的空格和制表符的删除.</p>
<p id="RTrim0"><strong>RTrim0</strong> (RTrim 后跟一个 0): 关闭每行末尾的空格和制表符的删除.</p>
<p id="CommentOption"><strong>Comments</strong> (或 <strong>Comment</strong> 或 <strong>Com</strong> 或 <strong>C</strong>): 在延续片段中允许<a href="Language.htm#comments">分号注释</a>(但不允许 <code>/*..*/</code>). 这些注释(以及它们左边的任何空格和制表符) 将完全从连接结果中省略, 而不是作为文本处理. 每个注释可以出现在一行的右侧, .也可以单独出现在新行上</p>
<p id="accent"><strong>`</strong>(重音): 按按原义处理反引号, 而不是作为<a href="misc/EscapeChar.htm">转义字符</a>. 这还可以防止任何显式指定的转义序列(<code>`r</code> 和 <code>`t</code>) 的转换.</p>
<p id="non-continuation"><strong>)</strong>: 如果延续片段的选项中出现右括号(除了作为 <a href="#Join">Join</a> 选项的参数), 则该行将被重新解释为表达式, 而不是延续片段的开头. 这允许像 <code>(x.y)[z]()</code> 这样的表达式工作, 而不需要转义左括号.</p>
<p>除非指定了<a href="#accent">重音(`) 选项</a>, 否则在延续片段内部支持诸如 `n (换行符) 和 `t(制表符) 之类的<a href="misc/EscapeChar.htm">转义序列</a>.</p>
<p>当 <a href="#CommentOption">comment 选项</a>不存在时, 分号和 /*..*/ 注释在延续片段的内部不受支持, 因为它们被视为原义文本. 但是, 注释可以包含在延续片段的底部和顶部行. 例如:</p>
<pre>FileAppend "   <em>; 注释.
; 注释.</em>
( LTrim Join    <em>; 注释.</em>
    &nbsp;; 本行 <strong>不是</strong> 注释; 它是原义的文字. 上面行包含 <i>注释</i> 的部分都是注释.
)", "C:\File.txt"   <em>; 注释.</em></pre>
<p>由上面可知, 延续片段中的分号不需要进行<a href="misc/EscapeChar.htm">转义</a>.</p>
<p>使用延续片段无法生成总长度超过 16,383 字符的行(如果尝试这么做, 那么程序在启动时会弹出警告). 解决这个问题的一种方法是将一系列延续片段连接到一个变量中. 例如:</p>
<pre>Var := "
(
...
)"
Var .= "`n  <em>; 通过另一个延续片段添加更多文本到此变量中.</em>
(
...
)"
FileAppend Var, "C:\My File.txt"</pre>
<p>因为右括号表示延续片段的结束, 所以要让某一行以原义的右括号开头, 需要在其前面加上重音符/反引号: <code>`)</code>. 然而, 这不能与<a href="#accent">重音(`) 选项</a>结合使用.</p>
<p>一个延续片段后面可以紧跟着包含另一个延续片段的左括号的一行. 这样使得上面提到的选项可以在创建单行的过程中进行改变.</p>
<p>不支持通过 <a href="commands/_Include.htm">#Include</a> 的方法把延续片段各部分连接起来.</p>

<h2 id="ahk2exe">把脚本转换成 EXE(ahk2exe)</h2>
<p>程序中包含了脚本编译器(由 fincs 提供).</p>
<p>脚本编译完成后, 就成了一个独立的可执行文件; 也就是说, 可以在没有安装 AutoHotkey 的机器上运行. 编译过程中会创建一个包含下列文件的可执行文件: AutoHotkey 解释器, 脚本需要<a href="commands/_Include.htm">加载</a>的任何文件以及通过 <a href="commands/FileInstall.htm">FileInstall</a> 函数内嵌的任何文件.</p>
<p>Ahk2Exe 的使用方法如下:</p>
<ol>
  <li><strong>GUI 界面</strong>: 在开始菜单中运行 &quot;Convert .ahk to .exe&quot; 项目.</li>
  <li><strong>右键点击</strong>: 在资源管理器中, 您可以在任何一个 .ahk 文件上右键点击并选择 "Compile Script"(只有在安装 AutoHotkey 时选择了脚本编译器时时才可用). 这样创建了与脚本具有相同的主文件名的 EXE 文件, 它会在稍后出现在相同目录中. 注: 这样生成的 EXE 文件会使用与前面的方法 #1 最后一次使用时相同的自定义图标, .bin 文件以及 <a href="#mpress">MPRESS</a> 设置.</li>
  <li id="ahk2exeCmd"><strong>命令行</strong>: 编译器可以从命令行运行，参数如下:
  <pre class="no-highlight">Ahk2Exe.exe /in MyScript.ahk [/out MyScript.exe] [/icon MyIcon.ico] [/bin AutoHotkeySC.bin] [/mpress 0or1]</pre>
  例如:
<pre class="no-highlight">Ahk2Exe.exe /in "MyScript.ahk" /icon "MyIcon.ico"</pre>
用法:
<ul>
<li>包含空格的参数应该用双引号括起来.</li>
<li>如果省略了 &quot;out&quot; 文件, EXE 将具有与脚本本身相同的基本文件名.</li>
</ul></li>
</ol>
<p>注意:</p>
<ul>
  <li>编译通常不会提高脚本的性能.</li>
  <li><a href="commands/_NoTrayIcon.htm">#NoTrayIcon</a> 和 <a href="Variables.htm#AllowMainWindow">A_AllowMainWindow</a> 会影响已编译脚本的行为.</li>
  <li>使用类似 <a href="http://www.angusj.com/resourcehacker/">Resource Hacker</a>(免费软件) 的工具编辑 &quot;AutoHotkeySC.bin&quot;文件可以给已编译脚本添加自定义版本信息(如资源管理器的文件属性对话框中看到的那些). 此文件包含在 AutoHotkey 安装目录的 &quot;Compiler&quot; 子文件夹中. 可以使用 <a href="https://github.com/mercury233/compile-ahk">Compile AHK</a> 简化这个过程. 可以直接编辑已编译脚本而不是 AutoHotkeySC.bin.</li>
  <li>上述方法还可用于更改现有图标或向所有已编译脚本添加新图标.</li>
  <li>如果脚本以编译的形式运行, 则内置变量 A_IsCompiled 的值为 1. 否则为空.</li>
  <li>传递参数到 Ahk2Exe 后, 它会在标准输出中写入表示编译过程成功与否的消息. 尽管此消息不会显示在命令提示符 &quot;捕获&quot;.</li>
  <li>另外, 当编译出错时, Ahk2Exe 还能返回退出代码, 它可以指示编译的错误类型. 可以在 <a href="https://github.com/fincs/Ahk2Exe/blob/master/ErrorCodes.md">GitHub (ErrorCodes.md)</a> 中找到这些错误代码.</li>
</ul>
<p>编译器的源代码和新版本可以在 <a href="https://github.com/fincs/Ahk2Exe">GitHub</a> 上找到.</p>

<h3 id="mpress">压缩编译的脚本</h3>
<p>Ahk2Exe 可选用 MPRESS(MATCODE Software 出品的一款免费软件) 来压缩编译的脚本. 如果在 AutoHotKey 安装目录的"Compiler"子目录存在 <strong>mpress.exe</strong>, 编译时将自动使用 MPRESS 来压缩, 除非指定了 <code>/mpress 0</code> 参数或在界面中设置了不启用压缩.</p>
<p>官网(2016 年 3 月该网站已下线): <a href="http://www.matcode.com/mpress.htm">http://www.matcode.com/mpress.htm</a></p>
<p>镜像(下载信息): <a href="https://autohotkey.com/mpress/">https://autohotkey.com/mpress/</a></p>
<p><strong>注意:</strong> 压缩编译脚本可以保护脚本不被诸如记事本或 PE 编辑器这类的工具随意查看, 但并不能保护脚本源码不被专用的提取工具提取.</p>

<h2 id="cmd">向脚本传递命令行参数</h2>
<p>脚本支持命令行参数. 格式为:</p>
<pre>AutoHotkey.exe [<i>Switches</i>] [<i>Script Filename</i>] [<i>Script Parameters</i>]</pre>
<p>对于已编译脚本, 格式为:</p>
<pre>CompiledScript.exe [<i>Switches</i>] [<i>Script Parameters</i>]</pre>
<p><strong>Switches</strong>(开关): 下列零个或多个:</p>
<table class="info">
  <tr><th width="10%">开关</th><th>意义</th><th width="10%">支持编译脚本?</th></tr>
  <tr id="SlashF">
    <td>/f 或 /force</td>
    <td>无条件强制启动, 忽略任何警告对话框. 和 <a href="commands/_SingleInstance.htm">#SingleInstance Off</a> 的效果相同.</td>
    <td>支持</td>
  </tr>
  <tr id="SlashR">
    <td>/r 或 /restart</td>
    <td>指示脚本正在重新启动(这也能在脚本内部通过 <a href="commands/Reload.htm">Reload</a> 函数实现).</td>
    <td>支持</td>
  </tr>
  <tr id="ErrorStdOut">
    <td>/ErrorStdOut</td>
    <td>把阻止脚本运行的语法错误发送到标准输出而不显示在对话框中. 有关详情, 请参阅 <a href="commands/_ErrorStdOut.htm">#ErrorStdOut</a>. 这可以联合 /iLib 来验证脚本而不用运行它.</td>
    <td>支持</td>
  </tr>
  <tr id="SlashDebug">
    <td>/Debug</td>
    <td>连接到调试客户端. 有关详情, 请参阅<a href="#idebug">交互调试</a>.</td>
    <td>不支持</td>
  </tr>
  <tr id="CPn">
    <td>/CP<i>n</i></td>
    <td>覆盖用于读取脚本文件的默认代码页. 有关详情, 请参阅<a href="#cp">脚本文件代码页</a>.</td>
    <td>不支持</td>
  </tr>
  <tr>
    <td>/iLib <em>"OutFile"</em></td>
    <td>
      <p>AutoHotkey 加载脚本但不运行它. 对于通过<a href="Functions.htm#lib">库机制</a>自动包含的每个脚本文件, 两行代码会写到 <em>OutFile</em> 指定的文件里面. 这些行以以下格式编写, 其中 <em>LibDir</em> 是 Lib 文件夹的完整路径, <em>LibFile</em> 是库的文件名:</p>
<pre>#Include LibDir\
#IncludeAgain LibDir\LibFile.ahk</pre>
      <p>如果输出文件存在, 它会被覆盖. <em>OutFile</em> 可以是 <code>*</code> 从而将输出写到标准输出中.</p>
      <p>如果脚本语法错误, 那么输出文件可能为空. 程序退出代码可以检测这种情况; 如果这里有语法错误, 退出代码就是 2. /ErrorStdOut 开关可用于抑制或捕获错误消息.</p>
    </td>
    <td>不支持</td>
  </tr>
</table>

<p id="defaultfile"><strong>Script Filename</strong>(脚本文件名): 如果不含 <em>Script Parameters</em>, 那么此参数可以省略. 省略时(例如, 如果您直接从开始菜单运行 AutoHotkey), 程序按以下顺序在这些位置查找一个名为 <code><i>AutoHotkey</i>.ahk</code> 的脚本文件:</p>
<ul>
  <li>包含 <a href="Variables.htm#AhkPath">AutoHotkey 可执行文件</a> 的目录.</li>
  <li>当前用户的 <a href="Variables.htm#MyDocuments">文档(我的文档)</a> 目录.</li>
</ul>
<p>文件名 <code><i>AutoHotkey</i>.ahk</code> 取决于运行脚本的可执行文件的名称. 例如, 重命名 AutoHotkey.exe 为 MyScript.exe, 它将尝试查找 <code>MyScript.ahk</code>. 如果您运行不带参数的 AutoHotkeyU32.exe, 它将查找 AutoHotkeyU32.ahk.</p>
<p id="stdin">为文件名指定星号(*) 以从标准输入(stdin) 读取脚本文本. 这也使以下内容生效:</p>
<ul>
  <li><a href="Variables.htm#InitialWorkingDir">初始工作目录</a>用作 <a href="Variables.htm#ScriptDir">A_ScriptDir</a> 并定位<a href="Functions.htm#lib">本地函数库</a>.</li>
  <li><a href="Variables.htm#ScriptName">A_ScriptName</a> 和 <a href="Variables.htm#ScriptFullPath">A_ScriptFullPath</a> 都包含 "*".</li>
  <li><a href="commands/_SingleInstance.htm">#SingleInstance</a> 默认是关闭的.</li>
</ul>
<p>有关示例, 请参阅 <a href="commands/Run.htm#ExecScript">ExecScript()</a>.</p>
<p><strong>Script Parameters</strong>(脚本参数): 要传递给脚本的字符串, 每个参数用空格分隔. 任何包含空格的参数都应该用引号括起来. 原义引号可以通过在它前面加上反斜杠(\&quot;) 来传递. 因此, 任何在加引号参数的末尾的反斜杠(如 &quot;C:\My Documents<span class="red">\&quot;</span>) 都被当作原义的引号(就是说, 脚本将接收到字符串 C:\My Documents<span class="red">&quot;</span>). 要移除引号, 使用 <code>A_Args[1] := <a href="commands/StrReplace.htm">StrReplace</a>(A_Args[1], '"')</code></p>
<p id="cmd_args">传入参数, 如果存在, 作为数组存储在内置变量 <strong>A_Args</strong> 中, 可以使用<a href="Objects.htm#Usage_Simple_Arrays">数组语法</a>来访问. <code>A_Args[1]</code> 包含第一个参数. 下面的示例在传递给它的参数太少时退出脚本:</p>
<pre>if A_Args.Length() &lt; 3
{
    MsgBox "脚本至少需要 3 个参数, 但它只接收到 " A_Args.Length() " 个."
    ExitApp
}</pre>
<p>如果传递给脚本的参数数目不确定(可能是由于用户将一组文件拖放到脚本中), 则可以使用以下示例逐个提取它们:</p>
<pre>for n, param in A_Args  <em>; 对每个参数进行循环:</em>
{
    MsgBox "Parameter number " n " is " param "."
}
</pre>
<p>如果参数是文件名, 则可以使用以下示例将它们转换为大小写校正的长名称(与文件系统中存储的一致), 包括完整/绝对路径:</p>
<pre>for n, GivenPath in A_Args  <em>; 对每个参数 (或拖放到脚本上的文件) 进行循环:</em>
{
    Loop Files, GivenPath, "FD"  <em>; 包括文件和目录.</em>
        LongPath := A_LoopFileFullPath
    MsgBox "The case-corrected long path name of file`n" GivenPath "`nis:`n" LongPath
}</pre>

<h2 id="cp">脚本文件代码页</h2>
<p>脚本文件可能包含的字符受加载文件时使用的代码页的限制.</p>
<ul>
  <li>如果文件以 UTF-8 或 UTF-16(LE) 字节顺序标记开头, 则使用相应的代码页并且忽略 <a href="#CPn">/CP<i>n</i></a> 开关.</li>
  <li>如果在命令行中传递了 <a href="#CPn">/CP<i>n</i></a> 开关, 则使用代码页 <i>n</i>. 有关有效的代码页标识符数字列表, 请参阅 <a href="http://msdn.microsoft.com/en-us/library/dd317756.aspx">MSDN</a>.</li>
  <li>在其他所有情况中使用系统默认的 ANSI 代码页.</li>
</ul>
<p>注意这仅适用于 AutoHotkey 加载脚本的时候, 而不包括脚本自身的文件 I/O. <a href="commands/FileEncoding.htm">FileEncoding</a> 决定了脚本读取或写入文件时使用的默认编码, 然而 <a href="commands/IniRead.htm">IniRead</a> 和 <a href="commands/IniWrite.htm">IniWrite</a> 总是使用 UTF-16 或 ANSI.</p>
<p>由于所有的文本都被转换(必要时) 为<a href="Compat.htm#Format">原生的字符串格式</a>, 所以无效的或不存在于原生代码页中的字符会被替换为占位符: '&#65533;'. 这种情况只可能在脚本文件编码错误或用于保存和读取脚本的代码页不匹配时发生.</p>
<p>可以使用 <a href="commands/RegWrite.htm">RegWrite</a> 为资源管理器中运行的脚本设置默认代码页(例如双击脚本文件时):</p>
<pre><em>; 取消对下面适当的行的注释或让它们都保留注释
; 以重新设置为当前版本的默认代码页. 需要时可自行修改:
; codepage := 0        ; 系统默认的 ANSI 代码页
; codepage := 65001    ; UTF-8
; codepage := 1200     ; UTF-16
; codepage := 1252     ; ANSI Latin 1; 西欧(Windows)</em>
if (codepage != "")
    codepage := " /CP" . codepage
cmd := Format('"{1}"{2} "%1" %*', A_AhkPath, codepage)
key := "AutoHotkeyScript\Shell\Open\Command"
if A_IsAdmin    <em>; 为所有用户进行设置.</em>
    RegWrite cmd, "REG_SZ", "HKCR\" key
else            <em>; 仅为当前用户进行设置.</em>
    RegWrite cmd, "REG_SZ", "HKCU\Software\Classes\" key</pre>
<p>这里假定已经安装了 AutoHotkey. 如果没有, 则结果可能不理想.</p>

<h2 id="debug">调试脚本</h2>
<p>内置函数(如 <a href="commands/ListVars.htm">ListVars</a> 和 <a href="commands/Pause.htm">Pause</a>) 可以帮助你调试脚本. 例如, 把下面这两行临时插入精心选择的位置时, 可以在脚本中创建 "断点":</p>
<pre>ListVars
Pause</pre>
<p>当脚本执行到这两行时, 会显示所有变量当前包含的内容供你检查. 当你准备恢复时, 可以通过 File 或托盘菜单取消暂停. 然后脚本会继续执行, 直到遇到下一个"断点"(如果有).</p>
<p>通常最好把这些 "断点" 插入到活动窗口对当前脚本没有影响的位置, 例如 WinActivate 函数的前一行. 这样当您取消暂停时脚本才可以正确恢复操作.</p>
<p>下列函数也可以用于调试: <a href="commands/ListLines.htm">ListLines</a>, <a href="commands/KeyHistory.htm">KeyHistory</a> 和 <a href="commands/OutputDebug.htm">OutputDebug</a>.</p>
<p>一些常见错误, 例如拼写错误或忘记 "global" 声明时, 可以使用<a href="commands/_Warn.htm">启用警告</a>检测到.</p>
<h3 id="idebug">交互调试</h3>
<p>通过受支持的 <a href="AHKL_DBGPClients.htm">DBGp 客户端</a>可以进行交互调试. 通常可以执行以下操作:</p>
<ul>
  <li>设置和移除断点 - 遇到<a href="http://en.wikipedia.org/wiki/Breakpoint">断点</a>时暂停执行.</li>
  <li>单步调试代码 - 逐语句, 逐过程或跳出函数和子程序.</li>
  <li>检查所有变量或指定的变量.</li>
  <li>查看正在运行的子程序和函数的堆栈.</li>
</ul>
<p>注意在已编译脚本中此功能是禁用的.</p>
<p>要启用交互调试, 首先要运行受支持的调试器客户端, 然后使用命令行开关 <b>/Debug</b> 运行脚本.</p>
<pre class="Syntax">AutoHotkey.exe /Debug[=<i>SERVER</i>:<i>PORT</i>] ...</pre>
<p><i>SERVER</i> 和 <i>PORT</i> 可以省略. 例如, 下面的方式是等同的:</p>
<pre class="no-highlight">AutoHotkey /Debug "myscript.ahk"
AutoHotkey /Debug=localhost:9000 "myscript.ahk"</pre>
<p id="debug_attach">要向已经在运行的脚本附加调试器, 请向脚本发送消息, 如下所示:</p>
<pre>ScriptPath := "" <em>; 设置此变量为脚本的完整路径</em>
A_DetectHiddenWindows := true
if WinExist(ScriptPath " ahk_class AutoHotkey")
    <em>; 可选参数:
    ;   wParam  = 调试器客户端的 IPv4 地址, 为 32 位整数.
    ;   lParam  = 调试器客户端正在侦听的端口.</em>
    PostMessage DllCall("RegisterWindowMessage", &quot;Str&quot;, "AHK_ATTACH_DEBUGGER")
</pre>
<p>当调试器连接后, 通过发送 DBGp 命令 "detach", 可以在不终止脚本的情况下分离调试器.</p>

<h2>脚本展示</h2>
<p>请参阅<a href="scripts/index.htm">此页面</a>了解一些有用的脚本.</p>
</body>
</html>